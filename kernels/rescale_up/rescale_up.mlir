builtin.module {
  func.func @snax_main() -> (tensor<64xi32>, tensor<64xi32>) {
    %0 = arith.constant dense<[-25, 52, -35, -113, -21, -56, 61, -107, -25, -6, 83, 87, -53, 75, -40, -11, -28, -24, 24, 3, 22, -75, -126, -40, 108, 30, -90, 2, 64, 60, -107, 33, 76, -70, -106, 125, 108, -39, -79, 91, -69, 127, 42, 92, 60, 80, -113, 62, 62, 47, 62, -77, -20, -73, 116, -64, 121, 3, 101, -77, 7, -107, -55, 39]> : tensor<64xi8>
    %1 = arith.constant dense<[-251070, 522225, -351498, -1134836, -210899, -562396, 612610, -1074579, -251070, -60257, 833552, 873723, -532268, 753210, -401712, -110471, -281198, -241027, 241027, 30128, 220941, -753210, -1265392, -401712, 1084622, 301284, -903851, 20086, 642739, 602568, -1074579, 331412, 763252, -702996, -1064536, 1255349, 1084622, -391669, -793381, 913894, -692953, 1275435, 421797, 923937, 602568, 803424, -1134836, 622653, 622653, 472011, 622653, -773295, -200856, -733124, 1164964, -642739, 1215178, 30128, 1014322, -773295, 70300, -1074579, -552354, 391669]> : tensor<64xi32>
    %2 = tosa.rescale %0 {input_zp = 0 : i32, output_zp = 0 : i32, multiplier = array<i32: 1140768826>, shift = array<i32: 47>, scale32 = true, double_round = true, per_channel = false} : (tensor<64xi8>) -> tensor<64xi32>
    func.return %2, %1 : tensor<64xi32>, tensor<64xi32>
  }
}

