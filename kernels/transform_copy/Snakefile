from util.snake.configs import get_snax_mac_config

config = get_snax_mac_config()
config["snaxoptflags"] = ",".join(
    [
        "dispatch-kernels",
        "set-memory-space",
        "set-memory-layout",
        "realize-memref-casts",
        "reuse-memref-allocs",
        "insert-sync-barrier",
        "snax-copy-to-dma",
        "memref-to-snax",
        "snax-to-func",
        "clear-memory-space",
        "postprocess",
    ]
)


module default_rules:
    snakefile:
        "../../util/snake/default_rules.smk"
    config:
        config


use rule * from default_rules as default_*


module snax_rules:
    snakefile:
        "../../util/snake/snax.smk"
    config:
        config


use rule * from snax_rules as snax_*


from gendata import create_files

files = ["transform_copy", "transform_from_none", "transform_from_strided"]


# Rules
rule all:
    input:
        expand(
            "{file}_trace_chip_{num_chips:02d}_hart_{num_harts:05d}.dasm",
            file=files,
            num_chips=range(config["num_chips"]),
            num_harts=range(config["num_harts"]),
        ),


rule generate_data:
    output:
        "{folder}/data.c",
        "{folder}/data.h",
    run:
        create_files(f"{wildcards.folder}/data")


rule compile_snax_binary:
    input:
        "{file}.o",
        "main_{file}.o",
        "{file}/data.o",
    output:
        "{file}.x",
    shell:
        "{config[ld]} {config[ldflags]} {input} -o {output}"


rule compile_main:
    input:
        "{file}/data.h",
        "main.c",
    output:
        temp("main_{file}.o"),
    shell:
        "{config[cc]} {config[cflags]} -I./{wildcards.file} -c {input[1]} -o {output}"
