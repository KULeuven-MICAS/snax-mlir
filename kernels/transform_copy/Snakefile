from util.snake.configs import get_snax_alu_config

config = get_snax_alu_config()


module snax_rules:
    snakefile:
        "../../util/snake/snax.smk"
    config:
        config


use rule * from snax_rules exclude snax_opt_mlir as snax_*


rule compile_snax:
    """
    Apply various transformations snax-opt on mlir files.
    Options controlled with `snaxoptflags` defined in config.
    """
    input:
        "{file}.mlir",
    output:
        temp("{file}.ll.mlir"),
    shell:
        "{config[snaxc]} --no-frontend -c {config[snaxc-config]} -o {output} {input}"


from gendata import create_files

files = ["transform_copy", "transform_from_none", "transform_from_strided"]


# Rules
rule all:
    input:
        expand("{file}_traces.json", file=files),


rule generate_data:
    output:
        "{folder}/data.c",
        "{folder}/data.h",
    run:
        create_files(f"{wildcards.folder}/data")


rule compile_snax_binary:
    input:
        "{file}.o",
        "main_{file}.o",
        "{file}/data.o",
    output:
        "{file}.x",
    shell:
        "{config[ld]} {config[ldflags]} {input} -o {output}"


rule compile_main:
    input:
        "{file}/data.h",
        "main.c",
    output:
        temp("main_{file}.o"),
    shell:
        "{config[cc]} {config[cflags]} -I./{wildcards.file} -c {input[1]} -o {output}"
