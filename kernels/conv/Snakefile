from util.snake.configs import get_snax_gemmx_3d_config

config = get_snax_gemmx_3d_config()

snaxoptflags = ",".join(
    [
        "preprocess",
        "convert-linalg-to-kernel",
        "insert-accfg-op{{accelerator=snax_gemmx}}",
        "dispatch-kernels",
        "convert-linalg-to-dart",
        "dart-fuse-operations",
        "snax-bufferize",
        "alloc-to-global",
        "set-memory-space",
        "dart-scheduler{{schedule_idx={schedule_idx}}}",
        "set-memory-layout",
        "realize-memref-casts",
        "insert-sync-barrier",
        "dispatch-regions{{nb_cores=3}}",
        "dart-layout-resolution",
        "convert-dart-to-snax-stream",
        "convert-linalg-to-accfg",
        "test-add-mcycle-around-launch",
        "snax-lower-mcycle",
        "convert-accfg-to-csr",
        "snax-copy-to-dma",
        "memref-to-snax",
        "snax-to-func",
        "clear-memory-space",
        "postprocess",
    ]
)


module snax_rules:
    snakefile:
        "../../util/snake/snax.smk"
    config:
        config


use rule * from snax_rules exclude default_snax_opt_mlir as snax_*


files = ["conv"]
schedule_idx = range(288)


# Rules
rule all:
    input:
        expand(
            "{file}_schedule-{schedule_idx}_traces.json",
            file=files,
            schedule_idx=schedule_idx,
        ),


rule aggregate:
    input:
        expand("conv_schedule-{schedule_idx}_traces.json", schedule_idx=schedule_idx),
    output:
        "summary.json",
    run:
        import json

        results = []
        for f in input:
            with open(f) as fin:
                data = json.load(fin)
                # Count the number of sections in the first element of the outer list: data[0][0]
            sections = len(data[0][0])
            # Extract the cycles value from the third element (index 2) in data[0][0]
            cycles = data[0][0][2]["cycles"]
            results.append({"file": f, "cycles": cycles, "sections": sections})

        with open(output[0], "w") as fout:
            json.dump(results, fout, indent=4)


rule snax_opt_mlir:
    """
    Apply various transformations snax-opt on mlir files.
    Options controlled with `snaxoptflags` defined in config.
    """
    input:
        "{file}.mlir",
    output:
        temp("{file}_schedule-{schedule_idx}.ll.mlir"),
    params:
        flags=lambda wc: snaxoptflags.format(schedule_idx=wc.schedule_idx),
    shell:
        "{config[snax-opt]} -p {params.flags} -o {output} {input}"


rule generate_conv:
    output:
        "conv.mlir",
    script:
        "conv.py"


rule link_snax_binary:
    input:
        "{file}.o",
        "main.o",
    output:
        "{file}.x",
    shell:
        "{config[ld]} {config[ldflags]} {input} -o {output}"
