#map = affine_map<(d0, d1, d2, d3) -> (d3)>
#map1 = affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>
#map2 = affine_map<(d0, d1) -> (d1, d0)>
#map3 = affine_map<(d0, d1) -> (d0, d1)>
#map4 = affine_map<(d0, d1) -> (d1)>
#map5 = affine_map<(d0, d1) -> (0, 0)>
#map6 = affine_map<(d0, d1) -> (0, d1)>
#map7 = affine_map<(d0, d1) -> (d0, 0)>
module {
  func.func @main(%arg0: tensor<?x49x10x1xi8> {ml_program.identifier = "input_1"}) -> (tensor<?x12xi8> {ml_program.identifier = "Identity"}) {
    %cst = arith.constant dense<"0x667F7688958163817FCC39E19287D794B3819298C4DB5DAB3181D897326E39D3D6CA7C44675E683FB3819A9990357FFF697FD39F4C3A5B7F57BFBB819C8D77776B2C3F8196B9649E209454C4818D8181C9ABCE2DF0C1408129AA9EBF81E54B99D3815B1F6A7C6651AE5FEA98817254B57A7A7FAC7FF74D584D96BB849F55747F7F187B0A813D45BCC3BC5FAEBC9229A3818FB056A5F331B41F8181B64F817FFBF1DA43F27F6E5059C0B781D3B57F71DD7F51D8C078C065DB60DC81CDDE237F480A5F1DB5D1FB03B319CE08C518C5ACF102D5CF81C1B24A26E0DCD1E9141210CAD2021E571008102FE3D4D910C71521111621F7DAF81FD11910DDEE0E0E81FD1E0B270FBCF2DCF5BDF7C500BEF2D6BDEF15D9AFEB09D62711C535D2F6A8E8F8CAC9151FD1FADE1450E61DE909D50C12BD0F2312C7F0DADB1BF6DBF22EFE190816D66D0D31D41DF1E7C1F109D6EFB85505F6F5BE28A4DD28C5DB14DAF0358CED25EFFC81B617FC2F4F99D3E127E70A16CCF115E8D3E6DED1CA03E4020CDE37EE17475C74A2BAC07FB775815682C58191ABAAB4CDDD82817F91AC9D9BC944427481A1C73A7F6B7F505A8AC58C9790356A18683CF5994A307F086281879FCC0D6C602F675183B18A609E22996181ABA65691AEB38C1DABB77BC082DA9FA8A5F04DB081B32E115F7666648146FE93BA734CC17263648136DB68357F9797A3856B686B0E2F7FF9BB2E3EF1CFD57F92A6E17E81A1D3814081B77222818AB081488D6A0286E9178F6F347F7F89D2B481D35366817D67BBBA4C814FBD54FA92BC816E653B"> : tensor<3x3x64x1xi8>
    %cst_0 = arith.constant dense<"0xtensor<3x3x64x1xi8>
    %cst_1 = arith.constant dense<"0x58B7BD3FCCDFFD7608994E37E6507FA212607FCC66F54FF003F54C0F6FD3AFEA0955811D03294F7FE4FCBB72DC2C2555F9643508D60AA4C42D4881CC0BE416CEFFC50BBBA50E1DBE2BB82A54D97FD57F661E280B74DEE74D7FFB8DA6D0E9D17F349871FCDCC77F02BB81D140DF61AAF542D4F05385EDE5E0FCE4EDF5EAD90E8126D67F477D1CBB77020B68D77FF304DF127FD5F1A98170C745DED01AD0BBD7FFB8048D3119EBE42291F2DBB6B4B906EB81EA81E9E0C9E17FE1EF15F6003CEBAB7F14B83491C4206C1CC40F3A934A50CEC85975B854FC5BE9A3186A337F7F89DE2539B7FFB87FF4F932FBE1409BD6537F7C6DFFEB81C397EB344CF5F53B9DF4EE09BD120E1CDE3A130BC63AE8F779892C7F2CD1DA7FE614325AFCCF48CC0EF72F41E735DEACD439781F34CDFBBE47FAD722F0A726BF0035233803DCE2D0B87FB1F4CD2D087FE70290EF3954E33E1278D9DD3AECC3CFECE9A34025816E2B297ADE0BC6DA5DC7D89EC8EBDAE487A61C030F87F9E82E3281AD2B2897379A440FB19A6140E87FFAD87F217F81BD6CA523CD24E72C4081F7D26D8183576C3A563F81D51F1692D29B5E48EE3CEDE47F81C87F16557F9881E195E0A67F0648AB4DF1EB472F81D5F140F416DCE4EB2B811742181253243794F9F7E1F45F1757520B33EC0F7F4F0ECAC4A37D4C5E6481F3B8EFFA1016F407F7DEC424226424CDA824EB600B32C4FD370181D781FE587F1D1F527ED3D15116A99AEF81CF4E7F9E7F5C7953B62181237F81F9FEC77F42DDBCF37FA4FDC2E05829BEA0812F19816E817F81C9EC"> : tensor<3x3x64x1xi8>
    %cst_2 = arith.constant dense<"0x2A01C1D623D3F7C17F81E2CDB92DDF04D21636D341F52DCBC2542ABFDBDDF445E9F7E6FCA6F7FBF6D4207F16BFFDC7BCD1122204B23F38773048F3C9E081B7DDFEA0207FDD1BC9A8CB70E4362DEA1AB01412E7DB1608F3DF19E72F045C0A3B810A7F1BF5EDF6ECBA2B96F107FBC0B2D60181C111B19C430AFA82F9F32003DDDE1E81B4027F0A7FF3A84E7CBAD9B7D7064D8D7D1EF8EB130FE8D0B460391C78D0C455F788E19CBB160544D8A9035012A59AD08BAD2581BA817FAD03F9B63DE57FBCC6D103C97FB78AB98ABF3C813120D84A33257F0DCCF17FE375134BB8CEBE34E0F981EA8A2A05E9D619CE237FE581962516FBF4BC057F8C26507FE6519CD1E1DEAB16B0E4EDE6BDD35B7FBF6AF2AF79C0E7B3B0EA23D6D81DBAAB2ED4F0158B17E92EF2EEAFFEDC4BC5D6DDC07FB2C90476D4D3EEFD74DAF64BDEFEFBCCDB4D0FD88E367ADFD6352B00CD00DB81E1B422817F7EA9A8DADE8101AF43D8157FCDBDFBFF81120F811E077F1F81E99432087F93867F7FEFE6500C81509E81277F503B9ACBF8DFF0CC81D7FDF9193DF37F9D4ADE02E81DCAFDE600D4F501077FCEE37F00C2447F7A01E505F1F90705E5C6B101EC1402011E9B9B109DC404FC2DFD0E81ED1E34E124F825624DD8BCB5F5BF7F77E2BCEFE72E7F34D5E681CD3EEBBCBE1CEE63F8EB810C01F84EFEE50C1103D028287F0B07F29223CF0503F5ECB6EEF3C861817CF7D8EEF535C4957F2DF33D22819924D98181E0F9B881C8817F18BDFCF2ED09BE21F5997F81AB111A9787D57F2E20BF29C314D769A146D3819655CFB8"> : tensor<3x3x64x1xi8>
    %cst_3 = arith.constant dense<1.400000e+01> : tensor<1x1xf32>
    %cst_4 = arith.constant dense<0.14469251> : tensor<1x1xf32>
    %cst_5 = arith.constant dense<2.560000e+02> : tensor<1x1xf32>
    %cst_6 = arith.constant dense<-1.280000e+02> : tensor<1x1xf32>
    %cst_7 = arith.constant dense<[-78, -16, -66, -88, -8, -92, -202, 32, -63, -151, -43, 171]> : tensor<12xi32>
    %cst_8 = arith.constant dense<"0xtensor<12x64xi8>
    %cst_9 = arith.constant dense<[-1989, 1416, -2778, 1276, 5653, 3672, -528, 1344, 946, 6747, -5993, 2735, 2973, -544, 281, 3569, 1429, -351, 2914, 1182, 2554, 3511, -547, 2738, -1590, -1174, -1547, -890, -797, 4840, 5617, -1419, 664, 385, 2873, 4123, 2414, 823, 4388, 876, 2897, 1882, -188, 1518, 2101, 5070, 2927, -1573, 774, -585, 2195, 447, 1743, 2316, 3304, 388, 2386, 3316, 1540, 1486, 1064, 4623, -799, 5472]> : tensor<64xi32>
    %cst_10 = arith.constant dense<"tensor<64x1x1x64xi8>
    %cst_11 = arith.constant dense<[-2492, -8434, -4092, 6676, 7389, 2053, -3084, 7358, -1247, 8845, -2530, 7362, 5024, 9570, -289, 7954, 6420, 6368, 5273, 94, 4397, 5913, -7233, 3552, 2937, 4887, 6631, 6875, -748, 2192, -2347, 5024, 6292, 3686, -2350, -890, -3736, -3442, -3349, -6784, 6222, 106, 5129, 6863, 6943, -3998, -1525, 2892, -2389, -4506, -1055, 8403, -3350, 951, -3446, -1376, -4756, 5490, 7559, 6331, 5207, -1963, -1266, -2868]> : tensor<64xi32>
    %cst_12 = arith.constant dense<[3639, -3131, -1337, 2763, 1672, 1445, 1668, 1549, -435, 8597, 5303, -1506, -1637, 1279, -2588, 2357, 542, 6815, 1865, -338, 2617, 2286, 2156, -9234, -2142, -9524, 7769, 2814, 2861, -1713, 1179, -2731, 5008, -673, 1334, 2438, -2285, -3961, -3400, 6974, -2340, 3669, -997, 2847, 3170, -3044, 495, 1406, 4721, 4375, 1136, 3746, -1267, -3157, 708, -749, 3354, 4271, 1923, -5101, 5839, 2871, 206, 1832]> : tensor<64xi32>
    %cst_13 = arith.constant dense<"tensor<64x1x1x64xi8>
    %cst_14 = arith.constant dense<[-1333, -3619, -753, -1067, 2554, -120, 6201, 4230, -5422, -1668, -825, 3613, -4071, -617, 3491, 4556, 1795, 4054, 5848, 2363, 5193, -2022, -4199, -371, -4552, 6335, 2468, -3087, -1224, -3442, 5279, -2885, -2138, 5721, -3896, 7110, -174, -1711, -2261, -4003, -2400, 5775, -3994, -4656, -1035, -1577, -3418, -559, 2939, -1270, -3062, -2249, -4745, -2934, -949, -2132, 2827, 4074, -1473, 1411, -1383, 2562, 3340, -2837]> : tensor<64xi32>
    %cst_15 = arith.constant dense<[3050, -6036, -2792, -4920, 2566, 3719, -4042, 1847, 1495, 1594, 1690, 7181, 4171, -399, 3461, 3797, -822, 3324, 4882, 880, -1267, 1062, -2672, -808, -5813, -536, -3983, 5958, -2404, 94, 521, -1073, 2107, 953, 638, 1506, 4034, -1731, 2849, -622, 262, 1227, 368, -2933, 442, -1037, -3659, 1779, 3769, 301, -270, 2441, -1966, 3602, 1843, -3268, -3412, -2171, -2984, -843, 50, -776, 2696, -1538]> : tensor<64xi32>
    %cst_16 = arith.constant dense<"tensor<64x1x1x64xi8>
    %cst_17 = arith.constant dense<[-2035, 2513, 217, -1406, -679, 1521, -728, 13, -1061, 2147, -1582, -878, 614, -2680, -1258, 305, -836, -2719, -1724, 3249, -661, 1390, -1287, 1092, -1899, -1060, 955, -1120, -1365, -1494, 2366, -25, -1129, 285, 1159, -954, 3192, 30, -1114, -1311, -860, -177, 2280, -1374, 3264, -944, -335, -732, -897, -1152, 1702, -383, 2357, 2805, 2356, -497, -1255, 600, 255, 3030, -1217, 1745, -604, 2423]> : tensor<64xi32>
    %cst_18 = arith.constant dense<[2950, -2130, 1027, 1861, 2719, 2779, -2665, 3118, -175, 1338, 1490, 1725, 2797, 360, 3689, 1831, 1594, 160, 4501, 1117, 1891, 3329, 2112, -1767, 2176, 1895, 3524, -2024, 525, -121, 1295, -166, 1487, 45, 564, 2513, 2661, 1152, 1251, -3308, 1557, -1394, 2867, 430, 1235, 1860, 1961, -866, 1891, 1279, 2721, 3924, 1879, -515, 618, 316, 1145, 2838, 2195, 1386, 581, -2077, -113, -71]> : tensor<64xi32>
    %cst_19 = arith.constant dense<"tensor<64x1x1x64xi8>
    %cst_20 = arith.constant dense<[469, 1727, 643, -38, 357, -174, 282, 1510, -12, 7, 93, 48, 63, 181, 245, 143, -148, 443, 7, 32, 198, 876, -126, -439, 448, 346, 723, -19, 20, 15, 92, 911, -235, -251, 161, 623, 283, 892, 870, 580, -8, -80, -149, 360, 47, 265, 1284, 1494, -155, 162, 302, 2, 363, 170, -70, 68, 174, 346, 8, 695, 528, 791, 390, -10]> : tensor<64xi32>
    %cst_21 = arith.constant dense<[-164, -419, 145, -892, -78, 42, 74, -326, -316, 20, 136, 105, -21, -508, -158, -171, -375, 234, -449, 30, 55, 298, 81, 39, 315, -464, -100, -71, -382, 145, -50, -167, 69, -765, -89, 509, -1, -318, 1435, -374, -374, 9, 414, 67, -7, 204, -509, -406, -143, 80, 52, -171, 140, -866, -707, -225, 38, 173, -116, -452, 232, 264, -94, -339]> : tensor<64xi32>
    %cst_22 = arith.constant dense<"0xtensor<64x10x4x1xi8>
    %c0 = arith.constant 0 : index
    %dim = tensor.dim %arg0, %c0 : tensor<?x49x10x1xi8>
    %c83_i8 = arith.constant 83 : i8
    %padded = tensor.pad %arg0 low[0, 4, 1, 0] high[0, 5, 1, 0] {
    ^bb0(%arg1: index, %arg2: index, %arg3: index, %arg4: index):
      tensor.yield %c83_i8 : i8
    } : tensor<?x49x10x1xi8> to tensor<?x58x12x1xi8>
    %0 = tensor.empty(%dim) : tensor<?x25x5x64xi32>
    %c0_i32 = arith.constant 0 : i32
    %1 = linalg.fill ins(%c0_i32 : i32) outs(%0 : tensor<?x25x5x64xi32>) -> tensor<?x25x5x64xi32>
    %2 = tensor.empty(%dim) : tensor<?x25x5x64xi32>
    %c83_i32 = arith.constant 83 : i32
    %c0_i32_23 = arith.constant 0 : i32
    %3 = linalg.conv_2d_nhwc_fhwc_q {dilations = dense<1> : tensor<2xi64>, strides = dense<2> : tensor<2xi64>} ins(%padded, %cst_22, %c83_i32, %c0_i32_23 : tensor<?x58x12x1xi8>, tensor<64x10x4x1xi8>, i32, i32) outs(%1 : tensor<?x25x5x64xi32>) -> tensor<?x25x5x64xi32>
    %4 = linalg.generic {indexing_maps = [#map, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%cst_21, %3 : tensor<64xi32>, tensor<?x25x5x64xi32>) outs(%2 : tensor<?x25x5x64xi32>) {
    ^bb0(%in: i32, %in_179: i32, %out: i32):
      %132 = arith.addi %in, %in_179 : i32
      linalg.yield %132 : i32
    } -> tensor<?x25x5x64xi32>
    %c0_24 = arith.constant 0 : index
    %dim_25 = tensor.dim %4, %c0_24 : tensor<?x25x5x64xi32>
    %cst_26 = arith.constant dense<[1359514674, 1510897544, 1926649374, 1084580191, 1833203381, 1598446167, 1627679308, 1382312008, 1075542397, 1103690228, 1943762883, 1106996425, 1152722049, 1245202516, 1402695826, 1573799777, 1613521674, 1298743846, 1621288420, 1098453574, 1836254561, 1961975843, 1733989666, 1923153043, 1657760567, 1486396369, 1935422644, 1649163646, 2062717049, 1103484170, 1211514054, 1955102371, 1415290081, 1113330866, 1577332471, 1377337383, 1312594413, 1821197710, 1295475795, 1674991602, 1563913152, 1204217771, 1095865610, 2064778105, 1211410907, 1243172833, 1358168642, 2147314432, 1520073423, 1591120175, 1505197082, 2051158788, 2068548467, 1677282482, 1584536658, 1837833626, 1684233315, 1285042891, 1639420454, 1724598460, 1253095821, 2006205585, 1857196660, 1683081220]> : tensor<64xi32>
    %cst_27 = arith.constant dense<[37, 38, 39, 38, 39, 38, 37, 38, 38, 39, 38, 38, 37, 38, 38, 39, 37, 39, 39, 38, 39, 38, 39, 37, 39, 38, 39, 38, 38, 37, 38, 38, 38, 38, 38, 38, 37, 39, 39, 39, 39, 38, 38, 37, 37, 37, 38, 39, 38, 37, 38, 38, 38, 39, 38, 37, 39, 38, 38, 39, 38, 39, 38, 39]> : tensor<64xi8>
    %5 = tensor.empty(%dim_25) : tensor<?x25x5x64xi8>
    %6 = linalg.generic {indexing_maps = [#map1, #map, #map, #map1], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4, %cst_26, %cst_27 : tensor<?x25x5x64xi32>, tensor<64xi32>, tensor<64xi8>) outs(%5 : tensor<?x25x5x64xi8>) {
    ^bb0(%in: i32, %in_179: i32, %in_180: i8, %out: i8):
      %c0_i32_181 = arith.constant 0 : i32
      %c-128_i32_182 = arith.constant -128 : i32
      %132 = arith.subi %in, %c0_i32_181 : i32
      %133 = tosa.apply_scale %132, %in_179, %in_180 {double_round = true} : (i32, i32, i8) -> i32
      %134 = arith.addi %133, %c-128_i32_182 : i32
      %c-128_i32_183 = arith.constant -128 : i32
      %c127_i32 = arith.constant 127 : i32
      %135 = arith.cmpi slt, %134, %c-128_i32_183 : i32
      %136 = arith.select %135, %c-128_i32_183, %134 : i32
      %137 = arith.cmpi slt, %c127_i32, %134 : i32
      %138 = arith.select %137, %c127_i32, %136 : i32
      %139 = arith.trunci %138 : i32 to i8
      linalg.yield %139 : i8
    } -> tensor<?x25x5x64xi8>
    %c0_28 = arith.constant 0 : index
    %dim_29 = tensor.dim %6, %c0_28 : tensor<?x25x5x64xi8>
    %7 = tensor.empty(%dim_29) : tensor<?x25x5x64xi8>
    %8 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%6 : tensor<?x25x5x64xi8>) outs(%7 : tensor<?x25x5x64xi8>) {
    ^bb0(%in: i8, %out: i8):
      %c-128_i8_179 = arith.constant -128 : i8
      %c127_i8 = arith.constant 127 : i8
      %132 = arith.cmpi slt, %in, %c-128_i8_179 : i8
      %133 = arith.select %132, %c-128_i8_179, %in : i8
      %134 = arith.cmpi slt, %c127_i8, %in : i8
      %135 = arith.select %134, %c127_i8, %133 : i8
      linalg.yield %135 : i8
    } -> tensor<?x25x5x64xi8>
    %c0_30 = arith.constant 0 : index
    %dim_31 = tensor.dim %8, %c0_30 : tensor<?x25x5x64xi8>
    %c-128_i8 = arith.constant -128 : i8
    %padded_32 = tensor.pad %8 low[0, 1, 1, 0] high[0, 1, 1, 0] {
    ^bb0(%arg1: index, %arg2: index, %arg3: index, %arg4: index):
      tensor.yield %c-128_i8 : i8
    } : tensor<?x25x5x64xi8> to tensor<?x27x7x64xi8>
    %9 = tensor.empty(%dim_31) : tensor<?x25x5x64x1xi32>
    %c0_i32_33 = arith.constant 0 : i32
    %10 = linalg.fill ins(%c0_i32_33 : i32) outs(%9 : tensor<?x25x5x64x1xi32>) -> tensor<?x25x5x64x1xi32>
    %11 = tensor.empty(%dim_31) : tensor<?x25x5x64xi32>
    %c-128_i32 = arith.constant -128 : i32
    %c0_i32_34 = arith.constant 0 : i32
    %12 = linalg.depthwise_conv_2d_nhwc_hwcm_q {dilations = dense<1> : tensor<2xi64>, strides = dense<1> : tensor<2xi64>} ins(%padded_32, %cst_2, %c-128_i32, %c0_i32_34 : tensor<?x27x7x64xi8>, tensor<3x3x64x1xi8>, i32, i32) outs(%10 : tensor<?x25x5x64x1xi32>) -> tensor<?x25x5x64x1xi32>
    %collapsed = tensor.collapse_shape %12 [[0], [1], [2], [3, 4]] : tensor<?x25x5x64x1xi32> into tensor<?x25x5x64xi32>
    %13 = linalg.generic {indexing_maps = [#map, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%cst_20, %collapsed : tensor<64xi32>, tensor<?x25x5x64xi32>) outs(%11 : tensor<?x25x5x64xi32>) {
    ^bb0(%in: i32, %in_179: i32, %out: i32):
      %132 = arith.addi %in, %in_179 : i32
      linalg.yield %132 : i32
    } -> tensor<?x25x5x64xi32>
    %c0_35 = arith.constant 0 : index
    %dim_36 = tensor.dim %13, %c0_35 : tensor<?x25x5x64xi32>
    %cst_37 = arith.constant dense<[1117272080, 1351620567, 1208841889, 1680313023, 1480831180, 1867036575, 1274068427, 1551573551, 1294969724, 1383317958, 1236810790, 1458694841, 1431041453, 1527668729, 1972269723, 1085649278, 1145655177, 1883008410, 1699922209, 1787116075, 2034358525, 1870523896, 1303360346, 1162227620, 1943854503, 1401822542, 1203348201, 1837357352, 1599269182, 1757899597, 1081471549, 1540510979, 1264653146, 1386686886, 1200409896, 1368802621, 1087238284, 1193358838, 1651991982, 1445986925, 1245546981, 1617319173, 2142376177, 1394652726, 2095469635, 1151724771, 2022842212, 1433810868, 1078765408, 1334169966, 1343470626, 1463716779, 1467283313, 1962296422, 1729111065, 1720207323, 1596415686, 1989330707, 1124519040, 1702538309, 1312306067, 1708501555, 1537057119, 1801960675]> : tensor<64xi32>
    %cst_38 = arith.constant dense<[37, 38, 37, 37, 37, 37, 37, 38, 37, 38, 37, 37, 37, 37, 38, 37, 37, 37, 37, 37, 37, 38, 36, 37, 37, 38, 37, 37, 37, 37, 37, 38, 37, 37, 37, 37, 37, 38, 37, 37, 36, 37, 37, 37, 38, 37, 38, 38, 36, 37, 37, 36, 37, 38, 38, 38, 37, 38, 36, 37, 37, 38, 37, 37]> : tensor<64xi8>
    %14 = tensor.empty(%dim_36) : tensor<?x25x5x64xi8>
    %15 = linalg.generic {indexing_maps = [#map1, #map, #map, #map1], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%13, %cst_37, %cst_38 : tensor<?x25x5x64xi32>, tensor<64xi32>, tensor<64xi8>) outs(%14 : tensor<?x25x5x64xi8>) {
    ^bb0(%in: i32, %in_179: i32, %in_180: i8, %out: i8):
      %c0_i32_181 = arith.constant 0 : i32
      %c-128_i32_182 = arith.constant -128 : i32
      %132 = arith.subi %in, %c0_i32_181 : i32
      %133 = tosa.apply_scale %132, %in_179, %in_180 {double_round = true} : (i32, i32, i8) -> i32
      %134 = arith.addi %133, %c-128_i32_182 : i32
      %c-128_i32_183 = arith.constant -128 : i32
      %c127_i32 = arith.constant 127 : i32
      %135 = arith.cmpi slt, %134, %c-128_i32_183 : i32
      %136 = arith.select %135, %c-128_i32_183, %134 : i32
      %137 = arith.cmpi slt, %c127_i32, %134 : i32
      %138 = arith.select %137, %c127_i32, %136 : i32
      %139 = arith.trunci %138 : i32 to i8
      linalg.yield %139 : i8
    } -> tensor<?x25x5x64xi8>
    %c0_39 = arith.constant 0 : index
    %dim_40 = tensor.dim %15, %c0_39 : tensor<?x25x5x64xi8>
    %16 = tensor.empty(%dim_40) : tensor<?x25x5x64xi8>
    %17 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%15 : tensor<?x25x5x64xi8>) outs(%16 : tensor<?x25x5x64xi8>) {
    ^bb0(%in: i8, %out: i8):
      %c-128_i8_179 = arith.constant -128 : i8
      %c127_i8 = arith.constant 127 : i8
      %132 = arith.cmpi slt, %in, %c-128_i8_179 : i8
      %133 = arith.select %132, %c-128_i8_179, %in : i8
      %134 = arith.cmpi slt, %c127_i8, %in : i8
      %135 = arith.select %134, %c127_i8, %133 : i8
      linalg.yield %135 : i8
    } -> tensor<?x25x5x64xi8>
    %c0_41 = arith.constant 0 : index
    %dim_42 = tensor.dim %17, %c0_41 : tensor<?x25x5x64xi8>
    %18 = tensor.empty(%dim_42) : tensor<?x25x5x64xi32>
    %c0_i32_43 = arith.constant 0 : i32
    %19 = linalg.fill ins(%c0_i32_43 : i32) outs(%18 : tensor<?x25x5x64xi32>) -> tensor<?x25x5x64xi32>
    %20 = tensor.empty(%dim_42) : tensor<?x25x5x64xi32>
    %c-128_i32_44 = arith.constant -128 : i32
    %c0_i32_45 = arith.constant 0 : i32
    %21 = linalg.conv_2d_nhwc_fhwc_q {dilations = dense<1> : tensor<2xi64>, strides = dense<1> : tensor<2xi64>} ins(%17, %cst_19, %c-128_i32_44, %c0_i32_45 : tensor<?x25x5x64xi8>, tensor<64x1x1x64xi8>, i32, i32) outs(%19 : tensor<?x25x5x64xi32>) -> tensor<?x25x5x64xi32>
    %22 = linalg.generic {indexing_maps = [#map, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%cst_18, %21 : tensor<64xi32>, tensor<?x25x5x64xi32>) outs(%20 : tensor<?x25x5x64xi32>) {
    ^bb0(%in: i32, %in_179: i32, %out: i32):
      %132 = arith.addi %in, %in_179 : i32
      linalg.yield %132 : i32
    } -> tensor<?x25x5x64xi32>
    %c0_46 = arith.constant 0 : index
    %dim_47 = tensor.dim %22, %c0_46 : tensor<?x25x5x64xi32>
    %cst_48 = arith.constant dense<[1753010496, 1400798191, 1134457379, 1758672353, 1403607575, 1820785010, 1513526197, 1246474055, 1155777242, 1479158775, 1270449839, 1121960977, 1578196323, 1171900227, 1238656486, 2129490323, 1859006295, 1150855943, 1406136170, 1096281921, 1179667643, 1135417887, 1793992513, 1262616200, 2106404761, 1285768604, 1828269871, 1969992531, 2095390798, 1276555571, 1406488921, 1388277772, 1109336278, 2041424002, 1524387405, 1247844619, 1254068671, 1466156336, 1436942880, 1083956729, 1563114285, 1409961159, 1165600769, 1500316611, 1312999944, 1194430041, 1485904580, 1348061566, 1742367209, 1178477383, 1161423647, 2135868985, 2020513224, 1409196056, 1424482857, 1335577791, 1530524306, 1106321337, 1074189536, 1740004173, 1291847582, 1929897381, 1205240477, 1231837482]> : tensor<64xi32>
    %cst_49 = arith.constant dense<[39, 38, 38, 39, 38, 39, 39, 38, 38, 38, 38, 38, 38, 38, 38, 39, 39, 38, 38, 38, 38, 38, 38, 38, 39, 38, 39, 39, 39, 38, 38, 38, 38, 39, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 39, 38, 39, 38, 38, 39, 39, 38, 38, 38, 39, 38, 38, 39, 38, 39, 38, 38]> : tensor<64xi8>
    %23 = tensor.empty(%dim_47) : tensor<?x25x5x64xi8>
    %24 = linalg.generic {indexing_maps = [#map1, #map, #map, #map1], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%22, %cst_48, %cst_49 : tensor<?x25x5x64xi32>, tensor<64xi32>, tensor<64xi8>) outs(%23 : tensor<?x25x5x64xi8>) {
    ^bb0(%in: i32, %in_179: i32, %in_180: i8, %out: i8):
      %c0_i32_181 = arith.constant 0 : i32
      %c-128_i32_182 = arith.constant -128 : i32
      %132 = arith.subi %in, %c0_i32_181 : i32
      %133 = tosa.apply_scale %132, %in_179, %in_180 {double_round = true} : (i32, i32, i8) -> i32
      %134 = arith.addi %133, %c-128_i32_182 : i32
      %c-128_i32_183 = arith.constant -128 : i32
      %c127_i32 = arith.constant 127 : i32
      %135 = arith.cmpi slt, %134, %c-128_i32_183 : i32
      %136 = arith.select %135, %c-128_i32_183, %134 : i32
      %137 = arith.cmpi slt, %c127_i32, %134 : i32
      %138 = arith.select %137, %c127_i32, %136 : i32
      %139 = arith.trunci %138 : i32 to i8
      linalg.yield %139 : i8
    } -> tensor<?x25x5x64xi8>
    %c0_50 = arith.constant 0 : index
    %dim_51 = tensor.dim %24, %c0_50 : tensor<?x25x5x64xi8>
    %25 = tensor.empty(%dim_51) : tensor<?x25x5x64xi8>
    %26 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%24 : tensor<?x25x5x64xi8>) outs(%25 : tensor<?x25x5x64xi8>) {
    ^bb0(%in: i8, %out: i8):
      %c-128_i8_179 = arith.constant -128 : i8
      %c127_i8 = arith.constant 127 : i8
      %132 = arith.cmpi slt, %in, %c-128_i8_179 : i8
      %133 = arith.select %132, %c-128_i8_179, %in : i8
      %134 = arith.cmpi slt, %c127_i8, %in : i8
      %135 = arith.select %134, %c127_i8, %133 : i8
      linalg.yield %135 : i8
    } -> tensor<?x25x5x64xi8>
    %c0_52 = arith.constant 0 : index
    %dim_53 = tensor.dim %26, %c0_52 : tensor<?x25x5x64xi8>
    %c-128_i8_54 = arith.constant -128 : i8
    %padded_55 = tensor.pad %26 low[0, 1, 1, 0] high[0, 1, 1, 0] {
    ^bb0(%arg1: index, %arg2: index, %arg3: index, %arg4: index):
      tensor.yield %c-128_i8_54 : i8
    } : tensor<?x25x5x64xi8> to tensor<?x27x7x64xi8>
    %27 = tensor.empty(%dim_53) : tensor<?x25x5x64x1xi32>
    %c0_i32_56 = arith.constant 0 : i32
    %28 = linalg.fill ins(%c0_i32_56 : i32) outs(%27 : tensor<?x25x5x64x1xi32>) -> tensor<?x25x5x64x1xi32>
    %29 = tensor.empty(%dim_53) : tensor<?x25x5x64xi32>
    %c-128_i32_57 = arith.constant -128 : i32
    %c0_i32_58 = arith.constant 0 : i32
    %30 = linalg.depthwise_conv_2d_nhwc_hwcm_q {dilations = dense<1> : tensor<2xi64>, strides = dense<1> : tensor<2xi64>} ins(%padded_55, %cst_1, %c-128_i32_57, %c0_i32_58 : tensor<?x27x7x64xi8>, tensor<3x3x64x1xi8>, i32, i32) outs(%28 : tensor<?x25x5x64x1xi32>) -> tensor<?x25x5x64x1xi32>
    %collapsed_59 = tensor.collapse_shape %30 [[0], [1], [2], [3, 4]] : tensor<?x25x5x64x1xi32> into tensor<?x25x5x64xi32>
    %31 = linalg.generic {indexing_maps = [#map, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%cst_17, %collapsed_59 : tensor<64xi32>, tensor<?x25x5x64xi32>) outs(%29 : tensor<?x25x5x64xi32>) {
    ^bb0(%in: i32, %in_179: i32, %out: i32):
      %132 = arith.addi %in, %in_179 : i32
      linalg.yield %132 : i32
    } -> tensor<?x25x5x64xi32>
    %c0_60 = arith.constant 0 : index
    %dim_61 = tensor.dim %31, %c0_60 : tensor<?x25x5x64xi32>
    %cst_62 = arith.constant dense<[1714133752, 1698805621, 1693693347, 1216969937, 1735814305, 1879620052, 1554176332, 1477316785, 1624124963, 1738267546, 1951688197, 1963805900, 1856832425, 1796474680, 1162897160, 1139020700, 2040819946, 2076564242, 1735670948, 1418463255, 1231094892, 1214681724, 1867559032, 1754692957, 2044652774, 1231630617, 2044833104, 1525740462, 1851553165, 1106654797, 1428586437, 1724402251, 1087753987, 1823558753, 1714680984, 1468675047, 1284410604, 1423009689, 2053024691, 1324499214, 1147243383, 1361934788, 2122974424, 1098402732, 1640228278, 1203990620, 1420131027, 1685960602, 1863302374, 1544851228, 1476837620, 1731253058, 1080317016, 1798928655, 1508177126, 1882108061, 1282398210, 1240758620, 1290956455, 1958000465, 1951353125, 1928126488, 1748347635, 1966609638]> : tensor<64xi32>
    %cst_63 = arith.constant dense<[38, 38, 37, 37, 38, 37, 38, 38, 37, 38, 38, 38, 38, 38, 37, 37, 38, 38, 38, 38, 38, 36, 38, 38, 38, 37, 38, 38, 38, 37, 38, 38, 36, 38, 38, 37, 38, 38, 38, 38, 37, 37, 38, 38, 38, 37, 37, 38, 38, 38, 37, 37, 37, 38, 38, 38, 37, 37, 37, 38, 38, 38, 38, 38]> : tensor<64xi8>
    %32 = tensor.empty(%dim_61) : tensor<?x25x5x64xi8>
    %33 = linalg.generic {indexing_maps = [#map1, #map, #map, #map1], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%31, %cst_62, %cst_63 : tensor<?x25x5x64xi32>, tensor<64xi32>, tensor<64xi8>) outs(%32 : tensor<?x25x5x64xi8>) {
    ^bb0(%in: i32, %in_179: i32, %in_180: i8, %out: i8):
      %c0_i32_181 = arith.constant 0 : i32
      %c-128_i32_182 = arith.constant -128 : i32
      %132 = arith.subi %in, %c0_i32_181 : i32
      %133 = tosa.apply_scale %132, %in_179, %in_180 {double_round = true} : (i32, i32, i8) -> i32
      %134 = arith.addi %133, %c-128_i32_182 : i32
      %c-128_i32_183 = arith.constant -128 : i32
      %c127_i32 = arith.constant 127 : i32
      %135 = arith.cmpi slt, %134, %c-128_i32_183 : i32
      %136 = arith.select %135, %c-128_i32_183, %134 : i32
      %137 = arith.cmpi slt, %c127_i32, %134 : i32
      %138 = arith.select %137, %c127_i32, %136 : i32
      %139 = arith.trunci %138 : i32 to i8
      linalg.yield %139 : i8
    } -> tensor<?x25x5x64xi8>
    %c0_64 = arith.constant 0 : index
    %dim_65 = tensor.dim %33, %c0_64 : tensor<?x25x5x64xi8>
    %34 = tensor.empty(%dim_65) : tensor<?x25x5x64xi8>
    %35 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%33 : tensor<?x25x5x64xi8>) outs(%34 : tensor<?x25x5x64xi8>) {
    ^bb0(%in: i8, %out: i8):
      %c-128_i8_179 = arith.constant -128 : i8
      %c127_i8 = arith.constant 127 : i8
      %132 = arith.cmpi slt, %in, %c-128_i8_179 : i8
      %133 = arith.select %132, %c-128_i8_179, %in : i8
      %134 = arith.cmpi slt, %c127_i8, %in : i8
      %135 = arith.select %134, %c127_i8, %133 : i8
      linalg.yield %135 : i8
    } -> tensor<?x25x5x64xi8>
    %c0_66 = arith.constant 0 : index
    %dim_67 = tensor.dim %35, %c0_66 : tensor<?x25x5x64xi8>
    %36 = tensor.empty(%dim_67) : tensor<?x25x5x64xi32>
    %c0_i32_68 = arith.constant 0 : i32
    %37 = linalg.fill ins(%c0_i32_68 : i32) outs(%36 : tensor<?x25x5x64xi32>) -> tensor<?x25x5x64xi32>
    %38 = tensor.empty(%dim_67) : tensor<?x25x5x64xi32>
    %c-128_i32_69 = arith.constant -128 : i32
    %c0_i32_70 = arith.constant 0 : i32
    %39 = linalg.conv_2d_nhwc_fhwc_q {dilations = dense<1> : tensor<2xi64>, strides = dense<1> : tensor<2xi64>} ins(%35, %cst_16, %c-128_i32_69, %c0_i32_70 : tensor<?x25x5x64xi8>, tensor<64x1x1x64xi8>, i32, i32) outs(%37 : tensor<?x25x5x64xi32>) -> tensor<?x25x5x64xi32>
    %40 = linalg.generic {indexing_maps = [#map, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%cst_15, %39 : tensor<64xi32>, tensor<?x25x5x64xi32>) outs(%38 : tensor<?x25x5x64xi32>) {
    ^bb0(%in: i32, %in_179: i32, %out: i32):
      %132 = arith.addi %in, %in_179 : i32
      linalg.yield %132 : i32
    } -> tensor<?x25x5x64xi32>
    %c0_71 = arith.constant 0 : index
    %dim_72 = tensor.dim %40, %c0_71 : tensor<?x25x5x64xi32>
    %cst_73 = arith.constant dense<[1352513846, 1489513224, 1379458316, 1477987624, 1639906495, 1084564680, 1893259625, 1414921633, 1590248680, 1261327875, 2121746637, 1291550477, 1193854958, 1700510853, 1354542153, 1237655415, 1859562043, 2134661778, 1759378903, 2015455487, 2043579655, 1092662229, 1222915475, 1160175847, 1712718927, 1552760599, 1404169791, 1451816696, 1314090277, 1296517021, 1331039802, 1615117376, 1911710593, 1654589195, 1629185796, 1805117887, 1298266647, 1400135407, 1504218799, 1616550840, 1442929496, 1696869415, 1680909935, 1306538278, 1796114167, 1514469122, 1469406920, 1610711739, 1131109424, 1317781222, 1385498455, 1427648409, 1611025645, 1803660582, 1284534792, 1560836992, 1385906544, 1243604164, 1528928555, 1754894440, 1454913766, 1612589482, 1349712104, 1345755257]> : tensor<64xi32>
    %cst_74 = arith.constant dense<[38, 38, 38, 38, 38, 37, 38, 38, 38, 38, 38, 38, 38, 38, 37, 38, 38, 39, 38, 39, 38, 38, 38, 37, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38]> : tensor<64xi8>
    %41 = tensor.empty(%dim_72) : tensor<?x25x5x64xi8>
    %42 = linalg.generic {indexing_maps = [#map1, #map, #map, #map1], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%40, %cst_73, %cst_74 : tensor<?x25x5x64xi32>, tensor<64xi32>, tensor<64xi8>) outs(%41 : tensor<?x25x5x64xi8>) {
    ^bb0(%in: i32, %in_179: i32, %in_180: i8, %out: i8):
      %c0_i32_181 = arith.constant 0 : i32
      %c-128_i32_182 = arith.constant -128 : i32
      %132 = arith.subi %in, %c0_i32_181 : i32
      %133 = tosa.apply_scale %132, %in_179, %in_180 {double_round = true} : (i32, i32, i8) -> i32
      %134 = arith.addi %133, %c-128_i32_182 : i32
      %c-128_i32_183 = arith.constant -128 : i32
      %c127_i32 = arith.constant 127 : i32
      %135 = arith.cmpi slt, %134, %c-128_i32_183 : i32
      %136 = arith.select %135, %c-128_i32_183, %134 : i32
      %137 = arith.cmpi slt, %c127_i32, %134 : i32
      %138 = arith.select %137, %c127_i32, %136 : i32
      %139 = arith.trunci %138 : i32 to i8
      linalg.yield %139 : i8
    } -> tensor<?x25x5x64xi8>
    %c0_75 = arith.constant 0 : index
    %dim_76 = tensor.dim %42, %c0_75 : tensor<?x25x5x64xi8>
    %43 = tensor.empty(%dim_76) : tensor<?x25x5x64xi8>
    %44 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%42 : tensor<?x25x5x64xi8>) outs(%43 : tensor<?x25x5x64xi8>) {
    ^bb0(%in: i8, %out: i8):
      %c-128_i8_179 = arith.constant -128 : i8
      %c127_i8 = arith.constant 127 : i8
      %132 = arith.cmpi slt, %in, %c-128_i8_179 : i8
      %133 = arith.select %132, %c-128_i8_179, %in : i8
      %134 = arith.cmpi slt, %c127_i8, %in : i8
      %135 = arith.select %134, %c127_i8, %133 : i8
      linalg.yield %135 : i8
    } -> tensor<?x25x5x64xi8>
    %c0_77 = arith.constant 0 : index
    %dim_78 = tensor.dim %44, %c0_77 : tensor<?x25x5x64xi8>
    %c-128_i8_79 = arith.constant -128 : i8
    %padded_80 = tensor.pad %44 low[0, 1, 1, 0] high[0, 1, 1, 0] {
    ^bb0(%arg1: index, %arg2: index, %arg3: index, %arg4: index):
      tensor.yield %c-128_i8_79 : i8
    } : tensor<?x25x5x64xi8> to tensor<?x27x7x64xi8>
    %45 = tensor.empty(%dim_78) : tensor<?x25x5x64x1xi32>
    %c0_i32_81 = arith.constant 0 : i32
    %46 = linalg.fill ins(%c0_i32_81 : i32) outs(%45 : tensor<?x25x5x64x1xi32>) -> tensor<?x25x5x64x1xi32>
    %47 = tensor.empty(%dim_78) : tensor<?x25x5x64xi32>
    %c-128_i32_82 = arith.constant -128 : i32
    %c0_i32_83 = arith.constant 0 : i32
    %48 = linalg.depthwise_conv_2d_nhwc_hwcm_q {dilations = dense<1> : tensor<2xi64>, strides = dense<1> : tensor<2xi64>} ins(%padded_80, %cst_0, %c-128_i32_82, %c0_i32_83 : tensor<?x27x7x64xi8>, tensor<3x3x64x1xi8>, i32, i32) outs(%46 : tensor<?x25x5x64x1xi32>) -> tensor<?x25x5x64x1xi32>
    %collapsed_84 = tensor.collapse_shape %48 [[0], [1], [2], [3, 4]] : tensor<?x25x5x64x1xi32> into tensor<?x25x5x64xi32>
    %49 = linalg.generic {indexing_maps = [#map, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%cst_14, %collapsed_84 : tensor<64xi32>, tensor<?x25x5x64xi32>) outs(%47 : tensor<?x25x5x64xi32>) {
    ^bb0(%in: i32, %in_179: i32, %out: i32):
      %132 = arith.addi %in, %in_179 : i32
      linalg.yield %132 : i32
    } -> tensor<?x25x5x64xi32>
    %c0_85 = arith.constant 0 : index
    %dim_86 = tensor.dim %49, %c0_85 : tensor<?x25x5x64xi32>
    %cst_87 = arith.constant dense<[1175859562, 1325308050, 1807069200, 1420124271, 1188850090, 1182411826, 1831798253, 1649441596, 1897229520, 1960284024, 1088449917, 1672116795, 1343192385, 1487293887, 1672031270, 1674544455, 2061041943, 1951124498, 1660944822, 1092926841, 1362949302, 1686277765, 1889942367, 2094598643, 1884567220, 2137666356, 1554431692, 1602323645, 1300969388, 1742212516, 2087562224, 1697886333, 1743893709, 1139931211, 1408896915, 2007149259, 2008015774, 2115739605, 1364939324, 1669828999, 1224912049, 1117851976, 1283481598, 1789833187, 1167721435, 1534981936, 1382726870, 1907838383, 1372677674, 1120008250, 1414728578, 1400938390, 2122221780, 1317835141, 2026088264, 1627366011, 1688802527, 1657532372, 1082442094, 1658124163, 1837593306, 1539460112, 1223606748, 1717328997]> : tensor<64xi32>
    %cst_88 = arith.constant dense<[37, 38, 38, 38, 38, 37, 39, 38, 39, 38, 37, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 39, 38, 39, 39, 38, 38, 37, 38, 39, 38, 38, 38, 38, 39, 38, 38, 38, 39, 38, 38, 38, 39, 38, 38, 38, 38, 38, 37, 38, 37, 39, 38, 38, 38, 38, 38, 38, 38, 38, 38, 37, 38]> : tensor<64xi8>
    %50 = tensor.empty(%dim_86) : tensor<?x25x5x64xi8>
    %51 = linalg.generic {indexing_maps = [#map1, #map, #map, #map1], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%49, %cst_87, %cst_88 : tensor<?x25x5x64xi32>, tensor<64xi32>, tensor<64xi8>) outs(%50 : tensor<?x25x5x64xi8>) {
    ^bb0(%in: i32, %in_179: i32, %in_180: i8, %out: i8):
      %c0_i32_181 = arith.constant 0 : i32
      %c-128_i32_182 = arith.constant -128 : i32
      %132 = arith.subi %in, %c0_i32_181 : i32
      %133 = tosa.apply_scale %132, %in_179, %in_180 {double_round = true} : (i32, i32, i8) -> i32
      %134 = arith.addi %133, %c-128_i32_182 : i32
      %c-128_i32_183 = arith.constant -128 : i32
      %c127_i32 = arith.constant 127 : i32
      %135 = arith.cmpi slt, %134, %c-128_i32_183 : i32
      %136 = arith.select %135, %c-128_i32_183, %134 : i32
      %137 = arith.cmpi slt, %c127_i32, %134 : i32
      %138 = arith.select %137, %c127_i32, %136 : i32
      %139 = arith.trunci %138 : i32 to i8
      linalg.yield %139 : i8
    } -> tensor<?x25x5x64xi8>
    %c0_89 = arith.constant 0 : index
    %dim_90 = tensor.dim %51, %c0_89 : tensor<?x25x5x64xi8>
    %52 = tensor.empty(%dim_90) : tensor<?x25x5x64xi8>
    %53 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%51 : tensor<?x25x5x64xi8>) outs(%52 : tensor<?x25x5x64xi8>) {
    ^bb0(%in: i8, %out: i8):
      %c-128_i8_179 = arith.constant -128 : i8
      %c127_i8 = arith.constant 127 : i8
      %132 = arith.cmpi slt, %in, %c-128_i8_179 : i8
      %133 = arith.select %132, %c-128_i8_179, %in : i8
      %134 = arith.cmpi slt, %c127_i8, %in : i8
      %135 = arith.select %134, %c127_i8, %133 : i8
      linalg.yield %135 : i8
    } -> tensor<?x25x5x64xi8>
    %c0_91 = arith.constant 0 : index
    %dim_92 = tensor.dim %53, %c0_91 : tensor<?x25x5x64xi8>
    %54 = tensor.empty(%dim_92) : tensor<?x25x5x64xi32>
    %c0_i32_93 = arith.constant 0 : i32
    %55 = linalg.fill ins(%c0_i32_93 : i32) outs(%54 : tensor<?x25x5x64xi32>) -> tensor<?x25x5x64xi32>
    %56 = tensor.empty(%dim_92) : tensor<?x25x5x64xi32>
    %c-128_i32_94 = arith.constant -128 : i32
    %c0_i32_95 = arith.constant 0 : i32
    %57 = linalg.conv_2d_nhwc_fhwc_q {dilations = dense<1> : tensor<2xi64>, strides = dense<1> : tensor<2xi64>} ins(%53, %cst_13, %c-128_i32_94, %c0_i32_95 : tensor<?x25x5x64xi8>, tensor<64x1x1x64xi8>, i32, i32) outs(%55 : tensor<?x25x5x64xi32>) -> tensor<?x25x5x64xi32>
    %58 = linalg.generic {indexing_maps = [#map, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%cst_12, %57 : tensor<64xi32>, tensor<?x25x5x64xi32>) outs(%56 : tensor<?x25x5x64xi32>) {
    ^bb0(%in: i32, %in_179: i32, %out: i32):
      %132 = arith.addi %in, %in_179 : i32
      linalg.yield %132 : i32
    } -> tensor<?x25x5x64xi32>
    %c0_96 = arith.constant 0 : index
    %dim_97 = tensor.dim %58, %c0_96 : tensor<?x25x5x64xi32>
    %cst_98 = arith.constant dense<[1297315277, 1468492804, 1365389636, 1663912971, 1704283098, 1164680631, 1425183295, 1308370971, 1174422468, 1814191572, 1255544155, 1354838867, 1430538958, 1276332331, 1133893032, 1279299779, 2043925795, 1886366899, 1696393543, 2119679879, 1109649323, 1439202161, 1530326033, 1780452920, 1474144276, 1348916801, 2127510807, 2145988373, 1426113936, 1541155860, 2080786304, 1606089206, 1100905575, 1121256541, 2035983137, 1855576717, 1170383424, 2131232836, 1324947161, 1291685634, 1182123667, 1225577160, 1186540670, 1241111246, 1696464823, 1385422073, 1916933799, 1455092911, 1708877586, 1446115277, 1186109251, 1075221221, 1187914401, 1355229746, 1352046499, 1192666862, 1950388404, 1528773212, 1278521587, 1628880777, 1189265768, 1137548772, 1693155501, 1237104188]> : tensor<64xi32>
    %cst_99 = arith.constant dense<[38, 39, 38, 38, 38, 38, 38, 38, 38, 39, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 38, 38, 38, 39, 38, 39, 39, 39, 38, 38, 39, 38, 38, 38, 39, 39, 38, 39, 38, 38, 38, 38, 38, 38, 38, 38, 39, 38, 39, 38, 38, 38, 38, 38, 38, 38, 39, 38, 38, 38, 38, 38, 39, 38]> : tensor<64xi8>
    %59 = tensor.empty(%dim_97) : tensor<?x25x5x64xi8>
    %60 = linalg.generic {indexing_maps = [#map1, #map, #map, #map1], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%58, %cst_98, %cst_99 : tensor<?x25x5x64xi32>, tensor<64xi32>, tensor<64xi8>) outs(%59 : tensor<?x25x5x64xi8>) {
    ^bb0(%in: i32, %in_179: i32, %in_180: i8, %out: i8):
      %c0_i32_181 = arith.constant 0 : i32
      %c-128_i32_182 = arith.constant -128 : i32
      %132 = arith.subi %in, %c0_i32_181 : i32
      %133 = tosa.apply_scale %132, %in_179, %in_180 {double_round = true} : (i32, i32, i8) -> i32
      %134 = arith.addi %133, %c-128_i32_182 : i32
      %c-128_i32_183 = arith.constant -128 : i32
      %c127_i32 = arith.constant 127 : i32
      %135 = arith.cmpi slt, %134, %c-128_i32_183 : i32
      %136 = arith.select %135, %c-128_i32_183, %134 : i32
      %137 = arith.cmpi slt, %c127_i32, %134 : i32
      %138 = arith.select %137, %c127_i32, %136 : i32
      %139 = arith.trunci %138 : i32 to i8
      linalg.yield %139 : i8
    } -> tensor<?x25x5x64xi8>
    %c0_100 = arith.constant 0 : index
    %dim_101 = tensor.dim %60, %c0_100 : tensor<?x25x5x64xi8>
    %61 = tensor.empty(%dim_101) : tensor<?x25x5x64xi8>
    %62 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%60 : tensor<?x25x5x64xi8>) outs(%61 : tensor<?x25x5x64xi8>) {
    ^bb0(%in: i8, %out: i8):
      %c-128_i8_179 = arith.constant -128 : i8
      %c127_i8 = arith.constant 127 : i8
      %132 = arith.cmpi slt, %in, %c-128_i8_179 : i8
      %133 = arith.select %132, %c-128_i8_179, %in : i8
      %134 = arith.cmpi slt, %c127_i8, %in : i8
      %135 = arith.select %134, %c127_i8, %133 : i8
      linalg.yield %135 : i8
    } -> tensor<?x25x5x64xi8>
    %c0_102 = arith.constant 0 : index
    %dim_103 = tensor.dim %62, %c0_102 : tensor<?x25x5x64xi8>
    %c-128_i8_104 = arith.constant -128 : i8
    %padded_105 = tensor.pad %62 low[0, 1, 1, 0] high[0, 1, 1, 0] {
    ^bb0(%arg1: index, %arg2: index, %arg3: index, %arg4: index):
      tensor.yield %c-128_i8_104 : i8
    } : tensor<?x25x5x64xi8> to tensor<?x27x7x64xi8>
    %63 = tensor.empty(%dim_103) : tensor<?x25x5x64x1xi32>
    %c0_i32_106 = arith.constant 0 : i32
    %64 = linalg.fill ins(%c0_i32_106 : i32) outs(%63 : tensor<?x25x5x64x1xi32>) -> tensor<?x25x5x64x1xi32>
    %65 = tensor.empty(%dim_103) : tensor<?x25x5x64xi32>
    %c-128_i32_107 = arith.constant -128 : i32
    %c0_i32_108 = arith.constant 0 : i32
    %66 = linalg.depthwise_conv_2d_nhwc_hwcm_q {dilations = dense<1> : tensor<2xi64>, strides = dense<1> : tensor<2xi64>} ins(%padded_105, %cst, %c-128_i32_107, %c0_i32_108 : tensor<?x27x7x64xi8>, tensor<3x3x64x1xi8>, i32, i32) outs(%64 : tensor<?x25x5x64x1xi32>) -> tensor<?x25x5x64x1xi32>
    %collapsed_109 = tensor.collapse_shape %66 [[0], [1], [2], [3, 4]] : tensor<?x25x5x64x1xi32> into tensor<?x25x5x64xi32>
    %67 = linalg.generic {indexing_maps = [#map, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%cst_11, %collapsed_109 : tensor<64xi32>, tensor<?x25x5x64xi32>) outs(%65 : tensor<?x25x5x64xi32>) {
    ^bb0(%in: i32, %in_179: i32, %out: i32):
      %132 = arith.addi %in, %in_179 : i32
      linalg.yield %132 : i32
    } -> tensor<?x25x5x64xi32>
    %c0_110 = arith.constant 0 : index
    %dim_111 = tensor.dim %67, %c0_110 : tensor<?x25x5x64xi32>
    %cst_112 = arith.constant dense<[1245499324, 2021708468, 1876208089, 1325188464, 1598729909, 1605918323, 1305633077, 2141131275, 1171759477, 1746719341, 2003695361, 1574723363, 2145427927, 1725225812, 1519686186, 2016259725, 2117951231, 1124575500, 2046616471, 1801639759, 1159154122, 1672063802, 1338164997, 1080975729, 1410880862, 1767309430, 1301111827, 1584185150, 1663224188, 1218672369, 1749809845, 1710495465, 1336342172, 1390854296, 1811826604, 1380530602, 1173781765, 2037710910, 1884565532, 2052846670, 1190845216, 1539715364, 1885930421, 1141038130, 1777548167, 1752818546, 1174930344, 1578116035, 1720287347, 1685584038, 1390238789, 1109472714, 1998071659, 1101556990, 1664121682, 1205680881, 1512822462, 1214391303, 1217392797, 1078342080, 1466779135, 1254490022, 1179852051, 1515358182]> : tensor<64xi32>
    %cst_113 = arith.constant dense<[38, 40, 39, 39, 39, 38, 38, 39, 37, 39, 38, 39, 39, 39, 38, 39, 39, 38, 39, 38, 38, 39, 39, 38, 38, 39, 38, 39, 38, 38, 38, 39, 38, 38, 38, 38, 38, 39, 38, 39, 38, 38, 39, 38, 39, 39, 37, 38, 38, 39, 37, 38, 39, 37, 38, 37, 38, 38, 38, 38, 38, 38, 37, 38]> : tensor<64xi8>
    %68 = tensor.empty(%dim_111) : tensor<?x25x5x64xi8>
    %69 = linalg.generic {indexing_maps = [#map1, #map, #map, #map1], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%67, %cst_112, %cst_113 : tensor<?x25x5x64xi32>, tensor<64xi32>, tensor<64xi8>) outs(%68 : tensor<?x25x5x64xi8>) {
    ^bb0(%in: i32, %in_179: i32, %in_180: i8, %out: i8):
      %c0_i32_181 = arith.constant 0 : i32
      %c-128_i32_182 = arith.constant -128 : i32
      %132 = arith.subi %in, %c0_i32_181 : i32
      %133 = tosa.apply_scale %132, %in_179, %in_180 {double_round = true} : (i32, i32, i8) -> i32
      %134 = arith.addi %133, %c-128_i32_182 : i32
      %c-128_i32_183 = arith.constant -128 : i32
      %c127_i32 = arith.constant 127 : i32
      %135 = arith.cmpi slt, %134, %c-128_i32_183 : i32
      %136 = arith.select %135, %c-128_i32_183, %134 : i32
      %137 = arith.cmpi slt, %c127_i32, %134 : i32
      %138 = arith.select %137, %c127_i32, %136 : i32
      %139 = arith.trunci %138 : i32 to i8
      linalg.yield %139 : i8
    } -> tensor<?x25x5x64xi8>
    %c0_114 = arith.constant 0 : index
    %dim_115 = tensor.dim %69, %c0_114 : tensor<?x25x5x64xi8>
    %70 = tensor.empty(%dim_115) : tensor<?x25x5x64xi8>
    %71 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%69 : tensor<?x25x5x64xi8>) outs(%70 : tensor<?x25x5x64xi8>) {
    ^bb0(%in: i8, %out: i8):
      %c-128_i8_179 = arith.constant -128 : i8
      %c127_i8 = arith.constant 127 : i8
      %132 = arith.cmpi slt, %in, %c-128_i8_179 : i8
      %133 = arith.select %132, %c-128_i8_179, %in : i8
      %134 = arith.cmpi slt, %c127_i8, %in : i8
      %135 = arith.select %134, %c127_i8, %133 : i8
      linalg.yield %135 : i8
    } -> tensor<?x25x5x64xi8>
    %c0_116 = arith.constant 0 : index
    %dim_117 = tensor.dim %71, %c0_116 : tensor<?x25x5x64xi8>
    %72 = tensor.empty(%dim_117) : tensor<?x25x5x64xi32>
    %c0_i32_118 = arith.constant 0 : i32
    %73 = linalg.fill ins(%c0_i32_118 : i32) outs(%72 : tensor<?x25x5x64xi32>) -> tensor<?x25x5x64xi32>
    %74 = tensor.empty(%dim_117) : tensor<?x25x5x64xi32>
    %c-128_i32_119 = arith.constant -128 : i32
    %c0_i32_120 = arith.constant 0 : i32
    %75 = linalg.conv_2d_nhwc_fhwc_q {dilations = dense<1> : tensor<2xi64>, strides = dense<1> : tensor<2xi64>} ins(%71, %cst_10, %c-128_i32_119, %c0_i32_120 : tensor<?x25x5x64xi8>, tensor<64x1x1x64xi8>, i32, i32) outs(%73 : tensor<?x25x5x64xi32>) -> tensor<?x25x5x64xi32>
    %76 = linalg.generic {indexing_maps = [#map, #map1, #map1], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%cst_9, %75 : tensor<64xi32>, tensor<?x25x5x64xi32>) outs(%74 : tensor<?x25x5x64xi32>) {
    ^bb0(%in: i32, %in_179: i32, %out: i32):
      %132 = arith.addi %in, %in_179 : i32
      linalg.yield %132 : i32
    } -> tensor<?x25x5x64xi32>
    %c0_121 = arith.constant 0 : index
    %dim_122 = tensor.dim %76, %c0_121 : tensor<?x25x5x64xi32>
    %cst_123 = arith.constant dense<[1288495350, 1272000227, 1133757147, 1325196533, 1544132175, 1576280665, 1250884107, 1416885595, 1257225235, 1398192069, 1182829336, 1322080746, 1344902500, 2033833852, 1719064480, 1135625170, 1170040216, 1353273889, 1554794931, 1202368357, 2132778438, 1528518266, 1492342135, 1710798759, 1149753748, 2079748779, 1262964489, 1636841300, 1329932912, 1678328183, 2045908555, 1181570288, 1473231915, 1208376190, 1989840828, 1382179700, 2082880260, 1915767688, 1245022969, 1320515753, 1168046573, 1200638585, 1970504475, 2076313148, 1433054747, 1128270331, 1241833722, 1370425141, 1955753547, 1321526997, 1258200908, 1358027456, 1304596498, 1414568521, 1282414133, 1231038246, 1459578170, 1460851567, 1551130029, 1218666866, 1131962883, 1482434001, 1846193434, 1482706018]> : tensor<64xi32>
    %cst_124 = arith.constant dense<[38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 39, 38, 38, 38, 38, 38, 38, 39, 38, 38, 38, 38, 39, 38, 39, 38, 38, 39, 38, 38, 38, 39, 38, 38, 39, 38, 38, 38, 38, 39, 39, 38, 38, 38, 38, 39, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 39, 38]> : tensor<64xi8>
    %77 = tensor.empty(%dim_122) : tensor<?x25x5x64xi8>
    %78 = linalg.generic {indexing_maps = [#map1, #map, #map, #map1], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%76, %cst_123, %cst_124 : tensor<?x25x5x64xi32>, tensor<64xi32>, tensor<64xi8>) outs(%77 : tensor<?x25x5x64xi8>) {
    ^bb0(%in: i32, %in_179: i32, %in_180: i8, %out: i8):
      %c0_i32_181 = arith.constant 0 : i32
      %c-128_i32_182 = arith.constant -128 : i32
      %132 = arith.subi %in, %c0_i32_181 : i32
      %133 = tosa.apply_scale %132, %in_179, %in_180 {double_round = true} : (i32, i32, i8) -> i32
      %134 = arith.addi %133, %c-128_i32_182 : i32
      %c-128_i32_183 = arith.constant -128 : i32
      %c127_i32 = arith.constant 127 : i32
      %135 = arith.cmpi slt, %134, %c-128_i32_183 : i32
      %136 = arith.select %135, %c-128_i32_183, %134 : i32
      %137 = arith.cmpi slt, %c127_i32, %134 : i32
      %138 = arith.select %137, %c127_i32, %136 : i32
      %139 = arith.trunci %138 : i32 to i8
      linalg.yield %139 : i8
    } -> tensor<?x25x5x64xi8>
    %c0_125 = arith.constant 0 : index
    %dim_126 = tensor.dim %78, %c0_125 : tensor<?x25x5x64xi8>
    %79 = tensor.empty(%dim_126) : tensor<?x25x5x64xi8>
    %80 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%78 : tensor<?x25x5x64xi8>) outs(%79 : tensor<?x25x5x64xi8>) {
    ^bb0(%in: i8, %out: i8):
      %c-128_i8_179 = arith.constant -128 : i8
      %c127_i8 = arith.constant 127 : i8
      %132 = arith.cmpi slt, %in, %c-128_i8_179 : i8
      %133 = arith.select %132, %c-128_i8_179, %in : i8
      %134 = arith.cmpi slt, %c127_i8, %in : i8
      %135 = arith.select %134, %c127_i8, %133 : i8
      linalg.yield %135 : i8
    } -> tensor<?x25x5x64xi8>
    %c0_127 = arith.constant 0 : index
    %dim_128 = tensor.dim %80, %c0_127 : tensor<?x25x5x64xi8>
    %c0_i32_129 = arith.constant 0 : i32
    %81 = tensor.empty(%dim_128) : tensor<?x1x1x64xi32>
    %82 = linalg.fill ins(%c0_i32_129 : i32) outs(%81 : tensor<?x1x1x64xi32>) -> tensor<?x1x1x64xi32>
    %83 = tensor.empty() : tensor<25x5xi32>
    %84 = linalg.pooling_nhwc_sum {dilations = dense<1> : vector<2xi64>, strides = dense<[25, 5]> : vector<2xi64>} ins(%80, %83 : tensor<?x25x5x64xi8>, tensor<25x5xi32>) outs(%82 : tensor<?x1x1x64xi32>) -> tensor<?x1x1x64xi32>
    %c1 = arith.constant 1 : index
    %c1_130 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c1_131 = arith.constant 1 : index
    %c1_132 = arith.constant 1 : index
    %85 = arith.subi %c1_130, %c1_132 : index
    %86 = arith.subi %c1_131, %c1_132 : index
    %87 = tensor.empty(%dim_128) : tensor<?x1x1x64xi8>
    %88 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%84 : tensor<?x1x1x64xi32>) outs(%87 : tensor<?x1x1x64xi8>) {
    ^bb0(%in: i32, %out: i8):
      %c0_179 = arith.constant 0 : index
      %c25 = arith.constant 25 : index
      %c25_180 = arith.constant 25 : index
      %132 = linalg.index 1 : index
      %133 = arith.subi %85, %132 : index
      %134 = arith.muli %132, %c25 : index
      %135 = arith.muli %133, %c25 : index
      %136 = arith.cmpi slt, %c25_180, %c1_132 : index
      %137 = arith.select %136, %c1_132, %c25_180 : index
      %c5 = arith.constant 5 : index
      %c5_181 = arith.constant 5 : index
      %138 = linalg.index 2 : index
      %139 = arith.subi %86, %138 : index
      %140 = arith.muli %138, %c5 : index
      %141 = arith.muli %139, %c5 : index
      %142 = arith.cmpi slt, %c5_181, %c1_132 : index
      %143 = arith.select %142, %c1_132, %c5_181 : index
      %144 = arith.muli %137, %143 : index
      %145 = arith.index_cast %144 : index to i32
      %c0_i32_182 = arith.constant 0 : i32
      %146 = arith.muli %145, %c0_i32_182 : i32
      %147 = arith.subi %in, %146 : i32
      %c1_i32 = arith.constant 1 : i32
      %c32_i32 = arith.constant 32 : i32
      %148 = arith.subi %145, %c1_i32 : i32
      %149 = math.ctlz %148 : i32
      %150 = arith.subi %c32_i32, %149 : i32
      %151 = arith.extui %150 : i32 to i64
      %c1073741825_i64 = arith.constant 1073741825 : i64
      %152 = arith.shli %c1073741825_i64, %151 : i64
      %153 = arith.extui %145 : i32 to i64
      %154 = arith.divui %152, %153 : i64
      %155 = arith.trunci %154 : i64 to i32
      %156 = arith.trunci %150 : i32 to i8
      %c30_i8 = arith.constant 30 : i8
      %157 = arith.addi %156, %c30_i8 : i8
      %158 = tosa.apply_scale %147, %155, %157 {double_round = false} : (i32, i32, i8) -> i32
      %c0_i32_183 = arith.constant 0 : i32
      %159 = arith.addi %158, %c0_i32_183 : i32
      %c-128_i32_184 = arith.constant -128 : i32
      %c127_i32 = arith.constant 127 : i32
      %160 = arith.cmpi slt, %159, %c-128_i32_184 : i32
      %161 = arith.select %160, %c-128_i32_184, %159 : i32
      %162 = arith.cmpi slt, %c127_i32, %159 : i32
      %163 = arith.select %162, %c127_i32, %161 : i32
      %164 = arith.trunci %163 : i32 to i8
      linalg.yield %164 : i8
    } -> tensor<?x1x1x64xi8>
    %collapsed_133 = tensor.collapse_shape %88 [[0, 1, 2, 3]] : tensor<?x1x1x64xi8> into tensor<?xi8>
    %expanded = tensor.expand_shape %collapsed_133 [[0, 1]] : tensor<?xi8> into tensor<?x64xi8>
    %c0_134 = arith.constant 0 : index
    %dim_135 = tensor.dim %expanded, %c0_134 : tensor<?x64xi8>
    %89 = tensor.empty(%dim_135) : tensor<?x12xi32>
    %c0_i32_136 = arith.constant 0 : i32
    %90 = linalg.fill ins(%c0_i32_136 : i32) outs(%89 : tensor<?x12xi32>) -> tensor<?x12xi32>
    %cst_137 = arith.constant dense<[1, 0]> : tensor<2xi64>
    %91 = tensor.empty() : tensor<64x12xi8>
    %92 = linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel"]} ins(%cst_8 : tensor<12x64xi8>) outs(%91 : tensor<64x12xi8>) {
    ^bb0(%in: i8, %out: i8):
      linalg.yield %in : i8
    } -> tensor<64x12xi8>
    %93 = tensor.empty(%dim_135) : tensor<?x12xi32>
    %c-128_i32_138 = arith.constant -128 : i32
    %c0_i32_139 = arith.constant 0 : i32
    %94 = linalg.quantized_matmul ins(%expanded, %92, %c-128_i32_138, %c0_i32_139 : tensor<?x64xi8>, tensor<64x12xi8>, i32, i32) outs(%90 : tensor<?x12xi32>) -> tensor<?x12xi32>
    %95 = linalg.generic {indexing_maps = [#map4, #map3, #map3], iterator_types = ["parallel", "parallel"]} ins(%cst_7, %94 : tensor<12xi32>, tensor<?x12xi32>) outs(%93 : tensor<?x12xi32>) {
    ^bb0(%in: i32, %in_179: i32, %out: i32):
      %132 = arith.addi %in, %in_179 : i32
      linalg.yield %132 : i32
    } -> tensor<?x12xi32>
    %c0_140 = arith.constant 0 : index
    %dim_141 = tensor.dim %95, %c0_140 : tensor<?x12xi32>
    %c1278221421_i32 = arith.constant 1278221421 : i32
    %c38_i8 = arith.constant 38 : i8
    %96 = tensor.empty(%dim_141) : tensor<?x12xi8>
    %97 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel"]} ins(%95 : tensor<?x12xi32>) outs(%96 : tensor<?x12xi8>) {
    ^bb0(%in: i32, %out: i8):
      %c0_i32_179 = arith.constant 0 : i32
      %c14_i32 = arith.constant 14 : i32
      %132 = arith.subi %in, %c0_i32_179 : i32
      %133 = tosa.apply_scale %132, %c1278221421_i32, %c38_i8 {double_round = true} : (i32, i32, i8) -> i32
      %134 = arith.addi %133, %c14_i32 : i32
      %c-128_i32_180 = arith.constant -128 : i32
      %c127_i32 = arith.constant 127 : i32
      %135 = arith.cmpi slt, %134, %c-128_i32_180 : i32
      %136 = arith.select %135, %c-128_i32_180, %134 : i32
      %137 = arith.cmpi slt, %c127_i32, %134 : i32
      %138 = arith.select %137, %c127_i32, %136 : i32
      %139 = arith.trunci %138 : i32 to i8
      linalg.yield %139 : i8
    } -> tensor<?x12xi8>
    %c0_142 = arith.constant 0 : index
    %dim_143 = tensor.dim %97, %c0_142 : tensor<?x12xi8>
    %98 = tensor.empty(%dim_143) : tensor<?x12xf32>
    %99 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel"]} ins(%97 : tensor<?x12xi8>) outs(%98 : tensor<?x12xf32>) {
    ^bb0(%in: i8, %out: f32):
      %132 = arith.sitofp %in : i8 to f32
      linalg.yield %132 : f32
    } -> tensor<?x12xf32>
    %c0_144 = arith.constant 0 : index
    %dim_145 = tensor.dim %99, %c0_144 : tensor<?x12xf32>
    %100 = tensor.empty(%dim_145) : tensor<?x12xf32>
    %101 = linalg.generic {indexing_maps = [#map3, #map5, #map3], iterator_types = ["parallel", "parallel"]} ins(%99, %cst_3 : tensor<?x12xf32>, tensor<1x1xf32>) outs(%100 : tensor<?x12xf32>) {
    ^bb0(%in: f32, %in_179: f32, %out: f32):
      %132 = arith.subf %in, %in_179 : f32
      linalg.yield %132 : f32
    } -> tensor<?x12xf32>
    %c0_146 = arith.constant 0 : index
    %dim_147 = tensor.dim %101, %c0_146 : tensor<?x12xf32>
    %102 = tensor.empty(%dim_147) : tensor<?x12xf32>
    %103 = linalg.generic {indexing_maps = [#map3, #map5, #map3], iterator_types = ["parallel", "parallel"]} ins(%101, %cst_4 : tensor<?x12xf32>, tensor<1x1xf32>) outs(%102 : tensor<?x12xf32>) {
    ^bb0(%in: f32, %in_179: f32, %out: f32):
      %132 = arith.mulf %in, %in_179 : f32
      linalg.yield %132 : f32
    } -> tensor<?x12xf32>
    %c0_148 = arith.constant 0 : index
    %dim_149 = tensor.dim %103, %c0_148 : tensor<?x12xf32>
    %104 = tensor.empty(%dim_149) : tensor<?xf32>
    %cst_150 = arith.constant -3.40282347E+38 : f32
    %105 = linalg.fill ins(%cst_150 : f32) outs(%104 : tensor<?xf32>) -> tensor<?xf32>
    %reduced = linalg.reduce ins(%103 : tensor<?x12xf32>) outs(%105 : tensor<?xf32>) dimensions = [1] 
      (%in: f32, %init: f32) {
        %132 = arith.maximumf %in, %init : f32
        linalg.yield %132 : f32
      }
    %expanded_151 = tensor.expand_shape %reduced [[0, 1]] : tensor<?xf32> into tensor<?x1xf32>
    %c0_152 = arith.constant 0 : index
    %dim_153 = tensor.dim %103, %c0_152 : tensor<?x12xf32>
    %dim_154 = tensor.dim %expanded_151, %c0_152 : tensor<?x1xf32>
    %106 = arith.maxui %dim_153, %dim_154 : index
    %c1_155 = arith.constant 1 : index
    %dim_156 = tensor.dim %103, %c0_152 : tensor<?x12xf32>
    %107 = arith.cmpi eq, %dim_156, %c1_155 : index
    %108 = scf.if %107 -> (tensor<?x12xf32>) {
      %132 = tensor.empty(%106) : tensor<?x12xf32>
      %133 = linalg.generic {indexing_maps = [#map6, #map3], iterator_types = ["parallel", "parallel"]} ins(%103 : tensor<?x12xf32>) outs(%132 : tensor<?x12xf32>) {
      ^bb0(%in: f32, %out: f32):
        linalg.yield %in : f32
      } -> tensor<?x12xf32>
      scf.yield %133 : tensor<?x12xf32>
    } else {
      scf.yield %103 : tensor<?x12xf32>
    }
    %dim_157 = tensor.dim %expanded_151, %c0_152 : tensor<?x1xf32>
    %109 = arith.cmpi eq, %dim_157, %c1_155 : index
    %110 = scf.if %109 -> (tensor<?x1xf32>) {
      %132 = tensor.empty(%106) : tensor<?x1xf32>
      %133 = linalg.generic {indexing_maps = [#map6, #map3], iterator_types = ["parallel", "parallel"]} ins(%expanded_151 : tensor<?x1xf32>) outs(%132 : tensor<?x1xf32>) {
      ^bb0(%in: f32, %out: f32):
        linalg.yield %in : f32
      } -> tensor<?x1xf32>
      scf.yield %133 : tensor<?x1xf32>
    } else {
      scf.yield %expanded_151 : tensor<?x1xf32>
    }
    %111 = tensor.empty(%106) : tensor<?x12xf32>
    %112 = linalg.generic {indexing_maps = [#map3, #map7, #map3], iterator_types = ["parallel", "parallel"]} ins(%108, %110 : tensor<?x12xf32>, tensor<?x1xf32>) outs(%111 : tensor<?x12xf32>) {
    ^bb0(%in: f32, %in_179: f32, %out: f32):
      %132 = arith.subf %in, %in_179 : f32
      linalg.yield %132 : f32
    } -> tensor<?x12xf32>
    %c0_158 = arith.constant 0 : index
    %dim_159 = tensor.dim %112, %c0_158 : tensor<?x12xf32>
    %113 = tensor.empty(%dim_159) : tensor<?x12xf32>
    %114 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel"]} ins(%112 : tensor<?x12xf32>) outs(%113 : tensor<?x12xf32>) {
    ^bb0(%in: f32, %out: f32):
      %132 = math.exp %in : f32
      linalg.yield %132 : f32
    } -> tensor<?x12xf32>
    %c0_160 = arith.constant 0 : index
    %dim_161 = tensor.dim %114, %c0_160 : tensor<?x12xf32>
    %115 = tensor.empty(%dim_161) : tensor<?xf32>
    %cst_162 = arith.constant 0.000000e+00 : f32
    %116 = linalg.fill ins(%cst_162 : f32) outs(%115 : tensor<?xf32>) -> tensor<?xf32>
    %reduced_163 = linalg.reduce ins(%114 : tensor<?x12xf32>) outs(%116 : tensor<?xf32>) dimensions = [1] 
      (%in: f32, %init: f32) {
        %132 = arith.addf %in, %init : f32
        linalg.yield %132 : f32
      }
    %expanded_164 = tensor.expand_shape %reduced_163 [[0, 1]] : tensor<?xf32> into tensor<?x1xf32>
    %c0_165 = arith.constant 0 : index
    %dim_166 = tensor.dim %expanded_164, %c0_165 : tensor<?x1xf32>
    %117 = tensor.empty(%dim_166) : tensor<?x1xf32>
    %118 = linalg.generic {indexing_maps = [#map7, #map3], iterator_types = ["parallel", "parallel"]} ins(%expanded_164 : tensor<?x1xf32>) outs(%117 : tensor<?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_179 = arith.constant 1.000000e+00 : f32
      %132 = arith.divf %cst_179, %in : f32
      linalg.yield %132 : f32
    } -> tensor<?x1xf32>
    %c0_167 = arith.constant 0 : index
    %dim_168 = tensor.dim %114, %c0_167 : tensor<?x12xf32>
    %dim_169 = tensor.dim %118, %c0_167 : tensor<?x1xf32>
    %119 = arith.maxui %dim_168, %dim_169 : index
    %c1_170 = arith.constant 1 : index
    %dim_171 = tensor.dim %114, %c0_167 : tensor<?x12xf32>
    %120 = arith.cmpi eq, %dim_171, %c1_170 : index
    %121 = scf.if %120 -> (tensor<?x12xf32>) {
      %132 = tensor.empty(%119) : tensor<?x12xf32>
      %133 = linalg.generic {indexing_maps = [#map6, #map3], iterator_types = ["parallel", "parallel"]} ins(%114 : tensor<?x12xf32>) outs(%132 : tensor<?x12xf32>) {
      ^bb0(%in: f32, %out: f32):
        linalg.yield %in : f32
      } -> tensor<?x12xf32>
      scf.yield %133 : tensor<?x12xf32>
    } else {
      scf.yield %114 : tensor<?x12xf32>
    }
    %dim_172 = tensor.dim %118, %c0_167 : tensor<?x1xf32>
    %122 = arith.cmpi eq, %dim_172, %c1_170 : index
    %123 = scf.if %122 -> (tensor<?x1xf32>) {
      %132 = tensor.empty(%119) : tensor<?x1xf32>
      %133 = linalg.generic {indexing_maps = [#map6, #map3], iterator_types = ["parallel", "parallel"]} ins(%118 : tensor<?x1xf32>) outs(%132 : tensor<?x1xf32>) {
      ^bb0(%in: f32, %out: f32):
        linalg.yield %in : f32
      } -> tensor<?x1xf32>
      scf.yield %133 : tensor<?x1xf32>
    } else {
      scf.yield %118 : tensor<?x1xf32>
    }
    %124 = tensor.empty(%119) : tensor<?x12xf32>
    %125 = linalg.generic {indexing_maps = [#map3, #map7, #map3], iterator_types = ["parallel", "parallel"]} ins(%121, %123 : tensor<?x12xf32>, tensor<?x1xf32>) outs(%124 : tensor<?x12xf32>) {
    ^bb0(%in: f32, %in_179: f32, %out: f32):
      %132 = arith.mulf %in, %in_179 : f32
      linalg.yield %132 : f32
    } -> tensor<?x12xf32>
    %c0_173 = arith.constant 0 : index
    %dim_174 = tensor.dim %125, %c0_173 : tensor<?x12xf32>
    %126 = tensor.empty(%dim_174) : tensor<?x12xf32>
    %127 = linalg.generic {indexing_maps = [#map3, #map5, #map3], iterator_types = ["parallel", "parallel"]} ins(%125, %cst_5 : tensor<?x12xf32>, tensor<1x1xf32>) outs(%126 : tensor<?x12xf32>) {
    ^bb0(%in: f32, %in_179: f32, %out: f32):
      %132 = arith.mulf %in, %in_179 : f32
      linalg.yield %132 : f32
    } -> tensor<?x12xf32>
    %c0_175 = arith.constant 0 : index
    %dim_176 = tensor.dim %127, %c0_175 : tensor<?x12xf32>
    %128 = tensor.empty(%dim_176) : tensor<?x12xf32>
    %129 = linalg.generic {indexing_maps = [#map3, #map5, #map3], iterator_types = ["parallel", "parallel"]} ins(%127, %cst_6 : tensor<?x12xf32>, tensor<1x1xf32>) outs(%128 : tensor<?x12xf32>) {
    ^bb0(%in: f32, %in_179: f32, %out: f32):
      %132 = arith.addf %in, %in_179 : f32
      linalg.yield %132 : f32
    } -> tensor<?x12xf32>
    %c0_177 = arith.constant 0 : index
    %dim_178 = tensor.dim %129, %c0_177 : tensor<?x12xf32>
    %130 = tensor.empty(%dim_178) : tensor<?x12xi8>
    %131 = linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel"]} ins(%129 : tensor<?x12xf32>) outs(%130 : tensor<?x12xi8>) {
    ^bb0(%in: f32, %out: i8):
      %cst_179 = arith.constant -1.280000e+02 : f32
      %cst_180 = arith.constant 1.270000e+02 : f32
      %132 = math.roundeven %in : f32
      %133 = arith.minimumf %132, %cst_180 : f32
      %134 = arith.maximumf %133, %cst_179 : f32
      %135 = arith.fptosi %134 : f32 to i8
      linalg.yield %135 : i8
    } -> tensor<?x12xi8>
    return %131 : tensor<?x12xi8>
  }
}

