from util.snake.configs import get_snax_gemmx_config

config = get_snax_gemmx_config()
# config["snaxoptflags"] = ",".join(
#     [
#         "insert-accfg-op{accelerator=snax_gemmx}",
#         "dispatch-kernels",
#         "set-memory-space",
#         "convert-linalg-to-dart",
#         "dart-scheduler",
#         "set-memory-layout",
#         "realize-memref-casts",
#         "insert-sync-barrier",
#         "dispatch-regions{nb_cores=2}",
#         "dart-layout-resolution",
#         "convert-dart-to-snax-stream",
#         "convert-linalg-to-accfg",
#         "convert-accfg-to-csr",
#         "snax-copy-to-dma",
#         "memref-to-snax",
#         "snax-to-func",
#         "snax-allocate",
#         "clear-memory-space",
#         "postprocess",
#     ]
# )


module snax_rules:
    snakefile:
        "../../util/snake/snax.smk"
    config:
        config


use rule * from snax_rules exclude snax_opt_mlir as snax_*


rule compile_snax:
    """
    Apply various transformations snax-opt on mlir files.
    Options controlled with `snaxoptflags` defined in config.
    """
    input:
        "{file}.mlir",
    output:
        temp("{file}.ll.mlir"),
    shell:
        "{config[snaxc]} --no-frontend -c {config[snaxc-config]} -o {output} {input}"


rule link_snax_binary:
    input:
        "rescale.o",
        "main.o",
        "data.o",
    output:
        "rescale.x",
    shell:
        "{config[ld]} {config[ldflags]} {input} -o {output}"


rule all:
    input:
        "rescale_traces.json",


from gendata import create_data_files


rule generate_simple_data:
    output:
        "data.c",
        "data.h",
    run:
        create_data_files()


rule compile_main:
    input:
        "main.c",
        "data.h",
    output:
        temp("main.o"),
    shell:
        "{config[cc]} {config[cflags]} -c {input[0]} -o {output}"
