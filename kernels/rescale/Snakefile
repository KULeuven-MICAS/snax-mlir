from util.snake.configs import get_snax_gemmx_config
from util.snake.paths import get_traces

config = get_snax_gemmx_config()
config["snaxoptflags"] = ",".join(
    [
        "insert-accfg-op{accelerator=snax_gemmx}",
        "dispatch-kernels",
        "set-memory-space",
        "convert-linalg-to-dart",
        "set-memory-layout",
        "realize-memref-casts",
        "insert-sync-barrier",
        "dispatch-regions{nb_cores=2}",
        "dart-scheduler",
        "dart-layout-resolution",
        "convert-dart-to-snax-stream",
        "convert-linalg-to-accfg",
        "convert-accfg-to-csr",
        "snax-copy-to-dma",
        "memref-to-snax",
        "snax-to-func",
        "clear-memory-space",
        "postprocess",
    ]
)


module default_rules:
    snakefile:
        "../../util/snake/default_rules.smk"
    config:
        config


use rule * from default_rules as default_*


module snax_rules:
    snakefile:
        "../../util/snake/snax.smk"
    config:
        config


use rule * from snax_rules as snax_*


rule link_snax_binary:
    input:
        "rescale.o",
        "main.o",
        "data.o",
    output:
        "rescale.x",
    shell:
        "{config[ld]} {config[ldflags]} {input} -o {output}"


files = ["rescale"]


rule all:
    input:
        *get_traces(files, config["num_chips"], config["num_harts"], "dasm"),


from gendata import create_data_files


rule generate_simple_data:
    output:
        "data.c",
        "data.h",
    run:
        create_data_files()


rule compile_main:
    input:
        "main.c",
        "data.h",
    output:
        temp("main.o"),
    shell:
        "{config[cc]} {config[cflags]} -c {input[0]} -o {output}"
