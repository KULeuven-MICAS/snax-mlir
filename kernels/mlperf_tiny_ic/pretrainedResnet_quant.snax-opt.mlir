"builtin.module"() ({
  "memref.global"() <{"alignment" = 64 : i64, "constant", "initial_value" = dense<[-23, -40, 5, 18, 12, -34, 44, -28, -2, 46]> : tensor<10xi32>, "sym_name" = "__constant_10xi32", "sym_visibility" = "private", "type" = memref<10xi32>}> : () -> ()
  "memref.global"() <{"alignment" = 64 : i64, "constant", "initial_value" = dense<[[31, -73, 46, -6, -24, -47, -1, 1, 34, 60], [-26, -38, 29, -5, 23, -24, 26, 34, -30, -20], [40, -35, 57, 13, -13, -26, 13, -17, -15, -47], [35, -32, -1, 12, -47, -31, -20, -4, 41, 5], [16, 5, -52, -52, 1, -25, -2, 42, 33, 31], [-72, 20, -38, -27, -69, 92, 42, -72, 54, -12], [-8, 21, 29, -55, -39, -54, 89, -74, 66, -27], [-11, -4, -80, 16, 4, 37, -6, 14, -30, 13], [-45, -33, 20, -58, 48, -20, -35, 63, -3, 5], [13, -10, 69, -24, 0, -46, -15, -41, 36, 1], [23, -17, -5, 8, -19, 28, 18, 11, -79, -32], [-32, 36, -33, -5, -65, 3, -8, -51, -35, 73], [-17, 54, 35, -11, 42, -17, -72, -49, 14, 13], [-7, -24, 18, 37, 21, -36, -53, -10, 5, 3], [-1, 27, -57, 13, -49, 8, 37, -49, 19, 28], [-25, -32, -20, 27, 2, 25, -41, 32, -69, -18], [18, 10, 12, -21, 10, 6, 29, 18, -64, -37], [-64, 41, -33, -12, 94, 17, -35, 19, -81, -24], [-24, -49, 20, 4, 8, 28, 38, -46, -27, -57], [24, 10, -4, -7, -5, -48, -87, 6, 23, 11], [-4, 39, -68, -30, -41, 22, -35, 56, 40, 2], [-19, -28, -22, 20, -29, 53, 19, -75, -16, 44], [20, -32, 30, -16, 3, -29, 19, 8, -81, 50], [-25, 19, 31, 4, -42, 33, -58, 2, -24, 9], [14, -3, -22, -13, -70, -33, 62, 2, 24, 31], [7, 19, -42, 28, 43, -3, 13, -16, -37, -72], [15, 53, -22, -61, -53, -68, 53, -63, 23, 14], [-38, -19, 109, -38, -63, 73, -36, -71, -35, -20], [-46, -55, -33, -28, -9, -7, 54, 107, -51, -36], [20, -42, -31, -7, 65, -36, 16, -13, 14, 12], [10, -40, -52, 34, 40, -29, 63, -25, -63, -27], [68, 12, -33, -40, 33, -46, -50, 35, -15, -30], [-60, -8, -25, 22, -52, 78, -33, -16, 54, -32], [-71, -58, -12, 4, 5, 20, 16, 1, 25, 43], [32, -2, -3, -32, -8, -9, 18, -26, 48, -23], [20, 9, 125, -18, -19, -31, -29, -54, -45, -16], [52, -19, 15, 23, -26, -15, -73, 26, -45, 28], [-59, -39, 28, 10, -69, 24, -42, 46, 45, -11], [-56, -6, 59, -9, 0, -18, 25, -18, -51, 12], [-28, -87, 3, 11, 22, 17, 9, 14, -17, -63], [32, 36, 12, -8, -36, -13, -65, -17, 8, 20], [38, -35, 70, -46, -4, 13, -24, 55, -68, -46], [-27, 14, 8, -5, 49, -43, 23, -72, 10, 19], [-85, 6, 36, 60, -15, 5, -23, -59, -22, -27], [-23, 38, -28, -26, -44, -43, 26, 33, 21, 32], [11, 0, -26, 27, -14, 9, -25, -14, 63, -26], [-49, 18, -70, 3, 44, 5, 18, -3, 44, -11], [21, -34, 27, 20, -50, -32, 55, -33, -34, -23], [-81, 0, 12, 4, 10, 7, 5, 12, 5, -32], [4, -30, 15, -26, 17, 21, -24, -7, 37, -42], [-33, 87, -48, -7, -23, -3, 7, 77, -6, -86], [51, -8, -70, -29, 67, -4, -69, -30, -6, 11], [-48, 19, -9, -24, 53, -1, -50, -23, -9, 54], [-5, -43, -79, 79, -63, 31, -43, 60, 18, -33], [-42, -30, -13, 127, -49, -62, -8, -55, 18, -12], [40, -50, 0, -39, 114, -3, -44, -55, -11, -6], [58, -66, -7, 3, 7, 16, -4, -34, -52, -8], [-31, 16, -30, 34, -7, 10, -6, 25, -76, 17], [24, 20, -74, -15, -25, 44, -47, 7, -57, 39], [-55, 78, -19, -27, -21, -9, 56, 7, -75, 9], [5, -16, -25, -39, 6, -42, -8, 49, 35, 33], [5, 19, 10, 28, 2, 2, 9, -44, -12, -53], [3, 64, 0, 47, 21, -37, -46, -10, 29, -91], [26, -29, 58, -16, -37, 19, -28, -57, 27, -28]]> : tensor<64x10xi8>, "sym_name" = "__constant_64x10xi8", "sym_visibility" = "private", "type" = memref<64x10xi8>}> : () -> ()
  "memref.global"() <{"alignment" = 64 : i64, "constant", "initial_value" = dense<[-2650, 403, -2426, -1401, -782, -3582, -1114, -875, -947, -1639, -334, 69, -2289, -1901, -39, -201, -329, -1503, -345, 620, -900, -1737, 329, -1242, -555, -1698, -90, -6268, -1430, -1961, -1939, -670, -1204, 1041, -106, -3097, -1151, -1328, -1770, 298, -631, -2027, -180, -4442, 614, -805, -1149, -2273, 128, -1446, -2325, -2405, 73, -3105, -3223, -2626, 87, -903, -349, -536, -1563, 722, -1595, -246]> : tensor<64xi32>, "sym_name" = "__constant_64xi32_1", "sym_visibility" = "private", "type" = memref<64xi32>}> : () -> ()
  "memref.global"() <{"alignment" = 64 : i64, "constant", "initial_value" = dense<[[[[3, 4, -11, 44, -5, 53, -73, -4, -60, 21, 20, 13, -53, -42, 57, -40, 11, 49, -63, 23, -24, 37, 16, 29, -13, -127, -25, 16, -84, 36, 26, -53]]], [[[-26, 7, 48, 8, -98, -9, -81, -84, -116, -26, 13, -18, -62, -18, 54, 89, -58, 13, 127, 7, 64, 30, -64, -43, -83, 122, 46, 58, -124, 23, 27, 84]]], [[[73, 42, -38, -127, -88, -42, 79, 25, -76, -21, 3, -16, -13, 65, 7, 40, 0, -41, -126, -67, 13, -36, 66, 5, -28, 55, 30, 0, -93, -52, -48, -55]]], [[[39, -10, -10, -11, 127, -3, 0, 57, 72, -101, 6, -8, 90, -6, -17, -53, -2, -12, -1, 41, -60, -33, -24, -19, -50, -58, -11, 29, 95, -3, -32, -44]]], [[[63, 2, 10, 55, 114, 18, -127, -70, 44, 29, 62, -35, 25, -7, 1, -117, -77, -16, 20, 6, -33, -10, 32, -30, 56, -88, 28, 32, -11, -30, -44, -25]]], [[[-85, -5, -91, 32, -11, -21, -125, -40, -3, -4, 42, 17, -18, -13, -2, -127, 10, 12, -22, 36, -15, 3, -11, -24, 5, -88, -7, -30, -74, 8, -35, -44]]], [[[-90, -9, 7, 18, -26, -1, -127, -39, -1, -48, 20, -39, -34, -47, -40, -90, -24, 4, 43, 34, 16, -21, -3, -25, 87, -65, 3, -10, -65, -12, -1, -7]]], [[[-76, 31, -125, -48, -16, -45, -116, 10, 74, 47, 14, 13, 127, -22, 31, 59, -32, 13, 2, -66, -48, 21, -40, 14, 54, -79, -11, -11, -79, -9, -6, -87]]], [[[-1, -34, -71, -16, 82, 4, -27, -1, -28, 43, 2, 36, 44, -4, -19, -92, 19, -4, -66, 31, 24, 44, 3, -20, 16, -127, -20, -81, 16, 45, 29, -8]]], [[[49, -11, -21, -35, 75, -30, -3, 4, -23, -47, -59, -55, -9, 18, 47, -100, 61, 34, 13, -45, 14, -90, 127, -35, -68, 7, 7, -81, 6, 3, -25, -116]]], [[[21, -32, 0, -38, -127, -6, -14, 38, 33, 74, 66, 29, -47, 60, 16, 15, 76, -22, 12, -15, 3, 49, 20, -76, -60, 4, -6, 35, -126, 43, -23, 2]]], [[[-102, 13, 8, 94, 18, 4, -127, -47, -51, 43, 79, 0, -76, -57, 26, -75, -1, 69, -41, 14, 42, 22, -52, -4, 125, -69, -9, 59, -96, 43, -8, -29]]], [[[-59, -1, -38, 67, 41, 36, -13, -77, -21, 12, 26, -31, -29, -59, 13, -42, 20, 13, -53, -11, 55, 50, -32, 49, 77, -127, -11, -39, -9, -22, 7, -68]]], [[[2, -85, -43, -85, -40, -17, -33, 17, -67, -4, 19, 39, -101, -62, -5, -66, -62, 45, -24, 0, -12, -20, 2, -27, -50, 34, 97, -44, 127, -36, -34, -72]]], [[[-32, -3, 45, 38, 41, 43, -127, 55, 107, 1, 22, 38, 78, 54, -12, -99, -61, 55, 54, 2, 11, 5, -65, -23, 85, -97, 27, 28, -45, 43, -13, -21]]], [[[-127, 58, 34, -30, -41, -59, -74, 3, -67, -32, 38, 52, 4, 28, -38, 57, -35, -62, 48, 10, -27, 14, -15, 12, -35, 51, 44, 27, 14, -52, -50, -35]]], [[[-26, 27, 51, 39, -8, 24, -44, -51, 5, -6, 12, -40, 1, -27, -7, 81, -33, 42, 127, 24, -16, -12, 2, 42, -55, 34, 4, -17, -90, -7, 15, -25]]], [[[-82, -29, -35, -28, -10, -1, -127, 68, -28, -16, 27, 15, -20, 23, -22, -99, -9, -14, -27, 26, -16, 25, 13, 2, 28, -86, 57, -6, -98, -14, -21, -12]]], [[[-95, 28, 8, 52, -49, -12, -127, -43, 39, 28, -14, 2, -60, -7, 28, -45, 44, -28, 70, -29, 75, 12, -16, 5, -7, -66, 38, -36, -63, 63, 78, 36]]], [[[-50, -7, 0, 74, 16, 42, -88, -11, 33, 2, 41, 5, 32, 29, 26, -127, -2, -1, 17, 67, 16, -30, 19, -9, 58, -4, 12, 7, -50, 13, -32, 21]]], [[[-111, -6, 27, 57, 51, 12, -69, -23, -16, -74, 33, 8, -10, -6, -1, -127, -39, -23, 4, 11, -22, -48, 7, -3, 41, 2, 23, 40, 14, -45, 44, -4]]], [[[20, -28, 40, 59, -64, 77, -120, -54, 14, -5, 55, 89, -12, 13, -61, -1, -127, -78, -39, -29, -12, 22, -28, 21, -67, -49, 25, -7, 77, -3, -109, -26]]], [[[-89, -9, 23, 58, -42, 4, -127, -37, 22, -17, -2, -59, 37, 2, -29, -73, -55, 9, 81, -23, 50, 16, -46, 41, -32, -7, 49, -66, -51, -4, -4, -14]]], [[[-55, -42, -11, -61, 15, -14, -30, 65, -111, -72, 48, -42, -31, 36, -4, -127, 7, 8, 4, -21, -10, -56, 49, 6, 101, 117, 69, 49, 15, 33, -28, 4]]], [[[-86, 41, -28, 60, 7, -5, -127, -67, -61, -25, 36, -11, -79, -2, 19, -46, 1, 39, 20, -8, 5, 22, 33, -14, 8, -23, 5, 28, -105, 5, -52, -46]]], [[[-49, -39, -56, -25, -77, 50, 122, -1, -35, 20, 44, 42, -53, 0, -7, -127, -25, -22, -41, 16, 26, -27, -26, -21, -18, 45, -8, 6, -55, 13, 36, 28]]], [[[-32, -10, -3, 5, 13, 13, -65, -30, 6, -32, 26, -15, -24, 15, -33, -127, 6, -5, 5, 33, -1, -23, 41, 0, 107, -46, -10, -3, -51, 8, 4, -7]]], [[[-85, -76, -127, 40, -28, -15, -55, -7, -45, -12, 104, 13, -51, -7, -4, -114, -1, 48, -77, 23, 55, 14, -47, 5, -33, -75, -25, -39, -67, 6, -86, -127]]], [[[-63, 10, -37, 8, -14, -2, -50, -40, -65, -1, -4, 58, -20, 8, -19, -127, 27, 7, -88, 48, -4, 75, -62, 37, -30, -72, 5, -40, -108, 43, -15, -12]]], [[[-28, -39, -10, -67, -46, -106, 54, -32, 121, 85, -3, -114, 50, 34, -48, 6, -33, -69, -61, -51, -10, -29, 54, -69, 20, 104, 69, -21, 5, -64, -47, -127]]], [[[-127, 8, -1, -5, -7, -5, -71, -19, 6, -56, 11, -28, -65, -50, -59, -111, -17, -24, 55, -16, 41, 5, -26, -3, -52, -25, 43, 21, -23, -39, 42, -5]]], [[[-104, 27, -36, 51, -50, 1, -127, -41, 29, 45, -28, -5, -8, -6, -46, -117, -62, -42, -32, 23, 8, 53, 29, 22, 22, -59, -2, -38, -22, 48, 65, -25]]], [[[-43, -30, -35, 37, -52, 50, -35, -26, 6, -31, 14, 127, -49, -6, -41, -68, -48, -57, -36, 42, 10, 27, -17, 1, 42, -100, 26, -2, -45, -39, -27, 52]]], [[[-12, -32, -13, -81, -48, 41, -127, -39, 16, 0, 10, 57, -61, -38, -23, 38, -19, 17, -63, -14, -20, -11, 6, -2, -30, -97, 42, 2, -49, 16, 38, 84]]], [[[87, 60, -75, -16, 1, -94, 127, -126, -17, -76, -14, -46, -51, -118, -11, 77, -76, -72, -126, -86, -7, -100, 89, 36, -82, 52, -39, -74, 90, -51, -29, 80]]], [[[-42, -22, 18, -39, -27, -15, -82, -15, -34, -22, 0, 7, -11, 35, -12, -24, 8, 13, -76, 20, -13, -5, -9, 1, 54, -127, 7, -45, -51, -30, -1, 4]]], [[[-9, -14, -53, 84, 18, 37, -56, -90, -17, 55, 6, -1, -59, -35, 11, -67, -90, 68, -27, -27, 64, -23, 35, 34, 127, -75, -16, -12, -91, -15, 28, -25]]], [[[-92, 4, -99, 24, -60, -3, -99, -8, 56, 75, -25, 64, -27, -8, 3, -7, 19, 19, -101, -1, -2, 38, -5, -18, -6, -127, 69, -26, -44, 41, -12, -35]]], [[[-5, -96, -5, -62, -90, -42, -23, 47, 41, -127, 18, -52, -21, 13, -50, -62, 0, 54, -24, -13, -1, 2, -14, -78, -70, -28, 78, -7, 60, 19, -26, 31]]], [[[-32, -9, -28, 10, -71, 30, -127, 22, 49, 49, -15, 61, -41, 13, -2, 38, 7, -23, 36, 47, 0, 38, -21, 14, 8, -109, 28, -40, -107, 31, 32, 15]]], [[[20, 32, 71, 56, 75, 23, -25, -2, 72, 25, -1, -9, 84, -6, -11, -79, -32, 32, -12, 8, -7, -31, 17, 26, 91, -127, 1, -40, 28, 24, 2, -45]]], [[[-64, -77, -34, 127, -83, 29, -56, 31, 12, 16, 5, 4, -66, -49, 10, -107, 21, 33, -54, 45, 8, 27, -38, -16, -46, -30, -1, -57, -61, 95, -28, -59]]], [[[-63, -9, -8, -1, -22, -37, -127, -63, -51, -19, 9, -49, -33, -33, -14, 14, 37, -55, 53, 25, 79, 43, 73, -12, 63, -68, 34, -41, -77, -33, 18, 5]]], [[[-110, 2, -109, -29, -70, -13, -18, 24, 56, -35, 28, 32, -66, 42, -85, -105, 13, 68, -79, 63, -50, 104, -98, 26, -53, -127, -9, -50, -107, 20, -13, -48]]], [[[-32, 4, -10, 56, 19, 45, -127, -76, 18, 28, 34, 8, -55, 5, -10, -123, -74, 78, -6, -22, 15, -2, 2, 12, 80, -10, -12, -3, -29, 7, 19, 17]]], [[[60, 20, -6, -74, -16, 13, 38, 3, -59, 9, -12, 6, 12, 30, 53, 42, 42, -5, -127, 11, -30, -27, 18, 28, 47, -7, -51, 8, -40, -29, 1, 15]]], [[[-127, -2, -17, -60, -14, -19, -88, -57, 38, 1, -74, -2, -25, -26, -27, -96, -97, -2, 32, -50, 3, -25, -9, 43, 102, -83, -12, -39, -55, -33, 84, 21]]], [[[-60, -40, 102, 53, -71, 48, -92, 24, -28, -34, -18, -34, -12, -41, -34, -78, -13, -9, 25, -43, 8, 57, -37, 20, -71, -88, 28, -100, -35, 27, 127, 6]]], [[[-33, -5, 38, -39, -75, 13, 75, -9, 25, -20, -13, 59, -26, 48, -7, -127, -5, 45, 14, 21, 57, 17, -66, -26, -92, 125, 9, 52, -29, 113, 0, 88]]], [[[2, 42, 48, -69, 50, -91, 39, 37, -2, -88, -13, -55, 37, -20, -26, 10, -39, 7, 32, 31, -74, -70, 50, -15, -109, 127, -41, 5, 25, -34, -88, -22]]], [[[-118, -70, -2, 102, -63, 23, -115, -50, -70, 28, 19, 42, 9, -72, 51, -64, 22, 28, -27, 93, -18, 70, -100, 0, 66, -102, 9, -8, -127, 7, -75, -30]]], [[[-36, -26, 2, 7, 75, 4, -72, -28, -100, 12, 49, 40, -46, 15, -2, -103, -110, 23, -36, 39, 26, 13, 26, -68, 104, -74, 20, -72, -127, 16, 19, 62]]], [[[-117, 49, -72, 45, -50, -34, -127, -8, -1, 50, 57, 3, -95, -64, -47, -1, 34, 3, 41, 25, -10, 40, 23, -3, 80, -88, 40, 0, -80, 16, -52, -67]]], [[[-56, -18, 16, -18, 11, -6, 32, -35, -69, -32, 32, 4, -48, 37, -34, -127, -52, -2, -76, -44, 21, -27, 40, 0, -26, -8, 14, -82, -62, 33, -55, -45]]], [[[-110, -44, -102, -23, -3, -46, -127, -79, 33, -28, -8, -59, -67, -116, -87, -121, -97, -15, 20, -12, -5, 3, -21, -3, -53, -105, -4, -28, 30, -25, 75, 2]]], [[[-66, -17, -18, -20, -30, 2, -20, -30, -29, -15, 26, -8, -63, -24, -42, -127, -30, -13, -10, -12, 39, 12, 39, -22, 31, -44, 23, -44, -37, -15, 33, -34]]], [[[-28, -24, -15, 8, -5, 14, -33, -6, 60, 32, 24, 63, -28, 22, 5, -14, 42, -3, -1, 17, 11, 46, -1, 1, 47, -127, 18, -46, -42, -6, 42, 7]]], [[[-36, 4, -68, -78, -113, 81, -80, -32, 73, 65, -13, 127, -29, 31, -36, -62, -95, 118, 47, 5, 4, 36, -17, 47, -1, -114, -36, -57, 5, 99, 73, -20]]], [[[-66, -35, -72, 115, 19, 13, -67, -67, -47, 54, 81, 68, -79, -38, 13, -108, 31, 61, -28, -7, 68, 85, -72, 3, 62, -127, -7, 4, -100, 72, 1, -3]]], [[[-65, -60, 37, 90, -30, 29, -127, -14, -42, -4, 52, -20, -11, -39, 35, -8, 27, 0, 25, 48, 35, 10, -11, 16, 62, -122, -5, -50, -105, 8, -15, -31]]], [[[105, -13, -19, -73, 82, -53, 97, -54, -24, -96, 4, -29, -51, 29, -37, -127, 7, 8, -57, -52, 7, -79, 62, -20, -67, 18, -14, -24, 125, -34, 3, -63]]], [[[-104, -112, 41, -22, -104, 34, -12, -23, -109, -47, 26, -46, -83, 3, 0, 14, 34, -127, 93, -5, 14, 3, 11, -52, -87, 118, 60, 34, -50, 1, -65, 32]]], [[[-26, -62, -11, -2, -33, 22, -109, -32, 86, -58, 12, -21, -7, 16, -49, -108, 7, -7, -52, 59, -9, -61, 8, -17, -25, -127, 7, 31, -69, 1, 67, 10]]], [[[-30, -17, 74, -25, -25, -25, -105, 7, -52, -31, 12, -36, -35, 29, 28, -127, 40, -54, 24, -29, 15, 22, 95, 2, 89, -43, 63, -31, -105, -12, 36, -49]]]]> : tensor<64x1x1x32xi8>, "sym_name" = "__constant_64x1x1x32xi8", "sym_visibility" = "private", "type" = memref<64x1x1x32xi8>}> : () -> ()
  "memref.global"() <{"alignment" = 64 : i64, "constant", "initial_value" = dense<[2657, -129, -3216, 1208, 10360, -2758, 813, -3137, 13510, 3899, 3688, 7788, 883, 10341, 7110, -3494, 1351, 3344, 5877, -2208, 536, 3624, 9052, 115, -3384, 1724, 6798, 4375, 7101, -1963, 8284, 17333, 17998, 5358, -4305, -2374, 3944, 5432, -313, 10294, -1009, 10418, 10637, -2736, 5654, -671, 3498, 1016, 1264, -4221, 5231, 4246, 12691, 2990, 12495, 13032, 4339, 7077, 9512, 4626, -4347, 7065, -1728, 8055]> : tensor<64xi32>, "sym_name" = "__constant_64xi32_0", "sym_visibility" = "private", "type" = memref<64xi32>}> : () -> ()
  "memref.global"() <{"alignment" = 64 : i64, "constant", "initial_value" = dense<[[[[-61, -15, -18, -10, -62, 75, 43, 23, -1, 39, -71, 28, 15, -23, 47, -40, -6, 23, -16, 31, 0, -45, 76, 16, -41, -34, -19, -1, -62, -62, -56, -70, 11, 44, -35, 61, -30, -52, -55, -12, 14, -28, 4, -11, -20, 35, 33, -3, 61, 15, 99, -13, 18, 30, 63, 26, -57, -41, 19, 33, -12, -72, -19, 20], [26, -6, 20, -47, -2, 23, 28, 0, -4, 3, -27, 18, 81, -35, -34, -79, -27, 14, -15, 14, 45, -9, 127, 16, 22, -35, -3, -4, -26, -92, 41, -9, 9, -1, -61, 53, -32, 26, -28, 27, 4, 7, 6, 7, -21, 29, 20, 32, 44, -34, 87, 2, -25, 79, 60, 15, 9, -17, -20, -2, -14, -91, -4, -17], [29, -2, 23, -5, -46, -31, 53, 7, 6, -20, 16, -29, 114, -29, -39, -57, -33, -17, -31, -71, 45, 57, 48, 13, 50, -3, -11, -32, -26, -41, -5, 13, 49, -30, 28, 79, -5, -46, -52, -25, -45, -31, 30, -4, 25, 37, 45, -7, 19, -29, 30, -20, 29, 31, -57, -4, 13, 8, -8, -35, -54, -51, 44, 21]], [[-49, -5, 47, -58, -53, 55, 69, 52, -52, 41, -10, 36, -9, -27, 31, -26, 3, 15, -44, 23, 15, 8, -16, 62, -74, -4, -78, 1, -11, -9, -37, -54, -18, 14, 15, -4, -21, -20, -37, 24, 7, -2, -32, -7, 33, 9, 38, 46, 79, -4, -61, 19, 9, 29, 96, 22, -38, -1, -45, 19, -3, 12, 0, -4], [-19, -49, 2, -68, -25, 46, 46, -5, -49, -15, -8, 26, 7, -27, 12, 7, -21, 36, -21, -5, 33, -14, 19, 5, 9, -22, -2, -3, -20, -17, 7, 6, 13, -13, -61, 37, -40, 29, -30, 7, -5, 29, -20, 25, -21, -7, -17, 22, 27, -7, -32, 1, 24, 1, 50, -8, -42, 3, -27, 36, 5, 5, -33, 5], [-60, -42, 17, -32, -8, 44, 2, -17, 2, 8, 5, 26, 111, -20, -5, -48, -14, -65, -44, -11, -68, 25, 43, -28, 6, -47, 6, 46, 10, 55, -32, 19, -6, -22, -3, 47, -7, 30, 22, -28, -24, 50, 40, 23, -11, -8, -19, -6, 23, -15, 2, 3, 45, -70, 4, -19, -35, 43, 7, 42, -12, -34, 13, -34]], [[-21, 1, -12, 55, -2, -12, 71, 28, -19, -17, -11, -36, -59, 13, -22, 7, -1, 55, -20, -8, 58, 84, -89, 45, 15, 35, -21, 105, -48, -15, -3, -8, -25, 11, 30, -11, 1, 27, -90, 29, -28, -20, 16, 52, 64, 3, -27, 40, -17, 13, -14, 60, 13, -10, 43, 3, -13, 42, -34, -17, 7, -5, -78, -25], [9, -44, 3, 3, -47, -34, 18, -47, -19, -52, 8, -39, -9, 48, 15, 63, -3, 29, -10, -55, -3, 22, -30, 9, -14, 8, 6, 46, -72, -8, 7, 33, 1, -48, -20, -26, 34, -7, -28, 60, -49, -11, 30, -37, 41, 3, -7, 30, -22, 1, -16, 5, -41, -67, 41, 0, -56, 19, -13, -6, 0, 6, 2, -59], [-19, -28, -14, -16, -69, 34, -56, -36, -1, 49, 12, 2, 15, 124, 37, 106, -5, 4, -15, 20, -50, -50, 34, 14, -23, 10, -15, 31, -40, 7, 6, 53, -3, 20, -54, -33, 122, 37, 31, 39, 63, 41, -1, -66, -38, -28, -38, -37, -5, -18, -26, -17, -49, -89, 53, -26, -22, 23, -25, -17, 66, 18, 86, -61]]], [[[-90, 6, 21, 18, 19, -40, -25, 21, 58, -56, 32, -16, -50, 25, -59, 9, -15, 5, 82, -15, -44, 54, 25, 5, -18, -7, 102, -18, -14, 35, 67, 27, -36, -37, -7, -27, -5, -20, -60, 61, 41, 20, -47, -41, -56, 2, -27, -1, -25, -45, -85, -34, -49, -20, 33, -57, 7, -19, -26, 12, 48, 30, 8, -6], [8, 76, 62, 11, -13, -52, -27, -14, 40, 3, -76, -21, -36, -9, -22, -2, 51, 34, 28, 26, 30, -1, 24, 36, 13, 36, -34, -61, 26, 45, 7, 19, -2, 39, -72, -35, 17, 36, -39, 29, 78, -8, -15, 14, -1, -2, -8, -42, 3, -18, -62, 65, 31, -26, -54, -30, -26, 7, -5, -16, -39, 33, -21, -8], [34, 8, 65, -48, -62, -100, 1, -39, 1, -18, -39, 37, 2, 8, -33, -12, 57, 50, 24, -43, 43, 21, 35, 6, 36, 66, -92, -13, 49, -33, 54, -75, -5, 24, -13, -35, 3, -12, -44, 41, 5, -7, 26, 10, -33, -50, 29, -14, -4, 3, -56, 45, 46, -8, -60, 14, -18, 5, 4, 11, 1, -44, -36, -5]], [[-44, 23, -27, -18, 55, 50, 52, 34, 15, 1, -4, -15, 36, 6, -25, 43, -18, -55, 74, 30, -43, -23, 13, 19, -10, -43, 85, 54, -45, 69, 82, -36, 36, 5, -36, 35, 33, -3, 7, 15, -25, -58, -48, -32, -15, -22, -22, -59, 15, 13, -34, 35, -31, 40, 54, -33, -21, 6, -2, -24, -24, -16, 11, -1], [-6, 38, -61, -17, 47, -15, 12, 19, -5, 37, -17, -58, -1, 29, 53, -17, 49, 5, 58, 63, -9, -23, 2, 48, -31, -16, -22, 34, -6, 97, 30, -27, 30, 25, -39, 2, 27, 0, -32, 10, 2, -26, -79, 13, 11, -2, -70, -83, -15, -8, 60, 47, 39, -25, -12, -11, -73, -24, 15, -24, 0, -20, -23, 20], [-18, 10, 32, -25, 22, -37, 1, -4, -59, -70, 28, 35, 19, 46, 21, 20, 88, -9, 14, 56, -44, 37, 24, 26, 16, -15, -67, 10, 14, 30, 104, 100, -12, -37, -2, -53, -23, 2, -43, 20, -77, 17, -63, 1, 7, -83, -27, 22, 29, 49, -32, -13, 27, -16, -54, 23, -69, 48, -7, -19, -37, 12, -25, 50]], [[-65, -73, -74, -26, 46, -5, 90, 26, 0, 24, -9, -63, 34, -56, -21, 3, -38, -52, 127, 29, 3, -18, 15, -25, 53, -24, 40, 92, -45, 41, -32, -24, 17, -20, -29, -22, 38, 15, 112, 30, 2, -89, -3, -14, -63, 39, 19, 29, -8, -2, 21, 67, -21, -1, 0, 32, 15, -96, -12, -18, -103, -93, -59, -18], [-4, 9, -35, 19, 56, -19, 57, 48, -17, 28, -7, -45, 17, -55, -16, -5, 61, -41, 89, 71, -3, 15, 19, -19, 25, 16, 8, 31, 17, -10, -49, -8, -1, 19, 10, -43, 34, 43, -40, 4, 14, -55, -65, -75, 17, 16, -40, -4, 60, -13, 13, 48, 99, -23, -34, 45, -34, -103, 35, -84, 27, -11, -11, 34], [28, 16, 62, -1, -31, -13, 51, 20, 32, -52, -23, -1, -20, 27, 23, 35, 14, -36, 34, 18, 6, 39, 4, 65, 62, 29, -20, -24, 19, -63, 44, 60, -16, -15, -32, -32, 45, -68, -65, 37, -71, 58, -22, -68, 10, -49, -26, 21, 7, 0, -50, -38, -1, -17, 56, 74, -18, -38, -5, -7, -48, 0, 20, 47]]], [[[-3, 1, -56, 72, 3, -19, -6, -19, -25, 10, 27, -29, 24, 1, 38, 25, 33, 35, -28, -3, 11, -76, 56, -32, 25, -2, -46, -6, -26, 3, -51, -45, 17, 35, -2, -28, -23, -38, -38, -65, -14, 76, 58, -48, 13, 42, 13, 63, 65, 6, 12, -6, 8, 47, -10, -1, 37, -55, -16, -26, -53, -2, -2, 127], [-21, 1, -18, 35, 25, -23, -1, -40, 13, 11, -20, -19, -3, 44, 58, 9, 62, 43, -30, -6, 5, 15, 44, 7, 21, 38, -19, 1, -26, -35, -49, 16, 5, 46, -30, -33, -13, -17, -28, 20, 26, 41, 36, 1, -8, 75, -11, 0, 8, 58, 0, 31, 8, -22, 14, 25, 28, 10, -26, 8, 16, -5, -43, 109], [-47, -3, -20, 52, -75, 16, -63, -38, 23, -12, 19, -8, 44, 39, 56, 101, 94, 44, -31, -30, -10, -7, -11, 0, -14, 66, -22, 20, -12, -58, -47, 16, 29, 23, -28, 3, 8, -48, -1, -42, 17, 20, 44, -39, -34, -1, -60, 37, 24, 25, -37, -17, 42, -20, 4, -33, 13, -9, 11, -33, -18, -15, 55, 91]], [[-33, 33, 20, 18, -65, 33, -61, -8, 20, -45, -40, -51, 51, 9, 58, -17, 72, 48, -11, -11, 20, -70, 28, -27, 2, 28, -33, -14, -5, -67, -27, 14, -19, 58, 37, 25, -78, -20, -27, -24, -17, -2, -5, -36, 4, -18, 56, 42, 46, -6, -48, 23, -45, -2, 44, -7, 30, 1, -7, 44, -6, 1, 27, 16], [-29, 10, 8, -57, -43, 44, -34, -9, 23, -62, -42, -16, -34, 38, 45, -59, 92, 12, 12, -44, 1, 6, 81, -13, 10, 54, -22, -28, -47, -52, 8, -60, 4, 1, -43, 85, -36, -2, -29, 39, -13, -8, 2, -25, 11, 14, 19, -4, 11, 48, -23, 51, -22, 16, 47, 15, -39, 6, -12, 1, -1, -20, 2, -2], [17, 6, -29, -17, -42, 59, -27, -54, 14, -5, -10, -2, -13, 18, 43, 31, 93, 4, -5, -31, -22, -43, 41, -7, -29, 57, 1, 44, -28, -77, -33, 7, -39, 49, 14, 19, -27, 3, 15, 20, 19, 34, 2, -84, -21, -31, -6, 13, -15, 22, -14, 6, -6, 28, 11, 2, 1, -28, 30, -16, -3, -48, 8, 11]], [[-48, 39, -3, -16, -23, 7, 5, -11, 32, -24, -13, -28, -1, 52, -9, -12, -5, 33, 19, 3, 18, -33, 0, -9, 22, 35, -32, 12, -58, -90, -15, 49, -23, 14, -58, 13, 18, -27, -13, -17, 18, 11, 18, 9, 93, -31, -11, 15, -5, -19, -10, 20, 52, -14, -11, -41, 48, 11, -2, -12, 5, -23, 25, -6], [-38, 3, -10, -21, -40, 30, -2, -12, 27, -41, -61, 18, -24, 39, 63, -47, -6, 30, 30, -1, -17, 2, 32, -9, 22, -31, -31, -39, -69, -60, -41, -42, -10, -29, -33, 57, 1, 22, -17, 25, -14, -21, 26, 31, 44, 4, -11, 12, 48, 19, 35, -11, 45, 5, 10, -11, 9, 0, -6, -16, 9, 10, 20, 35], [27, -4, -7, 5, 8, 2, -45, -32, 2, -10, -30, 9, 8, 24, -31, -17, 39, 39, 9, -84, -6, -14, 8, -30, -17, -13, 34, 15, -71, -53, -31, -18, -27, 35, -44, -24, 43, -45, 31, -16, -39, 8, 13, 76, -2, 3, -7, 19, -15, 14, 57, -16, -3, 22, 60, 10, 31, -26, 39, -13, -13, -9, 73, -41]]], [[[119, 34, 33, 31, 121, 2, -33, 86, -28, 10, 0, 39, -1, 17, -45, 38, 9, -10, 25, -12, -26, 27, -69, 28, -78, 25, 79, 21, 1, -19, 23, -38, -44, -64, 85, -12, -86, 72, 22, -82, 36, -8, -47, -107, -84, -2, -46, -1, -37, -14, -17, 73, -20, -54, 99, 3, -23, 17, 40, -29, 35, -58, 47, 16], [97, -24, 36, 47, 71, -59, -20, 15, -10, -25, 9, -10, 7, -23, -55, 44, -43, 33, 61, 70, -21, 57, -12, 42, -13, 46, -23, -6, -24, 6, 69, 59, -45, -6, 19, 36, -113, 30, 54, -41, 0, -7, 15, -52, -49, -14, -10, -67, -18, -27, 45, -33, -127, 9, 59, 10, -80, -23, 12, -32, 15, 27, -13, -7], [91, -85, -17, -38, 78, -10, 23, 7, -23, -59, 2, -46, 11, -5, -57, 39, -32, 31, 20, 42, -96, 64, -1, 16, 87, 14, -19, 1, -30, 25, 34, 44, 10, -3, -29, -33, 56, -57, 46, 29, -62, 48, -8, 41, -24, -63, 1, -57, -74, 33, 64, -5, -27, 33, 19, 42, -18, 61, -35, -1, -6, -18, 1, 5]], [[59, 10, -10, -24, 47, 39, -30, 30, 65, 13, 21, 86, -15, 2, 9, -56, 66, -119, -80, -3, -34, -43, 32, 30, -18, -26, -67, -89, -23, -63, -34, -94, -36, -125, 57, 11, 3, -93, -64, -1, -42, -54, -45, 97, -113, 50, 10, -90, 12, -19, -41, 44, 70, -6, -63, 69, 19, -59, 44, 3, -59, -36, 30, 30], [3, 5, 0, -17, 12, 32, 105, -52, 82, 15, 10, 94, 1, -47, 37, -21, 87, -21, -27, 25, 35, 31, -28, -18, -23, 41, -51, -11, -4, -3, 14, 67, -24, 15, -9, 21, -55, -57, -48, 18, -102, -88, -87, 64, -32, -8, 13, -18, 61, 53, -38, 12, 78, -71, -62, 33, -83, -66, -31, -7, -12, -22, -98, 14], [-99, -101, 25, -108, 25, 15, 39, -75, -27, -34, 73, 63, -5, -11, 36, 49, 82, 52, 72, -60, -17, -7, 27, 2, -47, -24, -95, 12, -37, -24, 27, 65, -64, 4, -108, 16, -14, -18, 45, 91, -74, -24, -55, 34, -50, -77, -10, 48, -39, 60, -82, 13, 17, 21, -97, -4, -24, -26, -38, -31, 66, 48, -11, 15]], [[49, 48, 41, -6, -101, 54, 42, 33, 55, 38, -41, 113, 58, 20, 43, -52, -35, -64, -14, 81, -26, -44, 62, 47, -60, -10, -97, -51, -38, -32, -19, -52, 90, 5, 67, -49, 25, -37, -45, 36, 52, -65, -3, 65, -39, 74, -72, -65, 42, 28, -55, 16, 44, 27, -7, 88, 46, -47, -60, 71, -83, 62, 27, 6], [0, 98, -19, -34, -79, -35, 44, -41, 49, 53, -64, 80, 27, 46, 30, -13, -11, -28, -75, 61, 31, -65, 42, -5, -63, 52, -3, 14, -42, -7, -13, 13, 38, 12, 11, -16, 32, 47, -50, 78, 11, -53, 77, 30, -14, 57, -23, 17, -15, -2, -8, 15, 73, 22, -7, 31, 12, 22, -36, 60, -54, 62, 12, -20], [-122, -5, -27, -27, 14, -47, 33, -19, 10, -35, -3, -41, -13, 60, 15, 35, -11, 0, 85, 21, -2, -26, -3, 14, -48, 57, -46, -21, -15, -24, 30, 6, -64, 14, -24, 13, -3, -7, -76, 124, 5, 1, 95, -95, 16, 40, 8, -28, -14, -40, -41, 77, -22, 29, -64, 29, 4, 26, -2, 54, -18, 22, 1, -21]]], [[[-6, -22, -23, -23, -55, 33, -31, 2, 38, -96, 14, -26, -17, 8, 77, 56, 124, 103, -9, -35, -6, -33, 24, 4, -44, -26, 56, -61, 17, 46, -42, -102, -33, 28, 121, 23, 42, -46, -55, -40, 30, 91, -8, -40, -35, 17, -51, 1, -18, -35, -9, 11, -14, 41, -20, 10, 3, 35, -18, 79, 55, 23, -39, 29], [60, -43, 34, -22, -59, -3, -34, -5, 30, -78, -42, 49, 5, -46, 45, 57, 71, 40, 10, 30, 0, -4, 3, 31, -90, -8, -57, 12, 39, 15, -69, -99, 10, -58, -19, -1, -44, -71, -56, -19, -38, 27, -4, -70, -6, 17, 49, 17, -38, -39, -109, -16, -4, 14, 9, 20, -30, -26, 5, 35, 15, -30, 32, 14], [-6, -51, 0, 19, 6, -36, -21, 0, -10, -16, -7, 27, 1, 29, 27, 5, 13, 18, 13, 0, 19, 0, 49, 48, -93, 2, -32, 12, -55, -25, -14, -16, 67, 7, -30, 37, -16, -45, -25, 66, 9, -28, -7, -54, 25, 58, -6, -70, -62, -14, -40, -44, -29, -24, -27, -15, 8, 3, 35, -5, 81, 24, 25, 48]], [[9, -1, -22, -45, -10, -8, -7, -17, 46, 0, -95, -31, 23, 5, 63, 43, 6, 65, 12, -21, 7, -22, 9, 46, -40, 34, -16, 2, -6, -6, -48, -65, 4, -31, 66, 35, -51, -9, 11, -75, 38, 103, -42, 6, -36, 62, -120, 14, 86, -73, -2, -10, 1, 41, -34, -5, -2, -54, 39, -8, -18, -37, -14, 16], [11, -105, 57, -52, 44, -32, 56, -59, -17, -66, -94, 42, -29, 28, 64, 10, -77, 52, -6, -29, -12, -5, -36, 11, -20, 16, -2, -38, -5, 13, 8, -54, 7, -43, 45, -31, -90, 8, -37, -43, -19, 58, -26, -10, 7, 7, -34, 48, 31, -2, -43, -5, 46, 81, 5, 9, -26, -50, 8, 14, -80, -127, 62, 46], [63, -60, -48, -21, 20, -65, -5, 37, -29, -17, -62, 20, -73, 49, 6, -26, -8, 36, 24, 42, -12, -44, -49, 70, -41, -26, -35, 35, -52, -27, -53, 2, 6, 20, 20, -13, -27, -10, -35, -8, 3, 63, -5, -78, -28, -13, -49, -27, -44, 30, 49, -37, -57, 49, 3, -30, -66, -10, 13, -20, -44, -62, 17, 7]], [[-38, 55, -77, 100, 48, -26, -67, 66, -47, 38, 17, -43, 61, -34, 22, 85, -1, 7, 2, 11, 4, -10, 27, 36, 60, 80, -23, 52, -16, -18, -11, -28, -14, -28, 2, 59, 61, 36, 17, -18, -37, 43, -35, 46, -40, 40, -77, 34, 40, 13, 17, -52, -2, -119, -32, -42, 62, -51, -6, -36, 3, -31, -20, -11], [-53, -86, -23, 21, 69, -13, 21, 36, -33, 30, 7, -18, 8, -24, 8, 58, -17, -23, 40, -92, -6, -21, 28, -6, 79, -26, 60, 0, 62, -16, 72, -32, 38, 55, 29, -29, 18, -8, 3, 14, -15, 39, -54, -11, -15, -43, -69, -17, 34, 35, 25, -12, -20, -33, -36, -27, 75, 22, -39, -61, -16, -42, -9, -11], [-4, 27, -9, -19, 67, -6, 17, 68, -30, 20, 26, 13, -2, 32, -13, 46, 40, -12, 46, -34, -22, -5, -29, 42, 28, 8, -26, -6, 37, 27, 25, 36, 8, 38, -4, -13, 54, 21, 20, 31, -18, 25, 6, -57, -81, -52, -36, 4, -27, -7, 21, 2, -20, 11, -36, 7, -33, 46, -47, 8, -110, -27, -14, -102]]], [[[-26, 10, -49, 29, -40, 16, -24, -75, 61, 16, -38, 9, -8, 4, 32, 24, -23, 48, 41, -4, -60, 24, -27, 9, -23, -71, 18, 80, 34, -19, -35, -38, 9, -68, 47, 38, -17, -7, -9, -15, -2, -18, -3, -69, -54, -34, -13, -29, 1, 52, -4, 6, 8, -13, 32, 14, 13, -25, -61, 10, -49, 32, -17, -29], [38, -12, 10, -16, -17, -10, -25, 5, 31, 25, -5, -19, -22, -4, 35, 1, 11, 39, -22, 33, 8, 5, 38, -12, -64, -14, 43, 15, 47, -16, 29, -9, -55, -15, -27, -45, 10, 17, -21, 31, -24, 15, 40, -33, 15, 49, 67, -27, -18, -14, 11, -1, -62, -36, -18, -76, -9, 19, -21, 15, -10, 55, 6, -26], [-10, -30, 66, 30, -17, 4, 5, 13, -24, -8, -35, -27, 3, 58, -2, -12, -14, 78, -71, -41, 15, 9, 48, 2, -51, 41, 21, -61, 34, -28, 65, 84, 29, -51, -32, -55, 28, -25, -59, 43, -60, -6, -15, -2, -29, 60, 89, -40, -38, 45, -20, -16, -42, -65, 25, -72, -15, -5, -5, -4, -5, 60, 30, 22]], [[-15, 84, 2, 27, -3, -25, 4, 59, 35, -4, -22, 28, -6, -25, 11, 38, 30, 16, -20, 40, -36, -28, -40, -8, -41, -44, -10, 27, 17, 0, -34, -19, -28, -10, 40, -40, 0, 5, -50, -6, -9, -58, -8, 5, 8, -33, -86, 10, 28, 23, 92, -14, 26, -32, -14, -2, -8, -17, -5, -27, -63, 21, -12, -9], [6, -28, 98, -9, -31, -1, -7, 46, 25, -40, 7, -36, -26, -58, 63, -8, 54, 8, -68, -14, 10, -96, 66, 27, -25, -1, 31, 79, 40, 3, 31, -15, -18, 25, -11, -66, 31, -6, 7, 15, -4, 42, 37, 16, 3, -3, 88, 31, -18, 21, 6, -13, -30, -30, -34, 33, 50, -18, 16, -1, 1, 56, -14, 38], [25, -3, 83, 18, -27, -14, 20, 20, -24, -24, -15, 16, 7, -18, -1, 34, 7, 45, -47, -39, 16, 29, 38, -42, -34, 56, 3, -65, 13, -7, 71, 60, -11, 13, -11, -96, -32, -3, -28, 53, -59, 14, 58, 38, 60, 2, 39, 11, 20, 14, 34, 11, -66, 19, -30, 32, 44, 9, 14, 6, -19, 7, 64, 19]], [[8, 18, -29, 33, -20, -18, 9, -9, -13, -43, -22, 58, 47, 41, -64, 29, 6, -4, -33, 27, 57, 45, -11, 40, 8, -50, 7, 12, 38, -6, 14, -25, -5, 5, 61, -53, -13, -41, 0, 29, -23, -66, -22, 53, 18, -2, -113, -14, 35, 23, -31, -52, 102, -17, -13, 14, -25, -46, 12, -59, -24, -14, 0, 18], [-2, 14, 69, 13, -83, 52, 43, -44, 10, -62, 7, -9, 21, -28, 8, 32, 19, 16, -21, 35, -5, -97, 21, 0, 66, -4, -7, 70, -21, -22, 12, -39, 17, 27, -9, -33, -31, -21, 9, 127, 0, -6, -4, -23, -26, -57, -10, 24, -29, 22, 15, 42, 32, -42, 6, 68, 24, -27, -9, 5, -64, -14, 20, 19], [22, 98, 49, 72, -56, 67, 52, 14, 28, -16, -18, 46, 26, 4, -11, 6, 39, 24, 33, -67, -42, 15, -20, 9, 32, 31, -24, -12, -1, -13, -2, -31, -32, -22, -49, -6, -10, -2, 17, 43, -21, -22, 70, 15, -27, 7, -15, 78, 7, 12, -6, 43, 19, 24, -20, 25, 48, -36, 12, -43, -115, -31, 32, 8]]], [[[-32, 18, 56, -57, -49, 40, -68, 47, 31, -25, -74, -11, 86, -34, 82, 98, -21, 72, -61, -22, -60, -44, 16, 45, -83, -23, 77, -59, 54, 4, -6, 57, -33, 9, 3, -32, 51, -77, 27, -14, -48, 56, -32, -66, -17, -83, 15, -65, -49, 80, -12, 92, -33, -65, -41, 55, -27, -70, 24, 48, 25, 69, -11, 18], [42, -19, 6, 2, 17, 46, -41, -46, 81, 35, -7, -52, 20, 36, 24, 0, -65, 23, -45, -69, 13, 26, 1, 4, -105, -34, 64, -29, 58, 36, 29, -15, 27, 3, 10, 69, 65, -55, 35, 32, 18, 50, 31, -117, -30, -46, -24, -40, -50, 41, -51, 10, -87, -66, -36, -75, 55, -24, -4, 31, -85, 24, 42, -24], [52, -7, 13, 30, -24, -25, -38, -36, 13, 40, -68, -43, -41, 31, 15, -12, 4, 55, -71, -33, 16, 36, 19, 15, -71, 73, -18, 5, -18, -26, 25, -98, -2, 23, -23, 10, 8, -41, 53, 33, -69, 91, 23, -43, 7, 38, 18, -73, 3, 63, -10, 33, -65, 0, -69, -29, 47, -59, -49, 37, -10, -19, 84, 30]], [[2, -13, -15, -51, -1, 36, -49, 127, -7, 13, -42, -19, 22, -46, 4, -34, -34, 34, -19, 1, -49, 1, -24, -7, 13, -27, 18, -29, 27, -46, 27, 16, 14, -63, 5, 7, -28, 22, 48, -14, -50, 26, 9, 65, -37, -27, 23, -40, 53, 61, 66, 6, -31, -17, -2, 13, -3, -35, 19, 2, -38, -9, 7, 37], [13, -19, -31, -16, 3, 58, -15, -18, 27, -17, 31, -46, 30, 24, -20, -68, -54, 6, -24, -26, -32, 64, -8, 4, 11, -1, 57, 31, 23, -49, 44, 42, 98, 20, -12, 6, -73, 44, 31, -45, 5, 36, -1, 23, -88, 25, 59, -38, -34, 10, 31, -35, -5, 35, 20, -20, 7, -74, 7, 11, -59, -44, 49, -4], [45, -25, 32, 35, -30, 47, -33, 79, 16, 53, -66, -24, -46, -24, -23, -5, -69, 24, -78, -36, -6, -17, -45, -3, -30, 28, -49, 4, -34, -3, 40, -8, 35, 19, 38, -54, -87, -42, -9, 59, -68, 58, 40, -18, -35, 34, 29, 70, 15, 47, 58, -46, 2, 42, -18, -39, 2, -51, -49, -42, -2, -59, 58, -35]], [[16, 24, 29, 47, 4, 24, 47, 62, -72, 6, -72, 48, 68, -15, -75, 5, 19, 4, -27, 11, -23, 82, 19, -4, 80, -17, 4, -20, 9, 24, -36, -55, -4, -16, 82, 3, -14, -7, 35, -25, -64, -15, -21, -33, -29, 77, 8, 36, 31, -37, 105, -60, -34, 6, 1, -3, 58, 16, 2, 50, 55, -46, -2, 70], [-21, 20, -46, 26, -25, 37, 86, 16, 20, -44, 0, 34, 88, 5, -67, 46, -53, 2, 24, 6, -70, 96, 35, 20, 61, -16, 19, 21, 43, 18, -25, 43, 31, 18, 63, -9, -38, 1, 83, -53, -45, 78, -38, 36, -32, 88, -1, 31, 35, 7, -41, -32, 93, 27, 6, 20, 8, -21, -8, 13, 87, -36, -13, 42], [12, 61, 1, 66, -52, 39, -2, 47, -40, 37, -126, 19, 1, -40, -24, -18, 4, -49, -14, -68, -74, 18, 6, -3, 68, -4, -42, -42, 14, 1, -39, 47, -22, 75, -23, -24, -44, -4, -33, -46, -58, -55, 32, -26, -57, 56, 35, 10, -20, 37, 45, -81, 24, 59, 35, 16, 2, -61, -2, 16, 22, -51, -24, -28]]], [[[24, -26, 8, 3, -34, 7, 10, -36, 26, -34, 25, 42, -50, -8, 12, -23, -22, 48, 66, 48, 5, 40, -64, 30, -9, -34, -17, 40, 1, 7, 3, -6, -17, 26, 55, -14, -15, -6, 2, -12, -35, -2, -3, 41, 1, 31, -14, -2, -31, -4, -59, 64, -8, 2, -14, 28, -19, -34, 39, -26, 30, -39, -22, 25], [27, -15, 45, -51, 11, -20, 2, -27, -5, 17, 12, -4, -45, -45, 14, -5, -16, -20, -24, 48, 16, 34, -21, 74, -17, 5, 41, -24, -19, 7, -6, -31, -20, -9, 15, -19, -55, 11, 10, -9, -13, 48, 24, 1, 24, -4, 1, 40, -32, -36, -33, 52, 15, 69, -29, 4, 58, -9, 60, -29, 10, -83, -9, 7], [-40, -20, 2, 26, -3, -33, -6, 21, -14, 28, -17, 38, -46, -38, -25, -27, 15, 9, -13, -7, 64, 22, 22, -7, -12, 12, -7, -33, 21, -3, -6, -12, 20, 28, 1, 1, 24, -24, -29, -21, -34, 21, 12, -18, 35, 19, 15, 7, -33, 5, -78, 8, -16, 94, 4, 28, -30, -36, 57, 18, 44, -29, 11, -18]], [[-39, -4, -27, -2, 29, -8, 16, -2, 17, -16, -30, 39, 22, 25, -15, -5, -15, 39, 52, 20, -6, -3, 10, -8, -1, -22, -4, 5, -4, -7, 19, -32, -4, 38, -12, -33, 2, 6, 12, -40, 10, 27, -43, -17, 34, 25, 0, -26, -3, -2, -38, 8, 15, 23, -10, -18, 66, -11, 36, -17, -31, -12, 25, 42], [-28, 5, 33, -5, 21, 3, -3, -17, -9, 45, 0, -51, 14, 32, 40, 8, -12, -21, -21, -33, -43, 16, -1, 27, 8, -7, 6, -15, -33, 9, -18, -54, 20, 35, -8, 36, -30, 25, 27, -7, -14, 14, 1, -46, -1, -27, 29, 2, -15, -44, -2, 34, 9, -15, -12, 15, 127, 7, 36, 24, 10, -36, 30, -5], [-32, -26, 15, -12, 22, -10, 21, 10, 8, 36, 9, -56, -4, 40, 6, 46, -30, 41, -4, -24, 24, 15, 20, -30, 23, -26, -25, -14, -26, -19, 44, -64, 18, 53, -9, 37, 19, 13, -34, -27, 1, 17, -27, -3, 56, -4, 30, -32, 21, -12, 9, 13, -33, 54, -6, 28, 16, -34, 61, 10, 45, -55, -5, 5]], [[-107, -57, -4, 8, 7, 24, -33, 25, 43, -24, 7, 76, 52, 37, -54, 7, 6, 54, 48, -37, 10, -48, 6, -32, -14, 13, -40, -3, -21, -33, -11, -3, 55, 52, -16, -48, -8, -36, -13, -30, 11, -16, -42, -1, 19, 27, -11, 8, -13, -9, 0, 3, 20, 14, -9, -79, -11, -9, 7, 5, -11, -23, 26, -1], [-43, -33, 31, -18, -30, 59, -12, 26, 45, 6, 6, -5, 59, 48, -4, 63, -12, 9, -25, 14, -23, -44, 48, -12, 3, -13, -24, 2, -16, -19, -8, 2, 49, 45, -10, -14, -40, 29, -27, 27, -25, -22, -34, -40, 2, -18, -10, -12, 3, -20, 43, -12, -36, -28, -12, -14, 54, 11, 38, -7, -12, -20, 80, 3], [-26, -15, 13, -29, -3, 31, 32, -8, 25, 40, 7, -27, 47, 51, -2, 33, -32, 38, 22, -43, 6, 6, 77, 8, 10, -22, -18, 18, -3, -15, 6, -38, -5, 42, 25, 25, -31, 2, -25, 20, -1, -14, -22, -11, -14, -26, -13, -34, 3, 51, 10, 3, -47, 13, -19, -9, 5, -26, 40, -6, -17, -44, 21, -35]]], [[[60, 55, -53, 17, -49, -49, -22, 3, -9, -10, -10, -65, 51, -29, 47, -16, 46, -32, 18, 3, -69, 20, -59, -33, -30, -37, -11, 25, -25, 1, -77, -24, 34, -12, -14, -55, -78, -9, -20, -85, 0, -30, -61, 24, -18, 9, -32, -48, 10, 13, 3, -67, 52, -65, -62, 15, 2, 46, -4, -2, -56, 18, -60, -59], [109, 42, -30, 3, -27, 16, 60, 2, 55, -10, -50, 3, 8, -21, 51, 18, -33, -30, 21, 24, -22, 9, 15, -5, -32, -9, 30, -77, -11, 24, -19, -52, -24, -32, 14, 4, -91, -16, -33, -55, -20, 26, 17, 35, -49, -46, -1, -71, -21, 63, -2, -68, -59, -67, 23, -24, -4, 109, -1, 32, 68, -22, 21, -47], [87, 40, -20, -52, -51, 28, -1, 26, 20, -11, -29, -36, 75, 76, -35, -31, -14, 28, -5, 33, 40, 52, -52, -3, 43, 58, 8, -75, -62, 29, -98, -51, 61, -5, 23, 0, -70, 7, -33, 60, -32, 18, -21, 22, 19, -54, 35, -8, 39, 73, -49, -50, -25, -40, -37, -91, 33, 60, -52, -43, 48, -60, -42, -3]], [[-31, -4, 43, 12, -12, -3, -70, 127, -28, 31, -6, -34, 44, 40, -10, 45, -64, -10, -2, 42, -20, 43, -40, -33, -49, -34, 16, 62, -2, -28, 29, -44, -19, 17, 18, -14, -32, 5, 45, -56, -5, -64, -32, 67, 33, -37, -17, -10, 7, 66, -10, -14, 20, 11, -10, 40, 38, 100, 28, -51, -105, 87, -95, -59], [-32, -59, 78, -21, 7, 58, 22, 4, 5, 6, -21, 29, -75, 13, -63, 15, -48, -86, -33, 0, -77, 26, -6, -51, -56, -4, 54, -18, 44, -32, 47, -64, 44, -24, 12, -17, 24, -13, 5, -79, -41, -107, 10, 40, 64, -53, 5, -34, -59, 51, 24, 26, -54, -6, -20, -48, -24, 45, 27, 4, 113, 4, 40, -17], [-5, -102, 22, -48, -38, 5, -21, 29, 0, -3, -46, 6, -21, 9, -47, -11, -24, -20, 23, -24, 31, 15, 6, -14, -12, 7, -9, -50, 20, 25, 20, -75, 34, -34, 62, 66, 9, -21, 2, 19, -61, -68, 52, 6, 62, -8, 23, 97, -45, 83, -68, -8, -49, 21, -9, -84, 43, 0, 34, -19, 25, 51, 47, 10]], [[-37, -10, -1, 3, -14, -14, -19, 40, -15, -7, -48, 54, 31, -46, -38, 63, 9, 92, -22, 17, 39, 11, 2, -3, 17, -21, 13, 29, 19, 2, -8, 38, -5, -30, 25, 5, 2, 20, 5, -31, -60, -25, 10, -97, -10, 18, 11, -52, -17, -42, -20, 22, -23, -14, 36, 48, -18, 32, 9, -39, -107, 39, -47, 7], [-99, -101, -45, 10, 115, -23, -49, 91, 5, 56, -24, 2, -78, -39, -29, 26, -57, 77, 35, -4, 32, 105, -60, -56, -15, -2, 26, -7, 23, 29, 28, 80, -53, -51, -46, 1, 65, -49, 48, 1, -35, -12, -10, 12, -23, 102, 0, -31, -57, 6, -24, 75, -21, -18, 6, 0, -32, -6, -57, -12, 63, 7, 10, -12], [-11, -114, -1, -17, 7, -23, -17, 45, -34, 39, -17, 33, -22, -25, 5, 50, -68, 69, 23, -6, -35, -56, 18, 19, -25, 23, 12, -7, -12, 1, 56, -53, -48, -41, 22, -6, 28, -51, 63, -9, 11, -30, 40, 21, -40, 73, -35, 9, -71, 41, -66, 2, 11, 2, 13, 11, 13, 49, -64, -40, -12, -12, 5, 19]]], [[[-7, -28, 60, -22, 63, -94, 31, 8, -22, 40, 23, -14, 20, 0, -13, -21, 55, 23, -34, 42, -39, -10, 74, 33, 35, 8, -45, 6, -27, 0, 20, 53, -62, 8, -9, 10, -62, -25, 34, -31, -8, 2, -25, 74, 11, 4, 64, 45, 12, 16, -30, 22, -19, -27, -2, 1, -20, 15, -8, 25, -80, 42, -50, -26], [7, -8, -8, -33, 28, -52, 23, -20, -44, 29, -36, 30, 14, 41, 15, -8, 36, -9, 12, 45, -18, -13, 32, -13, 23, 15, -25, 6, -81, -32, 66, -5, -18, 28, 16, 8, -14, -10, -10, -37, 18, -37, -30, -3, 50, 31, 54, 22, -48, -18, 21, -18, 16, -67, 34, -16, -42, -2, 13, 35, -28, -25, -17, -57], [2, 69, -11, -41, 12, 39, 18, -57, 33, 6, -46, 14, -37, 17, 57, 35, -44, -22, 79, 9, 22, -8, 6, -28, -59, 11, 11, 54, -53, -41, 22, -46, 40, -36, 54, -11, -36, 6, -44, -10, -4, -1, -1, -40, -12, 2, 33, -51, -76, -21, 66, -40, 21, -24, 50, -41, -29, -25, 22, -3, -1, -26, -11, 5]], [[28, -22, -13, -13, 7, -58, 9, -15, -22, -20, -45, 36, -21, 33, -38, -17, -25, -5, -21, 30, -34, -43, 80, -13, 49, 9, 9, 11, -37, -27, 15, 22, -86, -79, -11, 81, 14, -38, 14, 39, -16, 69, -27, -1, -25, -23, 13, 6, -5, -10, 4, -12, 49, 32, 19, -12, -41, 84, 15, -12, -30, -13, -18, -25], [50, 3, -29, -27, 45, -28, 26, -37, -48, 3, -48, 2, 54, 42, 13, 3, 4, -33, 13, 5, -27, -20, 19, -4, -1, -24, -7, -22, 7, -84, -5, -25, 30, 14, 13, 27, -41, -6, 18, -36, -17, -32, -45, -73, -4, 67, 15, -24, 10, -7, 14, -4, 14, -14, 55, -60, -69, 17, -30, 43, -10, -39, 14, -47], [10, 11, -47, -17, -3, 12, 62, -21, -33, -4, -12, 45, 33, -3, 27, -4, -57, -44, 38, -38, 13, 47, -10, 8, -47, 15, -14, -23, 4, -40, 17, -5, 12, 24, 43, 25, -37, -19, -62, -17, 47, -32, -21, -1, -24, 82, 9, -12, -6, 23, -8, 33, 0, 93, 63, 1, -16, -45, -5, 39, 10, -63, 85, 43]], [[-1, -92, -10, -11, -40, 65, -33, -53, -54, -5, 24, 8, -34, 58, -45, 55, -3, 11, -31, 12, -53, -38, 21, -13, 64, 14, 34, 8, -70, -58, -43, -8, 21, -25, -57, 49, 71, 6, -34, 23, 38, 127, 1, -66, -60, -68, 19, -19, -41, 1, 49, 5, -53, -28, 72, -24, -36, 9, -14, -13, -8, -1, -48, 13], [56, -45, -34, 8, 21, 2, 8, -5, -17, -23, -29, -29, -38, 27, -25, 10, 47, -12, 6, 21, 43, 18, -33, 24, 6, -8, 38, -11, -7, -21, -5, -41, 56, -1, -16, 70, 22, -11, -30, 18, -43, 27, -26, -80, -2, -18, -11, -23, 23, 11, -13, 30, -31, 1, 20, -12, 9, 29, -14, 6, 39, 3, 3, -30], [17, -30, -12, -2, 70, -4, 53, 46, -19, -14, -42, -46, -22, -62, -19, 48, -59, 1, 26, -100, 37, 81, -13, 37, -81, 23, 21, -80, -10, 51, 25, 24, -39, -69, 23, 28, -21, -13, -46, 35, 49, -87, -4, 44, 58, 108, -15, -23, 24, 17, -90, 55, 18, 84, -5, 35, 10, 32, 32, 16, -32, 4, -21, 8]]], [[[-59, 12, -17, -25, -23, -10, -70, -24, -19, 0, -45, -12, 7, 49, 14, -45, -29, 17, -46, -3, -15, -35, 16, 12, 19, 49, -31, 33, 21, 20, 3, -17, 22, -43, 69, 34, 41, -6, -16, 4, 48, -72, 20, -42, -27, 19, 15, 42, -33, 44, -76, -18, -41, -7, 67, -39, -34, 17, -31, 28, -32, -15, -17, -74], [-40, -15, -40, -51, 2, 3, -38, 22, 49, -19, 1, 48, 15, -3, 10, -80, -6, -11, -28, 35, 31, 30, 29, 13, -1, 50, -31, 13, 53, 30, 38, 37, 39, -59, 38, 23, -13, -20, -32, -11, 15, -32, -48, 1, -57, 9, 51, -12, 5, 4, -57, -4, -51, -38, 59, -12, -73, -5, -43, -8, -72, 3, -22, -10], [-11, 6, 30, -17, 5, 51, 18, -10, -44, 16, -2, 15, -2, -8, -25, -33, -30, -21, 18, 33, -53, -46, -2, 21, 46, 73, 19, 36, 60, -17, 86, 27, 16, -58, 6, -9, -30, -5, -43, -27, 10, -23, -25, 46, -5, 10, 59, -31, -13, 11, -48, -44, 24, -72, -12, 21, 12, -44, -29, 6, -17, -42, -44, -83]], [[29, 7, -65, -35, 6, -30, -46, -34, 60, 33, -31, 29, 19, 64, -16, 11, -16, 5, 12, 58, -11, -15, 29, -36, -19, 33, -1, 9, 12, -8, -11, -5, 38, -14, 51, 49, 127, 25, -30, -23, 47, -25, 12, 28, 10, 39, -33, -16, -20, 67, -34, -2, -29, 26, 44, -39, 14, -7, -51, 41, -95, 22, -6, -36], [40, -37, -76, -61, 31, 16, -25, 8, -9, -8, -55, 56, 20, 2, 12, 5, -7, 12, 3, 20, -11, 24, 17, -52, -41, 28, -26, 0, -32, 11, 25, -4, 84, -45, 9, -27, 8, 107, -64, 17, 0, 8, 6, 21, 0, -17, 14, -34, 13, 29, -38, -10, -6, 16, 29, 34, 30, -4, 1, -25, -45, 2, 67, 60], [100, -3, -33, -20, 35, 38, -24, -31, -15, 2, -78, -17, 12, 17, 22, 64, 21, 13, 43, 21, -14, -65, -6, 6, -54, -7, 17, 27, -14, -25, 14, 5, 22, -38, 20, -39, 9, 38, -23, -17, -6, -33, -10, -30, 34, -45, 30, 7, 34, 35, -41, -25, 45, -28, 37, 10, 14, 8, -17, 17, -30, 70, 15, 22]], [[-48, 52, 15, 37, 32, 5, -44, -2, 22, 22, 27, 17, 18, 22, -47, 7, 3, -53, 34, 10, 54, 41, 62, -30, 18, -24, -35, 3, 35, -5, -70, -56, -56, 39, -3, -20, 22, 20, 27, 27, 11, -9, 20, 69, -39, -16, 5, 43, -78, -27, -40, -15, -8, -30, 78, -20, -48, -48, -64, -3, 13, -34, -13, -4], [-5, -20, -17, 30, -6, 38, -3, 11, -8, 5, -35, 9, 18, 41, -13, 21, 82, -31, 17, 4, 3, 0, 2, -33, 28, -35, -60, 45, -2, -6, -30, -80, -47, 37, -37, -3, -53, 15, -24, 59, -71, -11, 9, 59, 0, -69, -32, 38, -44, -11, -17, -27, 0, 9, 44, 60, 31, -31, -44, -6, 0, -20, 86, 3], [-26, 1, 11, 4, -4, 29, 0, -11, -10, 17, -7, 7, 64, -9, -7, 63, 83, -50, -8, -37, -34, -7, -96, 15, 25, -56, -19, 29, 13, 12, -33, -29, -50, 27, -9, -10, -52, 2, -28, 5, -18, -34, 22, -26, 51, -65, 14, 50, 12, -21, 11, -19, 13, 31, 37, 17, 3, -18, -23, 41, -31, 20, 6, 11]]], [[[-62, 24, 39, -76, -21, -27, -24, -51, -46, -20, -10, -70, 24, -48, 64, -21, 70, 34, -17, -15, -59, 55, 82, 6, -39, -22, -51, 76, -29, -2, -50, -65, -12, -7, -23, -27, -28, 11, -16, -10, -23, -3, 7, -5, -13, 24, 17, 13, 10, 6, -33, 47, -7, 2, 4, 23, -16, 5, -52, -8, -61, -13, 16, 22], [-40, -20, 15, -35, 9, -21, 44, -28, -4, -22, -32, -24, 11, 20, 22, -60, 28, 24, 6, 25, -68, 49, 30, 3, -127, 36, -22, 19, -13, 28, -52, -43, 44, -23, -12, 1, 16, -23, -53, 8, 3, -6, 3, -13, -19, 65, 34, 1, 21, -14, 75, -9, 13, 48, 7, -30, 11, -21, -47, 21, 15, 38, -21, -2], [21, 6, 2, -89, -4, 36, -4, 13, -41, 15, -40, -11, 50, -39, 15, -59, 49, 25, -3, -40, 90, 1, 113, -58, -42, 57, -2, -49, -56, 17, -54, -35, 23, -19, 9, 27, -37, 7, -22, -41, -12, 27, -13, 43, -6, -20, 6, 10, -40, 20, 13, 1, -16, 56, 24, -39, -38, 7, -5, 11, -47, -15, -2, 5]], [[-32, -1, 15, 58, -22, -11, 15, -28, -27, -39, 12, -21, 28, -53, -2, -6, 39, 1, -57, 5, -2, 22, 18, 11, -15, 39, -30, -17, -15, -26, -1, -38, -66, -17, -1, 38, 52, 39, -30, -2, -13, 19, -15, -24, 22, 37, -19, 16, -21, 55, -32, 18, 30, -3, 51, 47, 5, 2, -59, -56, 8, -21, 0, 40], [20, -57, 25, 47, -59, -23, 53, -26, -1, -34, -21, -30, 7, 33, 20, 13, 54, 18, -39, -25, -23, 7, -44, -14, -20, 6, -9, -31, -17, 11, -32, -18, 24, -9, -43, -1, 24, 54, -88, 30, -32, 14, -21, -32, -4, 30, -29, 15, -23, 15, 33, -28, -26, 13, 37, 7, 61, -48, -29, -3, -42, 33, -53, 24], [-22, -1, 15, 29, -21, 18, -7, 15, -70, -20, -9, -13, -18, 9, 43, 10, -14, -49, -9, -14, 8, -62, 26, -5, -15, 28, 5, -9, 46, 13, -12, -30, -36, -26, -9, 40, -34, 30, -30, -32, -40, 33, -31, 51, 19, -10, -1, 30, -28, -37, 18, -11, -20, 65, 28, 21, 14, 5, 45, -12, -18, -18, -65, -2]], [[31, 33, -17, 116, -16, -12, -34, -2, -5, -57, -57, -83, 15, 31, -4, -49, 26, -37, -36, 8, -83, -16, 43, 40, 54, 29, -1, -33, -55, -65, 28, -30, -55, 7, -23, 14, 50, -16, -36, 10, -7, -7, -16, 0, 35, -27, -27, -34, -41, 71, -1, -7, 39, -34, 67, 39, -9, 15, -11, -26, 58, 18, 27, 102], [80, -37, -52, 92, -55, -28, 30, 14, 0, -48, -45, -12, -3, 76, 34, 12, 36, -40, -37, -38, -26, -22, -52, 15, 30, 6, 4, -48, 41, -30, -25, -9, -35, -32, -28, 2, -15, 44, -17, 15, -21, 3, -41, -44, 56, 39, -24, 4, -24, 34, 73, -11, 5, -8, 56, -32, -9, -40, -17, 36, 53, 59, -28, 100], [13, 26, -31, 73, -45, 24, 6, 36, -15, -51, -31, -11, 22, 48, 70, 0, -7, -53, -51, -47, -44, -72, -18, 25, 90, -56, -1, -8, -33, -38, -15, 10, -79, -23, -10, 8, -3, 36, -31, -33, -23, 30, -16, -11, 51, 38, -41, 23, 18, -7, 20, -25, -39, 59, 26, -38, -12, 8, 28, -6, 58, 25, -37, 69]]], [[[-35, -19, 47, 86, -29, 19, 15, 4, 35, -42, -34, 1, -79, -43, 91, -33, -17, 19, 22, -42, 30, -43, -14, -1, 20, 39, -88, -21, -25, -77, -32, -93, -27, 42, 18, -32, 15, 58, -77, 34, -9, -71, -32, 41, -2, -13, -40, -14, -17, -60, 27, 41, 36, 9, 26, 70, 57, -11, 53, 66, 58, 11, 5, -52], [15, 56, -44, -5, -44, 2, 36, -10, 16, -39, 7, 55, -15, -43, 39, -31, 39, 25, -77, -61, 12, 35, -58, 42, 35, 28, -33, 0, -23, -94, 9, -62, -16, 58, -32, 23, -27, 43, -79, 58, 3, -47, -6, 50, 15, 75, -54, 92, -38, -19, 50, 26, -1, 2, 29, 93, 20, 54, 32, 31, 19, -44, -31, -74], [37, -10, -9, 81, -92, -16, -28, -71, 26, -63, 7, 77, -113, 21, 61, -26, 56, 8, 18, -47, 33, -42, -35, 39, -30, 41, -69, -34, -61, -86, -5, -62, 30, -52, -11, 15, 6, 16, -57, 34, 15, -46, 12, 29, -30, 67, -34, 26, -21, -34, 71, 20, 20, -35, 33, 41, 23, -3, -45, 11, -9, -43, 35, -51]], [[-39, -23, 1, 79, -26, -54, 14, 75, 49, 41, -28, -1, 48, -32, 17, -44, -46, -69, -41, 51, 104, -14, 65, -36, 4, -3, 52, 49, -42, -33, 0, -40, -17, 69, 54, 49, -14, -9, 18, -9, -69, -69, 32, 58, 53, -5, -61, 12, 47, -11, -68, 46, 79, 50, -5, -2, 5, -15, 47, -25, -35, 28, 24, 36], [4, -41, -7, 36, -38, -32, 11, 13, 89, -67, -22, -13, -3, 31, 40, -15, -26, 3, -49, 0, 31, 31, -51, 29, -34, -2, 7, -24, -2, -30, 45, -16, -33, 36, -36, 28, -30, -11, -31, 9, -11, -47, 8, 54, 64, 19, 14, 56, 10, -10, -127, 26, 57, 72, 31, 38, -18, -36, 35, -36, -11, -28, -36, 30], [94, 6, 16, 51, -23, -4, -3, -25, 37, -58, 0, -35, 35, 49, -4, 16, 64, -39, -13, -56, 36, -33, 42, 36, -37, -28, 36, -16, -47, -29, 57, 36, 61, -18, -38, -20, -30, -10, -87, -22, 15, -20, 63, 4, 18, 5, -20, 37, 32, -34, 2, -30, 30, 0, 30, 45, -17, -40, -10, -69, -24, 1, 16, 1]], [[14, 65, -63, -14, 3, 21, 37, 79, 30, 43, -50, -84, 102, 19, -8, -59, 12, -12, -26, -7, -34, -34, 83, 17, 61, 45, -59, 22, 57, -49, -6, -63, 33, 14, 63, 11, 68, 12, 63, -58, -36, -13, 78, 20, -29, -45, 2, 79, 42, 28, -12, 40, 12, 29, 39, -38, -23, -4, -54, -15, -47, -42, -29, 43], [27, 16, -5, 33, -29, 3, 9, 69, 23, 0, -8, -41, 96, 62, 13, -105, -20, -30, -37, -35, -41, -53, 67, 7, 37, 16, -43, 9, 38, -22, -4, 14, -4, -18, 9, -68, 49, -5, 47, -49, 24, -19, 38, 25, 24, -22, 17, 46, 33, -9, -15, 19, -11, 14, -26, -26, 24, -56, -2, -14, -32, 16, -95, -9], [82, 3, -61, -26, 5, 44, -24, 39, 8, 18, -40, 6, 43, -32, -28, -31, 49, -58, -48, -64, -78, -66, 34, -10, 56, -18, 8, -10, 60, -14, -30, 27, 24, 11, -51, -56, -9, 3, 43, -17, 21, -2, 16, -1, -19, 4, 27, 75, 52, -33, -3, -56, -12, -69, 6, 18, -14, -78, 12, -1, -41, -7, -117, 38]]], [[[-3, -15, 0, -61, -25, -20, -8, -2, -14, 4, 58, -10, 21, 38, 8, -30, 30, 48, 1, 14, 7, 33, -42, 31, -88, 28, 25, 15, 42, -30, -7, -17, 13, 4, -10, -8, -36, 42, -10, -45, 9, -27, -40, -17, -5, -32, 28, 16, 23, -28, -63, 1, 22, -59, 5, -116, -25, -10, -15, -78, 12, 14, -4, -3], [13, 94, -19, -48, -12, 39, -68, -4, -3, -3, 89, -127, 52, -42, -34, 25, -15, 44, 13, 38, -50, -3, -45, -52, -19, 57, 18, 12, 46, -33, -12, -62, 29, -38, -29, -70, 16, -25, -36, -89, 1, -22, 32, -34, 35, -72, 6, -8, 13, 18, -55, -15, 29, -116, 64, -95, 27, 83, -26, -58, -82, -26, -64, 26], [21, 56, 5, -45, -16, -9, -25, -1, 4, -39, 28, -72, 27, 13, -31, 20, -17, 16, 2, 3, -5, 17, 10, -11, 64, 26, 37, -84, 30, 5, -3, -50, 25, 11, 1, -14, 69, -45, 28, -23, 11, 24, 114, -2, -29, 26, -38, -32, 54, 25, 17, 71, 52, -85, 19, -16, -6, 63, -3, -27, 27, 4, -26, -2]], [[-32, -15, -26, -4, -16, -53, -34, -22, -6, -1, 13, -22, -3, -2, 46, -45, 5, -9, -54, -16, 73, 31, -44, 48, -56, -22, -20, 118, 21, -15, -44, -14, -18, -54, 29, 33, -35, -4, -17, 54, 24, 19, 51, -15, 2, 27, 3, -28, 8, -33, 5, 39, 15, 24, -37, -101, -36, -2, 38, 45, 21, -14, 42, -45], [-18, 8, -31, -9, 50, 16, -62, 15, -16, -27, -55, 8, 61, -15, -3, -34, -27, 53, -55, 0, 42, 3, -52, -11, -41, 31, 17, 23, -19, -53, -90, -73, 10, -81, -71, -79, -63, -12, -53, -13, 11, -68, 25, 4, 76, 11, -19, 0, -27, 45, 25, -49, 116, 2, -36, -89, 19, 21, 6, 64, -77, 0, -39, -49], [43, 3, -20, -5, -1, -32, -3, 47, -7, -6, 25, 46, 126, -18, 23, -20, -44, 7, -46, -38, 27, 54, -7, 15, 41, -17, 24, -74, -41, 29, -28, -40, 21, -119, -67, 7, -35, 29, 29, 5, 49, 34, 89, -31, 53, 62, -104, -1, 40, 20, 47, -28, 36, -37, -76, 8, -12, 5, 79, 105, 44, -10, -32, -21]], [[8, 29, -52, 57, -7, -6, -6, 34, 58, 50, 33, -49, 4, -42, 4, 67, 37, 23, -10, -79, -13, -25, 20, -11, -12, -58, -70, 28, -40, 13, 22, 43, -35, 29, 3, 61, 9, -94, -31, 15, 41, 25, -39, -19, -38, -2, -56, 12, -19, -29, -7, 53, -52, 14, -21, 11, -47, -5, -1, -39, 5, -76, 50, 1], [0, -30, -40, -17, -6, -59, -35, 32, -20, 53, -29, 21, -5, 17, 25, -18, -18, 69, 15, 28, -1, -6, 36, 35, 21, -35, -59, -21, -51, -1, -53, -9, -27, -9, -20, -12, 1, -17, 5, -15, 5, -87, -64, 1, 23, 32, -41, 16, -43, -18, -22, 12, -6, 83, -13, 3, 11, -37, -37, -28, -57, 18, 60, -48], [58, 7, -40, 31, -11, -12, 13, 0, -1, 13, 3, 58, 2, 58, 5, -16, -50, -25, -18, -24, 6, 8, -12, 4, 43, -27, -19, -68, -10, 24, 16, -27, 33, 22, -77, 16, -35, 52, 21, 1, 11, 47, 19, -13, 11, 26, -48, -8, -50, 4, -4, -8, -24, 96, -24, 17, -15, 0, 33, 25, 61, -3, 76, -33]]], [[[8, -33, -31, 25, 29, -50, 24, -4, 13, 2, -10, 2, -45, 71, -29, 5, 61, 26, -86, -37, 31, -23, 18, -81, 19, -48, 0, 11, -44, -26, -44, -43, -3, 25, 11, -3, 41, -27, -23, -5, 21, 15, -11, 52, 3, -62, 6, 21, -33, 30, -74, -40, -13, 45, 84, -12, -38, 32, 15, -74, -28, -34, -54, 20], [-15, 2, -80, 44, -7, -32, 10, 23, 25, 29, -46, -4, -46, 70, -9, 127, -2, 6, -16, -5, 56, 12, -38, -27, -56, -4, -49, 53, -3, 3, -12, -23, 4, -2, -18, -51, -7, 33, 41, -34, 16, 52, 31, 35, 5, -20, -28, 23, -2, -27, -36, -69, -12, 35, 55, 38, -38, 10, 15, -64, -11, -1, -11, 14], [-24, 36, -41, -31, -8, -4, -6, -36, 10, 4, -16, -55, -30, 20, 49, 5, 20, -14, -37, -33, -66, 23, 83, -56, 13, 19, -18, -5, -10, -21, -5, -58, 11, 55, -42, -53, 17, -52, 62, -63, -64, -12, -10, -9, 1, -49, -11, 71, -29, 17, -81, -19, 48, -62, 25, 28, 4, 21, -9, -69, -11, -43, -9, 47]], [[3, 5, -5, 15, 10, 29, 37, -35, 52, 4, -59, -23, 38, -56, -49, -14, 27, -4, 13, -19, -58, -23, 50, -14, -2, -29, 68, -46, 15, 35, -21, -62, 7, 32, -53, -12, -3, -56, 25, 27, -1, 37, -34, 80, -15, -2, 33, 39, -55, 16, -14, -3, -64, -24, 36, 57, 66, 24, -19, 31, 6, -1, 35, 29], [-44, -95, -37, -7, 2, 39, 14, -11, 75, -10, -37, 12, -34, -14, 8, 48, 22, -46, 66, -10, -64, 20, -50, 41, -86, -9, 26, -64, 38, -58, -74, -11, 24, 37, -17, -24, 71, -47, 80, 3, 0, -39, 34, 18, -29, -18, 47, 28, -2, -6, -28, -40, -33, 29, 6, -11, 64, -9, 22, 1, -16, -39, 29, 19], [-25, -30, -14, -32, -22, -8, 15, -39, 55, 35, -20, -18, -41, -4, 26, 33, 31, -36, 26, -64, -42, 26, 52, -29, 16, 34, 68, -69, -2, -60, -16, -15, 71, -24, -54, -57, -4, -63, 20, -20, -77, -8, -32, 20, -7, -26, 83, 32, 42, 41, -20, -33, 13, 21, 8, -6, 25, 44, -19, 43, 8, -3, -17, 13]], [[-24, 13, -63, 81, 41, 21, 24, -9, 75, -25, -6, -22, 71, 0, 20, -12, 22, -61, 24, -27, -54, 17, 48, 30, 12, -15, 8, -39, -28, 41, 57, -25, 34, 21, -42, 54, 18, -28, 19, 58, -10, 16, -8, -28, -39, -67, 20, -18, -35, 5, -1, -48, -32, 29, -6, -18, 63, -35, -10, 63, -44, 51, 59, -9], [-36, -11, -39, 28, -63, 29, 57, 7, 43, 28, -20, -45, 43, 19, 16, 25, 52, -86, 41, -27, -38, 4, -8, 32, -22, -16, -21, -26, -33, -33, -23, 1, 61, 10, 16, -18, 42, 5, 22, 52, 7, -44, 23, -25, -17, -46, -12, -37, -18, -21, 20, -11, -57, -42, 17, 2, 103, -68, -21, 111, -17, 3, 35, -29], [5, 36, -65, -18, 15, -67, 13, 3, 8, -72, -1, -84, -31, -13, 34, 34, 77, -53, 26, 8, 9, -28, 60, -25, -26, 44, 28, 15, 4, 50, 35, 20, 59, -31, -24, -1, -6, -29, 20, 27, 54, -14, -31, 9, -43, -81, 11, -33, -13, -9, 2, -78, -48, -106, 60, -39, 47, -13, -15, -19, 16, 56, -6, 19]]], [[[-60, 41, 23, 57, 8, -28, 9, 24, 10, -18, 11, 6, 105, -3, -58, -16, -32, -29, 46, -80, 37, 7, 59, 37, -31, 47, 20, 5, 60, 57, -11, 3, 27, -12, -14, -57, -13, -54, -42, 30, 24, 90, -87, 92, 35, 29, -51, -37, -22, -28, 43, -14, -55, -52, 27, 14, -16, -37, 70, 103, -60, 6, 21, 100], [-127, -5, 1, 30, 4, 56, 53, -74, -45, -37, 76, 5, 29, 22, -30, -59, 4, -50, 8, -81, 39, 52, 69, 74, 29, 24, 71, -9, -5, 45, 45, -19, -9, -71, 32, -53, -12, 63, 9, -20, -30, 5, -38, 29, -25, 20, 46, -10, -28, -30, -90, -2, -22, 95, 50, 6, 51, 5, 64, 11, 57, -83, 11, 92], [-79, 26, 20, 33, 0, 75, -18, -20, 14, 3, -26, -46, 47, -62, -14, -45, -60, -87, -2, 54, 20, 16, 54, -8, -7, -52, 53, 23, 18, 58, 57, 49, 46, -4, 2, -47, -92, -81, 6, 0, -3, 7, -81, -60, -41, -72, 29, -12, -56, -29, -41, -23, -31, 80, 63, -37, 60, -35, -25, 66, -43, -27, -30, 112]], [[-74, 7, -11, 41, -14, -56, -32, 13, 8, 0, -20, -59, 79, -56, -3, 17, -53, 39, 44, -86, 53, -42, 88, -22, -22, 4, 14, -13, 21, -2, 41, -43, 3, -22, -6, -28, 27, 29, -48, 7, -19, 65, -35, 54, 101, -34, 2, 20, 37, -15, 39, -23, -43, 14, 29, 70, -29, -22, 66, 12, -25, 43, 37, 43], [-87, -34, -24, 16, -42, 6, -45, -87, -7, 7, -55, -2, 52, 6, 8, -4, 39, 21, -43, -66, -80, 49, 24, 81, 4, -23, 27, 7, -3, -11, 10, -61, -4, 13, 0, 17, 53, 61, -33, -36, -64, -7, 8, -8, 29, -20, 36, -11, 25, -26, -19, -19, 1, 34, 42, -11, 2, 11, 32, -18, 74, 30, 9, -25], [-59, 2, -49, 35, -30, 99, -3, -31, 41, 4, -36, 9, 67, -7, -1, 27, 7, 2, -14, -12, -48, -15, 77, 14, -37, -12, 32, 52, 23, 8, 44, -37, 12, 41, -56, 14, 11, -73, -30, 23, -5, 43, 5, -28, 35, -14, -3, 36, -21, -60, 9, -1, 22, 18, 59, -46, 76, -12, -57, 8, 4, -16, 2, 29]], [[-31, -55, 15, 25, -36, -49, 3, -50, 14, -6, -13, -100, -47, 29, -32, -8, 26, -3, -4, -43, 69, 8, 22, -47, 26, 5, -39, -37, -9, 9, 28, 52, 69, -23, 31, 57, -28, -47, -44, 31, 39, -9, -52, -94, 14, 53, 23, -27, -10, -18, -30, -10, -15, 43, 55, 29, -57, 35, 66, 27, 36, -52, -45, -12], [-4, -69, 4, -8, -33, 4, 6, -38, 21, -49, 9, -6, -51, 66, 3, 14, 123, -22, -35, -22, -17, 113, 22, 37, -4, -19, -12, 35, -2, 18, -24, -17, 115, 48, 25, 88, -6, -4, 19, 21, 8, -20, -44, -71, -26, 28, -28, -33, -5, 31, -3, 42, 39, -61, 69, -56, -17, 1, 33, 30, 115, -49, -25, -28], [-35, -23, 8, -9, -6, 13, 67, -51, 15, -47, -12, -3, -28, 8, -26, 12, 68, -52, -35, -5, -30, 7, 92, -22, -38, 2, -15, 42, -18, 5, 83, -84, 51, 50, -4, 80, -13, -34, 19, 31, 13, 25, -55, -64, -11, 4, -14, 2, 61, 17, -50, 60, 3, -5, 56, -44, 4, -14, -35, 20, 55, -66, 14, 4]]], [[[28, -20, 15, 2, -24, 7, -18, 12, 83, -45, -60, 55, -57, 49, -61, -41, 13, 63, 8, -11, 33, 13, 82, -12, -7, 37, -35, -31, -1, 26, -11, -5, -76, 69, -41, 8, 71, -30, -39, -52, 12, -23, -5, 42, 23, 58, 3, 42, -7, -58, -34, 12, -30, -36, 47, 71, 31, 4, 46, 19, 9, -34, 64, 28], [-14, -13, -41, 43, -5, -68, -10, 11, 109, -34, 19, 2, -24, 18, -36, -62, -51, 47, 77, 9, -27, -45, 75, 29, -83, -20, -3, -20, -79, -33, -20, 13, -47, 22, 14, 3, 59, 55, -15, -21, 45, -51, 67, -12, 9, 48, -38, 58, -11, 3, -36, 59, -1, 47, 17, -9, -4, 3, 20, 0, 2, 17, 0, -33], [-4, -17, 10, -31, -10, -42, -14, 46, 90, 22, 12, -6, -53, -29, 8, -38, 15, 9, 5, -32, -22, -1, 15, 43, -30, -5, -11, 25, -9, -21, 7, 46, -38, 4, 37, -3, 52, -2, -6, 57, -3, -44, 87, -28, 23, 71, -31, 2, -20, 7, -32, 5, -6, 76, -18, -36, 23, 51, 41, -20, -10, -18, -99, -14]], [[51, -10, 51, 17, 42, -51, 30, -60, 4, -16, -10, 22, 1, 20, -14, 10, 40, 59, 32, 2, 52, -22, 9, -40, -5, -17, 28, 4, -47, 25, -18, -16, -21, 32, -56, 20, 36, -20, -57, 20, 35, 11, 16, -5, 21, 6, -49, -1, -23, -39, -30, 3, -12, -23, 31, -17, 17, -6, 23, -16, -54, 27, -24, -11], [-29, -14, 25, -17, 13, -81, 37, -61, 38, 49, 40, -3, 76, 56, -19, -29, -36, 53, -22, -35, -11, -61, -11, 5, -14, -7, 16, 12, -127, -40, -26, -80, -56, -51, -17, -27, 7, 58, 6, -6, 22, 8, 25, -71, 28, -32, -33, 44, 0, -42, 4, 35, 0, -17, 7, -3, 21, -34, -4, -19, -11, 10, -37, -85], [-18, 9, 35, -38, 37, -36, 29, -4, -19, 10, 21, -13, 22, 35, 3, -5, 4, 3, 0, -39, 41, 55, 11, -35, 13, 4, -25, 24, -46, -37, -6, -65, -30, -13, 7, -6, 24, 19, -23, 20, 28, 12, -4, 22, 0, 1, -23, 30, 20, -45, 46, -5, -20, 81, 42, -8, -16, 6, 17, 6, -6, 3, -95, -62]], [[-27, -32, 22, 49, 11, -8, 70, -4, -37, 18, -1, 52, 8, 25, -15, 12, 73, 47, 9, 9, -41, 23, 6, 31, 28, 41, 34, -14, 9, 22, 0, -49, 21, 3, -42, 50, 24, -23, -25, 20, -26, 38, -22, 25, 3, -11, -22, -49, -21, -61, -12, 4, 22, -21, 23, 17, 21, -39, -9, -33, 20, 68, -38, -29], [-67, -53, -2, -21, -1, -53, 10, 9, -6, 30, 66, -29, 66, 4, -98, -6, 43, -19, -43, -15, -41, -8, -4, 31, 29, -2, -2, 21, -32, 9, -27, -41, -9, -45, -38, 21, 13, 62, -56, 17, -10, 7, 10, -59, -33, 16, -19, -6, 21, -45, 13, 17, 19, -8, 23, 21, 59, -46, -31, -27, 53, 72, -16, 10], [-105, -27, 29, 14, 20, -42, 15, 21, -22, 6, -13, -11, 26, 12, -30, -39, -16, 42, -37, 9, -16, 49, -30, -2, 14, 18, 40, 25, 7, -21, -37, -78, -9, -8, -4, -25, 32, -15, 17, 18, 37, 11, -23, 60, -34, 31, -7, 12, -17, -40, 9, -41, -25, -6, 37, -1, 6, -30, -15, -26, 71, 56, 3, -12]]], [[[58, 8, -7, -8, -30, 17, -29, -48, 35, 33, -4, 61, -17, 5, 16, -30, -9, 33, -28, 7, -54, 19, -3, 36, -22, -13, -11, -14, 4, -26, -16, -12, -5, -39, -3, -11, 3, -15, -28, 2, 12, -33, 7, -12, 13, -15, 24, -12, -29, 8, 45, 3, 11, 6, 13, 59, -16, 12, -4, 10, -54, 3, 22, 9], [46, -10, 15, -18, -28, 6, 16, -20, -12, -10, -7, 28, -34, -19, -4, 2, 10, -27, -19, -22, -49, 3, -11, 127, -35, 8, 0, -27, -37, 2, -7, 14, -28, -39, 24, -20, -28, -37, -5, 13, 17, 7, 81, -4, -33, 24, 22, -38, -9, 5, 10, -6, -26, -3, -29, 120, 11, 52, 16, 16, 4, -2, -28, 24], [45, -13, 22, -6, -49, 4, 30, -61, 11, 16, -16, 21, -10, 29, 0, 19, -28, -10, -7, -19, -51, 6, -7, -46, -43, 15, -3, -31, -17, -14, -8, -23, -43, -13, -24, 10, -10, -1, -6, 17, 3, -9, 37, -12, -36, -34, -9, -32, -2, -2, 62, -38, -9, 23, 6, 74, 2, 6, 12, 4, -27, 20, -14, -11]], [[12, 35, 3, -36, -10, -18, 2, -10, 71, -20, 10, 51, 9, -16, 21, -25, -15, 23, -27, -30, -57, 0, 3, 12, -20, -50, -11, 3, 14, -23, 39, 33, -8, 2, -30, 19, 17, -6, 11, -18, 35, -62, -33, -21, 7, -10, 15, 27, 15, -25, -6, -3, 32, -8, 32, 26, 46, -9, -47, 7, -22, 14, 33, 5], [-6, 31, -1, -24, 87, -48, 22, 51, 29, -45, -1, -25, 57, 15, -3, 32, 1, -40, -65, -51, -6, -13, 46, 55, -23, -38, 12, 5, -15, 19, 56, -9, -37, 23, 9, -1, -53, -16, 31, -5, 19, -12, -18, -22, -18, 25, 29, 30, 17, -28, -20, -67, -10, -24, 10, 22, 21, -38, -19, 30, 5, -39, 10, 6], [25, 47, 1, 1, 17, -56, 7, 8, 42, -41, -11, 25, 63, 26, 21, -19, -13, -10, -7, 8, 7, -12, 42, 15, -70, 41, -2, -55, -54, -12, -9, -9, -39, 13, 6, 24, -14, -25, 52, -23, -43, -40, -15, 54, 23, -23, 7, 12, 5, 16, 29, -40, -36, -12, 12, 35, -16, -23, 33, 6, 10, 4, 40, 21]], [[8, 57, -9, 42, 9, -72, -8, 5, 30, 0, -80, 3, 6, 36, 64, 6, -23, -3, 40, -15, -33, -5, -33, 4, 14, 0, -51, 26, -17, -53, -3, 11, -17, -25, -8, 16, -33, -3, -3, 20, 7, -22, -24, -16, -11, 54, -22, 13, 45, -55, 8, -14, 25, 35, 45, -36, -3, -27, -47, -24, -20, 11, 37, 59], [-37, 44, -21, 3, 69, -27, -10, 33, 30, -36, -74, -37, 72, 38, 54, 78, -22, -16, 49, -36, 26, -15, 2, -22, 3, -32, 30, 30, -63, -5, 5, -13, -22, -6, -1, 59, -62, -6, -13, 18, 57, -5, -58, 6, -25, 35, 40, 34, 27, -17, -61, -29, 43, -34, 39, 21, -50, -63, -31, 3, 32, -38, 18, 30], [12, 58, -14, 24, 60, -65, 1, 26, 9, -9, -59, -43, 54, 10, 37, 32, -15, -7, 76, -47, 30, 22, 13, -20, -44, 8, -45, -24, -28, -28, 7, -15, 4, -48, 12, 1, -40, -36, 24, -17, -28, -13, -8, 50, 12, 46, 12, 36, 24, 6, 5, 17, -11, 73, -9, -25, -37, -28, -26, -20, -12, -39, -14, 61]]], [[[0, -26, -15, -2, -11, -27, 38, 94, -34, -37, -37, -12, 22, -24, 52, 14, -50, -9, -36, -39, 14, -50, 71, -19, -62, 46, -36, -49, -10, -39, 83, -29, -2, -39, 87, 7, -86, -31, -12, 4, -61, -93, -72, -7, -52, 38, 71, -32, -91, 27, 38, 4, 7, 42, 35, 38, -2, 37, 29, -5, -14, -45, -47, 36], [54, -23, -3, 48, -53, 6, 32, -34, 40, -54, -19, 2, -5, 15, 75, -7, -5, -5, -31, 30, -39, -42, 102, 2, -22, -7, 13, 14, -18, -37, 47, 2, 20, -127, 8, 24, 23, -36, -6, 80, -32, -93, 18, -44, 6, -26, 1, 93, -68, 13, 83, -17, -11, -36, -24, 83, -17, 3, -6, 66, -12, 40, -67, -52], [42, -15, -27, 95, -57, -29, 0, -19, 80, -4, -35, -32, 67, -40, -21, 0, -14, -16, -48, -22, -16, -63, -38, -11, -8, 3, 54, -17, -53, -15, 70, -36, 2, -112, -63, -20, -18, -38, -13, 2, 1, -69, 28, -28, 7, 5, 25, 34, 45, -9, 63, -23, 36, -37, -88, 50, 68, 54, -48, 40, 57, -13, -11, 8]], [[-44, 34, -40, 6, -11, 23, -7, 44, -23, -28, 58, 38, -15, 7, -71, 10, -96, 40, 19, -26, -16, -81, -8, -32, 11, 1, -20, -22, -18, 7, 14, -21, -18, -2, 32, -28, -43, -6, 62, 18, -20, -35, -90, 122, 28, 42, 29, -19, -7, -21, -27, 33, 28, -8, -36, 52, -58, 51, -9, 22, -50, -15, -26, 30], [-33, 49, -19, -5, -14, 50, -15, -18, -56, -45, 74, 91, 30, 19, -47, -21, -27, -37, 11, 10, -49, -119, 102, -7, 28, 14, 11, 46, -25, -36, -3, -11, 32, -38, 38, -5, -20, -21, 35, 30, -7, -45, -59, 91, -4, 42, -6, -64, -26, 0, -25, -75, 8, 7, 44, 5, -5, 24, -13, 32, -1, 41, 15, -10], [14, 87, -21, 48, -29, 12, -19, -16, 15, 34, 19, 23, 81, -26, -56, 26, -7, 21, -10, 30, -24, -55, -18, 18, -37, 1, 51, -12, -72, -16, 24, 8, -22, -17, 23, -9, -15, -35, -20, 0, -4, 13, 5, 18, -12, 15, -41, -66, 29, -13, 28, -78, 18, -19, 1, 22, 77, 7, 35, 23, 56, 2, 26, -14]], [[1, -20, -16, -45, 2, 58, -18, 118, -27, 51, -14, 45, -62, 23, -53, 12, -81, 31, -48, -9, 25, 23, -18, 8, -38, 14, -29, -26, -89, 75, -53, -4, -50, 19, 70, -22, -11, 9, 34, -51, -10, 38, -57, 2, 33, -45, -41, -54, 68, 51, -2, -24, 26, 110, -16, -27, -29, 26, -61, 71, 11, -77, 56, 28], [-37, 33, 29, -61, -61, 75, -31, 15, -73, 56, 3, 104, -37, -50, -68, -12, -25, -18, -35, -37, 3, -40, 67, 24, -6, 45, 22, 46, -63, 43, -20, 16, -39, -2, 61, -19, -15, 11, 26, -26, 38, -30, -56, -25, 10, -12, -43, -41, 47, 22, -19, 5, 22, 32, 41, -60, 5, 2, -35, 67, 49, -2, 40, 32], [48, 63, 58, -74, 31, 7, 58, 3, -41, -24, -61, -23, -24, -48, -67, 79, -3, 6, 6, -34, -14, 10, -56, -23, -18, 12, 47, 0, -75, 37, -30, -64, -114, -19, 14, -12, 5, -66, 1, 10, 17, -53, 5, -36, 5, 10, -37, 12, 17, -9, 4, -51, 30, 32, -29, -56, -3, -28, -30, 10, 26, -43, 25, 18]]], [[[70, -40, -11, -7, -37, 3, 0, -16, 116, -30, -26, -26, -18, -76, -26, 37, -41, 16, 58, -1, 25, -9, 29, -66, -89, 41, -28, -41, 13, 47, -42, 1, 55, 4, -19, -30, 41, 33, 11, 42, 5, 4, -51, -21, 17, 10, -5, -47, -6, -7, 15, 92, 0, 4, 40, -6, -16, -29, 59, -25, -5, -30, -61, 31], [16, -27, -22, -14, -37, 37, 72, -6, 102, -41, 11, -65, -38, -71, -58, 61, 31, 8, -6, -67, -46, 25, 4, -103, -84, -35, 43, -45, 71, -9, 12, 17, 52, 28, 6, -36, 34, 37, 11, 88, 21, 26, -62, -32, -35, -22, 31, -58, -67, 11, -40, 51, -52, 21, 20, -22, 15, 11, -41, -10, -48, 1, -15, -3], [52, -11, 41, 14, 22, 10, 27, 11, 55, -8, -48, -80, -21, 6, -72, 74, -24, 28, 80, -41, -3, 61, -3, -45, -43, -12, -49, -73, -13, 4, -54, -36, 113, 31, 34, 58, -5, 13, -15, 73, -43, 24, -10, -3, -21, 0, -3, -42, -57, 30, 6, 36, 0, 29, 1, 30, 41, 9, -17, 3, -62, -8, -1, -43]], [[20, 26, -20, -6, -46, 71, 37, 29, 47, 3, 0, -13, 0, 1, -69, 16, -3, -41, -25, 31, -24, -7, -12, 78, 20, 35, 21, 10, 11, -21, 16, -41, -36, 10, -25, -18, -15, 47, -6, 2, 59, -12, -30, 19, -70, -45, -20, 11, -3, -13, 24, 48, 37, -27, 85, -3, -50, -48, -19, -13, -66, 16, -75, 51], [-29, -47, 3, 26, 1, 57, 42, 58, 70, 14, -1, 29, -69, 57, -17, 38, -30, -17, -33, -59, -102, 29, 49, 54, 17, -9, 84, -62, -12, -44, 4, 40, -60, 3, -29, -6, -11, 38, 20, 29, 54, -1, 17, -32, -58, -53, 34, 4, 1, -24, 7, -28, 2, -40, 2, 57, -17, -33, -95, 9, -37, 35, -3, 73], [13, 34, -18, -18, 1, 7, 13, 56, -14, 64, 17, -7, -5, 35, -33, 64, -57, 57, 7, 1, -37, -6, 43, -6, 18, 18, -10, -18, -6, -55, -10, -76, 16, -2, -8, 14, -39, 30, 32, -6, 32, 17, 15, -74, -24, -52, 3, 43, -3, -50, -1, -2, 5, -30, 51, 64, 59, -36, -26, 15, -18, 50, -20, 54]], [[22, 105, 6, 48, -14, -14, 70, 22, 4, 21, -38, -15, 127, 55, 28, 25, 22, -51, 31, 9, -18, -23, 25, 47, 11, 2, 109, -71, 19, 34, 39, -77, 0, 13, -56, -48, 20, 32, 26, -67, -66, -49, -64, 49, 8, -8, 6, -2, 14, 77, -20, -7, 22, 32, 23, 52, -55, -62, -15, -14, -37, 6, -55, 3], [33, -17, 61, 65, -8, 21, 14, 21, 45, 47, -38, 5, 67, -2, 49, -45, 56, -14, 106, 16, -39, 89, 28, 51, -41, -4, 84, 14, 6, 61, 13, -49, 34, -5, -61, 5, 3, 6, -4, -86, -67, -72, -63, 13, 30, -40, 38, 55, 63, 52, -26, -37, 56, -42, -56, 18, 60, -51, 2, -19, 9, 36, -39, 61], [46, 36, 5, -8, -9, -38, -14, 2, -12, 32, -31, -48, 40, -104, 40, 16, 29, -53, -7, -17, -11, 61, 21, -23, 16, -108, 53, 30, 23, -9, 91, -53, 16, -19, -5, 4, -58, 6, -31, -49, -30, -7, -101, 67, 34, -5, -30, 61, -2, 11, -115, 15, 23, -48, -13, 35, 100, -69, 5, 60, -17, -2, -53, 39]]], [[[65, 8, -12, -31, -26, -19, 20, -55, 2, 19, -46, 47, -68, -74, 56, 25, -27, 24, 1, 17, -5, 0, -48, -78, -14, -65, 56, -16, 7, -92, 0, 29, 35, -1, -70, -9, 16, -22, -13, -2, 66, -99, 23, -37, 0, -12, 27, -34, -23, 7, 9, 13, -25, 8, 41, 27, -36, 57, 9, 7, -6, 10, -14, -39], [6, -3, 3, -28, -38, -34, 82, 9, 45, 9, 33, 0, 9, -21, -22, -15, -33, 60, -38, -11, 64, 35, -35, 6, -6, -22, 57, -8, 81, 17, 63, -26, -2, 5, -84, -47, 53, -28, -74, -6, 59, -10, -11, -38, 32, 55, 17, -47, -16, -36, -23, 18, -3, 44, -25, 18, 3, -27, 39, -11, -48, -7, 16, -11], [14, 1, -48, -41, -10, 11, 60, 28, 67, -10, 40, 15, 23, -30, -52, -29, -85, 40, -58, -42, 30, -1, -54, -19, 56, 42, 24, 42, 51, 77, -9, -28, 74, 5, 1, 11, 41, -45, -35, -49, 102, -15, 33, -24, 22, 55, -50, -26, 17, -8, 11, 36, 26, 26, -13, 0, -35, -34, -8, -14, -70, 10, 47, -25]], [[21, 45, 21, -28, -15, -16, 70, -38, -16, 2, -41, 0, -22, -76, 95, -26, 37, 0, 30, 41, 24, -30, -23, -22, -10, 20, -14, -62, -40, -96, 19, 68, -2, -22, -54, -8, -28, -42, 11, 46, 62, 5, 66, 23, 27, -7, 9, 16, 51, 4, 87, -36, -10, -109, 34, 49, 1, 24, 50, -49, -21, -15, -41, 57], [-86, -46, 42, 21, -11, -4, 10, 18, 20, -37, -39, -4, 39, 25, 36, -43, 49, -27, -5, -36, -4, 19, 23, 16, 4, -17, 55, 0, 81, 46, 40, -23, 90, -14, -16, -49, -31, -32, 23, 40, 25, 11, -29, 18, 3, -14, 23, -25, 30, -23, 30, 25, 49, -9, -62, -9, 58, 12, 21, -41, -6, -1, -45, 3], [-21, -69, -39, 7, -21, 2, 29, -3, -30, -24, -42, 31, -6, -5, -33, -17, 67, 28, -18, -4, 18, 24, -14, 6, -24, 48, 15, -9, 46, 15, 17, -42, 31, 27, 13, -69, 50, -23, 33, -29, 35, -49, -9, 9, 50, 54, -37, -19, 64, 28, 1, -27, 26, 6, -42, -55, 19, 7, -46, -103, -19, -2, 44, 11]], [[50, 73, -16, -2, 1, -21, 34, -16, 1, -80, -62, -62, 1, -10, 30, 0, 67, -54, 47, 30, 18, -31, -23, 13, 37, 26, -67, -76, -1, -52, 15, 19, -49, -2, -30, 38, -41, 37, -12, 59, -15, -21, 18, -62, -2, -61, 36, 2, -21, 4, 83, -31, -19, -34, -21, 48, 31, 37, 42, 22, -32, -63, -23, 7], [7, -44, -9, -51, -48, 1, -35, -9, 27, -51, -73, 21, 12, 42, 68, -38, 86, -102, 74, -30, 23, 40, 63, 8, 16, 7, 4, -31, -2, -19, -32, -65, 43, -12, 27, 43, -15, 2, 26, -22, -59, -38, 17, -70, 7, -55, -1, -31, 25, 44, 27, 31, 3, 10, -46, 32, 92, 8, 16, -8, 60, -60, 1, -33], [-5, -18, -43, -1, -53, 16, -74, -51, -17, -25, -51, 23, 14, 22, 33, -41, 98, 1, 62, -50, -62, 72, 35, 64, 28, 85, -7, -38, 65, 25, -39, -6, -24, 23, 14, 6, 52, -39, 32, -25, -99, -45, 22, -34, 5, 34, -101, 44, 22, 56, -7, -13, 47, 8, -48, -9, 23, -1, 8, -36, 56, -95, 127, -41]]], [[[-65, -2, 8, 51, -7, -51, -11, 16, 11, -23, -96, -20, 24, -23, -32, 10, -4, 7, -36, 70, -71, -31, -2, 115, -59, 32, 30, -49, 81, -36, -23, -13, 24, 2, -48, -26, -11, -18, -8, -45, 8, -29, 26, 17, 17, 4, -17, 39, 57, 34, 4, 14, 106, 42, -21, -2, 30, 15, -82, 27, -77, 19, -1, 63], [-1, 11, 18, 5, -2, -16, -15, 17, 10, -6, -49, 23, -30, 33, -20, -3, 12, -41, -14, 13, -7, -14, -5, 29, -14, 71, -21, -47, 20, -74, -22, -73, 31, -6, -12, 96, 82, -70, 13, 22, 25, -23, 55, -9, -6, 3, 9, 21, 17, -30, 7, -27, -11, 23, -34, -63, 0, -20, -38, 0, -43, -2, -18, 37], [28, 9, 61, 14, -8, 41, 63, 62, -38, -11, 42, -8, 18, 9, 5, 28, -26, -2, -13, 52, 35, 44, 8, -26, 36, 19, -30, -13, -29, 16, -6, -28, 0, -3, -31, 56, -34, -13, -49, 18, -26, 17, 60, 26, 14, 25, -4, -51, 50, 5, 59, -11, 12, 28, -17, 53, -40, -32, -67, -5, -111, -18, -37, 25]], [[-23, 21, 23, 47, 25, 4, -27, -1, 63, -59, -39, -22, -25, -21, 16, -8, -9, -38, -14, -43, -72, 59, 46, 14, -7, 34, -12, 41, -4, -16, 11, -45, -46, -60, -16, -15, 26, -38, -36, -26, 36, 5, 21, 11, 38, -39, 56, 26, -23, -55, 1, -30, 10, 11, -38, 6, -17, 36, -4, 45, -49, 46, 89, -36], [18, 15, 79, 21, -23, 9, -57, -4, 25, -41, -40, 17, -31, 71, -14, 40, 1, -48, 6, -2, 42, 67, -16, -12, 36, 21, -3, -19, 7, -35, -52, 65, -35, -80, 13, -4, -21, -10, -41, -5, -13, -25, 8, -23, 5, -38, 33, 80, -26, -21, 28, -24, -27, -7, -32, 12, -41, 29, -36, -40, -52, 0, 37, -23], [72, 29, 21, 33, 7, 15, -16, 42, 5, 30, -53, -17, -57, 35, 4, 66, -6, 23, 20, 51, -22, 53, -42, 22, 6, -55, -28, 46, 4, -24, -11, 30, -78, -28, 39, 31, -107, -49, -16, -30, -12, -22, 27, 25, -33, 20, -23, 110, 68, 23, -3, -22, 44, -52, 16, 13, -46, -24, -20, -66, -86, -14, -15, 33]], [[-47, -3, 6, -26, 3, -5, -3, -30, 24, -42, 8, 25, -112, 8, -6, 70, -21, 67, 28, 1, -24, 85, -16, -16, 42, -71, 23, 1, 34, -20, -55, -3, -13, -8, 23, -5, -26, 9, -46, 28, 24, -50, -13, 12, 61, -39, -41, -20, 88, -5, 25, -37, 24, -7, 30, 48, -8, -21, 40, -22, -127, -38, -3, -13], [-11, 7, 25, -16, -46, 3, -23, -6, 38, -60, -14, 7, -17, 28, -13, 88, -26, 0, 20, 59, 17, -13, -17, 1, 8, 16, -9, 8, 4, -31, -20, 17, 70, -38, 14, -69, 3, 30, 8, -26, -20, -38, 15, 86, -22, -69, -57, 45, 75, 46, 18, -9, 56, 18, -39, 46, 45, 15, -5, -58, -58, -16, -48, -25], [-6, -20, 21, -18, 26, -11, 7, -14, 4, 18, 10, 50, 1, 26, -3, 37, 17, -29, 18, -27, 22, -4, 50, -54, -35, 6, 45, 25, 35, 33, 3, -21, 11, -65, 0, -10, 72, -34, -27, -22, 4, -103, 21, 21, -68, 25, -17, 33, 46, 37, -71, 35, 21, 10, -36, 18, 23, 37, -22, 15, -15, -25, 4, -42]]], [[[53, 30, -62, 5, 1, 42, 33, -15, -52, -52, -32, -11, -88, 53, -21, 89, -63, 31, 18, -15, 6, -14, -38, -68, -7, 28, -82, -30, 41, -8, 9, 20, -48, -33, -28, 25, -33, -28, 21, -3, -44, -28, 32, -36, -4, -26, -42, 30, -14, -12, 59, -23, -10, 0, 35, -29, -6, 45, 50, 66, 5, -59, 107, -47], [-13, -26, -49, -58, 49, 0, 12, -26, -46, -34, 9, 13, -33, 67, 43, 16, -68, -22, -3, -61, -1, 4, 0, -4, 27, 13, -61, -25, -45, 28, 1, -7, -42, -78, 11, 21, -3, 0, 15, 63, 35, -66, 91, -35, -50, 3, -24, 33, -44, -31, 20, 12, -28, -11, -3, -13, -8, 67, -12, 58, -85, 28, -8, 4], [-1, -3, -43, -55, -49, -2, -12, 15, -68, -39, -29, -17, 72, 32, 70, 48, 1, -51, -80, -72, 14, 42, -21, 33, 28, -5, 43, 12, -2, 9, -16, -28, -20, -33, 46, -26, 15, -34, 30, 120, -67, -38, 23, 2, 41, 80, 21, 0, -38, -51, 62, 56, 26, -47, 7, -3, 1, 40, 18, 61, -80, -44, -52, 27]], [[124, -7, -25, 69, -17, 40, 41, -25, -4, 25, -23, -15, -49, 39, -7, 102, -53, 21, -1, -32, -32, 13, 10, 2, -20, 11, 12, -88, 7, 13, 47, 41, 2, -30, -25, 31, -10, -15, -30, 9, -23, -4, 33, -7, -27, -3, -23, -21, -41, 4, -3, -59, 43, -61, 25, 11, -34, 12, -32, 3, 127, 10, 56, -35], [52, -3, -27, 38, 36, -14, 22, -34, -20, -1, -42, 54, 2, 35, 64, 57, -66, 5, -27, -11, -61, 14, 39, -9, 10, -31, 12, -27, 16, 8, 6, 8, -56, -53, 29, 12, -8, 11, 35, 38, 66, -17, 69, -51, -50, 14, -4, -58, -4, -27, -54, -47, 67, -45, 1, 42, -23, 38, -21, 31, 70, 55, -27, -39], [14, -21, -93, 42, -32, -4, 7, 4, -11, 11, -10, 33, 54, 52, 35, -11, -80, -16, -101, -38, -34, 17, -7, -11, 63, -44, -10, -23, -39, 48, 42, 39, -23, -46, 46, 27, -8, 0, 84, 28, 32, 10, 25, -55, -16, 7, -26, 19, 30, -8, -36, -77, 12, -62, 40, 15, -19, 3, 13, 51, 0, -12, -68, -36]], [[-1, -13, 11, 32, -37, 22, 30, -11, 29, 63, -18, -19, -16, 12, 34, -12, 41, 16, 15, -22, 21, -9, 28, -12, -11, -19, -4, -77, 35, -13, 49, 20, 70, -75, -9, -36, -81, -13, -3, 28, 0, -50, -21, 78, -10, 28, 15, 0, 16, -29, -29, -23, 41, -74, -15, -16, 10, -55, -32, -77, 26, 24, -42, -63], [37, 5, -10, 11, -18, -43, 12, -26, 60, 39, -25, 13, 32, -33, 45, 13, 64, 12, 7, -18, 15, -41, 39, 2, 18, 1, 16, -32, 9, 5, 18, -77, 47, -4, 14, 16, -19, -16, -3, 36, -7, -38, -8, 54, -9, -58, 60, -58, -64, -14, -59, -21, -14, -78, -3, 20, -3, -11, -9, -87, 33, 28, -31, -20], [-10, -45, -15, 1, -29, -39, 25, -11, 13, 81, 44, -3, 57, -34, 18, -11, -55, -31, -37, -13, -72, -10, 5, 11, 61, -2, -1, -28, 26, 60, 44, 26, 62, -4, -16, -15, 11, 39, 0, 0, 37, -34, 3, -12, -44, -74, 57, 6, -20, 7, -14, -72, 51, -44, -3, 18, -1, 3, 9, -85, -16, -3, -77, -2]]], [[[19, 2, -88, -73, 28, 19, 27, 19, -33, 50, 36, 58, -33, 29, -32, -19, -10, 17, 1, 6, 8, -44, -4, 4, 70, -29, -15, 81, 32, 16, 2, 43, -32, 24, -9, -2, -76, 35, 95, -29, -9, 27, 33, -47, -80, -23, 14, 16, 32, 1, -70, -6, -51, -31, -56, 42, -25, 59, -34, 50, 32, -17, -108, 49], [-31, -9, -40, -34, 40, 1, 19, -15, -14, 60, -29, 3, -90, -2, -20, -3, -34, 22, -10, -45, -34, -40, 38, 23, 58, -24, -51, -17, -20, 17, -31, 9, -83, -13, -13, 56, -79, 69, 35, -33, 9, -45, -19, -38, -30, -41, 44, -8, -45, -33, -61, 8, -15, -5, -73, -30, -40, 115, -63, 36, 29, -64, -8, 20], [61, 12, -60, 21, -23, -10, 44, -24, -32, 72, -28, 12, -12, 6, -11, 50, -52, 84, 86, -19, -23, -87, 22, -2, 91, -63, -6, 27, -5, 0, -36, 4, -20, 55, 41, 64, -9, 18, 9, -5, 49, -18, -2, -2, -4, 27, 23, -75, -102, -10, -93, 22, -10, 48, -57, -32, -115, 66, -34, 27, 0, -68, -37, 53]], [[-27, -57, -6, 28, -40, -10, -11, -31, 8, 72, 19, 27, 42, 3, -28, 42, -30, 92, -25, 55, -22, 48, -6, -105, -15, -12, -14, 17, -13, 6, -38, 68, 10, -40, -12, -3, -10, -27, 16, -5, -7, 48, -20, -41, -68, 11, 0, -33, -29, 7, 28, 3, -13, -4, 43, 49, -28, 27, 17, 35, -65, 7, -34, 18], [-17, -64, -15, 13, -14, 58, 10, -5, 9, 61, -6, 3, 62, -16, 7, 29, -16, 58, -11, -3, -43, 111, -42, -30, 26, 39, -56, -52, -75, 21, -46, 46, 32, -46, -14, -46, -65, 26, 21, -21, -31, -12, -23, -59, 12, -26, -9, -49, 7, -6, 47, -28, 22, -17, 5, -5, 101, -33, 52, -25, -21, -18, 49, -33], [16, -84, -7, 10, -38, 39, 18, -21, -16, 88, 19, 14, 12, 8, 33, 39, -97, 83, 15, -51, -21, -35, 11, -59, 10, -19, -22, -13, -11, 5, 15, 14, 10, 6, 9, -3, -35, -32, -25, -1, 46, 22, -20, -17, -28, 4, 17, -38, -28, -5, 8, 63, -38, 45, 56, 13, 0, 31, 61, -26, -24, -44, 76, -8]], [[-20, -45, 7, 44, -54, -43, -1, -21, -17, -47, 9, -14, 14, 78, -10, 10, -14, 46, -71, 41, -12, 33, 19, -74, -24, -64, 20, 52, 28, 17, 1, -55, 82, 36, 45, 69, 40, -54, -13, 79, -11, 30, -1, -40, -60, -51, 24, -9, -32, 2, -39, 6, 3, 0, 0, 19, -97, 30, 10, 48, 28, 11, -8, 6], [-66, 1, 11, 20, -10, 43, 10, 34, 68, 12, -4, 15, 4, 59, -9, 24, -8, 51, -40, 70, -34, 45, -7, -27, -1, 7, 3, -27, -13, -10, -18, 0, 127, -23, -17, -11, -23, -39, 2, 43, 27, -22, 6, -37, -44, -14, 28, -38, 2, 49, -42, -38, -30, 7, 63, -6, 79, 51, 17, 13, 41, 9, 20, 27], [16, -29, -7, 22, -1, -23, -1, -18, 64, 17, -37, -2, 24, 16, 15, 10, -58, 48, -29, 4, 6, -26, -32, -22, 11, 6, -21, -40, -18, 39, 24, -43, 90, 10, -10, -36, 48, -14, -3, 1, 49, -58, -40, 25, -5, -6, -29, -51, 11, -11, -35, 21, -51, 42, 10, 15, 59, 34, 29, 3, 61, -3, 50, -16]]], [[[-114, -44, 0, -45, 13, 41, -42, 44, 18, -10, -15, -91, -6, -18, 27, -68, -33, 14, -30, 9, -82, 19, 22, 28, -71, -20, 8, 45, -24, 60, -20, -3, -14, -51, 79, -36, -27, -28, -53, -3, -45, 49, -65, -19, 7, 41, 7, 41, 26, 50, -77, 2, 20, 45, -18, 38, -4, -31, 20, 56, 1, -13, 44, 28], [36, -65, 39, -7, -38, 44, -33, 30, 8, -8, -39, 33, -59, 9, 38, 26, -5, 2, 7, -4, 26, -9, 10, -38, -51, -13, -10, 0, 11, -11, -43, -9, -22, -15, 86, 23, -43, -8, -12, -27, -9, 86, -4, -46, 51, 42, 41, -18, 4, 62, -14, -3, 28, 25, 12, 56, 13, -11, -4, 14, -65, 5, -13, 44], [20, -52, 23, -35, 29, 33, -28, 29, 53, 30, -2, 25, -52, -30, 14, -9, 32, 7, -8, 7, 29, 4, -54, -80, -55, 6, 93, -37, -7, 24, -46, -87, -10, 32, 1, 27, -17, 8, 18, -30, -33, 50, 1, 28, 52, 23, -1, -19, -22, 27, -26, 64, -14, -8, 25, -2, -3, 64, -41, -25, 35, 49, 0, 9]], [[-27, -51, -56, -41, -31, -32, 9, 42, -7, 3, -3, -29, -28, -19, 34, 12, -44, 16, 28, 42, -73, -29, 37, 23, -27, -19, -7, 87, 28, -4, -29, -22, 42, -1, 65, 19, 46, -10, -9, 5, 15, 12, -36, -1, -2, -19, -4, 30, -13, 17, 6, 3, 49, 48, -1, 73, -9, -16, -1, 8, 21, -40, 39, -46], [39, -127, -9, -14, -30, 36, -30, 14, 48, -38, 30, -27, -21, -30, -2, -28, 24, -46, 42, -6, -19, -2, 0, -40, -16, -47, -21, 16, 35, -13, -15, 12, 32, 2, 1, 4, -30, -5, 57, 29, 17, 58, -23, -35, 65, -6, 39, 6, 78, 42, 9, -27, 57, 66, 43, 29, 42, -44, 16, -20, -19, -59, 41, 16], [20, -38, 35, -30, 41, 30, 24, -3, 19, -31, -23, 21, -1, 8, -38, -9, 17, 19, -10, -6, -11, -2, -12, -52, -32, -26, 75, 3, 31, -16, -9, -46, 47, 17, -35, 21, -22, 9, 63, 65, 2, 41, -3, 14, 22, 13, 13, -32, 43, -21, -22, 10, 15, 82, 20, 5, 14, -15, 20, 20, -49, -34, 70, -6]], [[10, 10, 48, 21, -23, -77, 46, -12, -1, -8, -4, 50, -23, 9, -66, 62, -72, 47, 17, 4, -34, -11, -37, -29, 52, -5, 28, 80, 22, -52, -20, -25, -19, 34, 31, 78, -3, 87, -47, 52, 4, -41, -9, 11, 11, -18, -33, 24, -41, 15, 27, 75, 23, -38, 18, 68, 1, 1, 18, -22, -26, 39, -52, -55], [1, -81, -17, -19, -125, 3, 6, 50, 58, -3, -46, -7, 11, 10, -38, -13, -34, -14, -38, -50, -3, 85, -58, -32, 5, -7, 12, 43, -11, 22, -6, 56, 12, 54, -2, 8, 44, 4, 12, -5, -25, 2, 15, -80, 58, -49, 41, 17, -16, -29, 3, 14, 2, -47, 42, 14, -22, -62, 33, 2, -120, 14, -37, 21], [-25, -37, 20, 5, 17, 7, 15, 74, -6, -7, 14, -11, 29, 103, -1, -48, -3, 15, -46, -61, 2, 54, -26, -24, 42, -3, 42, -4, 3, -33, 0, 21, 43, 44, -15, -41, 58, -10, 34, 14, -55, 3, -8, 21, 18, -34, -4, -27, 17, -69, -22, -2, 72, -74, 32, -7, -16, 3, 45, 85, -106, 37, 95, 54]]], [[[65, 0, 47, -36, 14, 8, 9, -34, -38, 16, 4, 9, 0, 53, 7, -20, 11, 9, -9, -1, 1, 11, -12, -38, -46, -3, 7, -28, 1, -51, 20, -10, -21, 18, -71, 24, 76, 5, 11, -41, -14, -2, 40, -16, -22, -41, -27, 2, -12, 50, 34, -53, -23, -67, 32, -1, -6, 10, 21, -49, -24, -4, -56, -17], [57, -19, -9, -6, 41, -9, 15, -4, 25, 21, -1, -35, 16, 17, 1, -7, -25, 54, -21, -16, -33, -2, -58, -62, 7, -3, 51, -13, -2, -53, 18, -25, -22, -34, -21, 39, 66, 4, -10, -34, -12, 16, 60, -4, -44, -14, -9, -21, -37, 53, 87, -23, -81, -50, 4, 45, -15, 11, 13, -20, -31, -41, -37, -28], [43, -39, 10, -3, 22, 7, 16, -24, -3, 29, -27, -36, -20, -18, 12, 19, 4, 6, 4, -7, 4, 1, -34, -32, -24, -7, -28, -64, -26, -1, -5, 20, -9, 21, 30, 15, 32, 35, -29, -27, -4, 15, 39, 3, -8, 11, 32, -19, 2, 8, 81, 14, -39, -18, 27, 41, 7, -12, -9, -4, 18, -4, -26, -21]], [[-24, 50, 41, -2, -11, 13, -7, -57, 6, -12, -7, -6, -10, 31, -2, -20, -14, -25, 16, -4, -26, -32, -11, -32, -21, -20, 55, 1, -2, 18, -27, 28, -46, -25, 68, -28, -14, 34, -9, -15, 7, -32, 21, 17, 9, -28, -20, -42, 19, 51, -44, 41, 10, 23, -27, 3, -65, 52, 42, -51, -28, 53, -15, 5], [-21, 29, 39, -19, 17, 3, -26, 16, 8, -11, -10, 43, -74, 35, -4, 4, 13, -22, 7, -12, -36, -37, -62, -7, -1, 6, 52, 5, -30, -14, 8, 3, -39, -73, 42, 18, -35, 12, -29, -30, 0, -10, 40, 50, 4, -7, -33, 10, 2, 66, 20, 20, -9, 16, -11, 49, 4, 49, 52, 11, -43, 23, 15, -52], [-29, 14, 27, 5, -33, 35, -8, 18, -7, -8, -36, 24, 0, -17, -12, -25, 16, -10, 10, 28, -9, -48, -43, 2, -16, -24, 26, 53, -16, -18, 17, -11, 8, -6, -22, -7, -18, 4, -3, -22, 16, -10, 7, 32, 24, 24, 29, 16, 3, -14, -48, 42, 25, 65, 15, -5, 5, 12, -31, 1, 14, 0, 27, 0]], [[57, 33, -18, 26, 23, -31, 50, 10, -40, 19, 1, -16, -32, 6, 15, 31, -4, 2, 11, 11, 46, 13, 42, 21, 20, -34, -11, -6, 24, -12, -17, 16, 26, -66, 74, 67, -21, 34, 13, 25, -28, 9, -3, 12, 46, -14, -24, 11, -17, -18, 13, 26, -3, -10, 11, 25, -9, 18, -1, -14, -8, 11, 15, 8], [85, 84, -22, 42, 24, 14, -5, -22, -89, -85, 3, 127, -40, 38, -1, 32, 20, -33, -4, -9, 19, -41, 27, 64, 28, 23, -4, 1, -9, -57, -14, 3, 22, -23, 35, 53, -14, 40, -14, -26, -1, -25, -26, -39, 12, 3, -53, 2, 9, -42, 36, -2, 22, -38, 1, -15, -16, 43, 15, -37, 6, 5, 3, -16], [37, 74, -28, 21, 7, -3, -12, -74, -27, 38, 5, -20, 8, 21, 7, 43, -15, -17, -19, 17, -28, -8, -22, -6, 0, -63, 7, 14, -11, -35, -17, -32, -62, -13, -44, -29, -23, 12, -33, 10, 19, -47, -54, -40, 13, 1, 2, 14, 40, 2, -38, -45, -3, 16, 18, -50, -6, 20, -32, -5, 4, 44, 8, 26]]], [[[-38, 5, 10, -72, 44, 5, -41, -20, 33, 39, -57, 46, -40, -28, 21, 54, 14, 73, 10, -27, -16, 42, 30, 18, 4, -53, -26, -33, 20, 81, -87, 56, -2, 35, 28, 12, 17, -28, 25, -33, 25, 33, -17, -56, -17, -38, -15, -32, -9, 8, -8, -21, -23, -60, 26, -32, -6, 7, 12, 6, -84, 14, -8, -4], [8, 11, 44, -13, 30, 42, -9, -22, 30, 39, -58, -21, 31, 18, -17, 11, 15, 70, 34, -66, -26, 28, -3, 22, -13, -42, -47, -27, 28, 19, 23, 52, 60, 37, -10, 1, -22, 36, 32, -6, 32, -6, 8, -51, -42, 53, 20, -66, -28, -5, -43, -29, -1, -84, -25, -26, -32, 45, 25, -14, -70, -9, 34, 1], [-65, 7, 46, -12, 48, 20, 10, -21, -31, 38, -33, -78, 88, -14, -29, -25, 11, 56, -19, -15, 5, 30, 67, 6, -55, -1, -71, -48, 16, 70, -70, 23, 4, 44, -52, -14, -44, 24, 37, -9, -35, 11, 3, -6, 11, -10, 11, -100, -27, 4, -15, -24, -19, -42, -21, -26, -5, 23, -37, -16, 12, -47, 52, 18]], [[16, 2, -67, -37, 6, -29, -17, -29, 81, -22, -58, 33, -61, 2, 20, 36, -67, 48, -5, 61, 37, -51, -22, -49, -13, -31, -15, -6, 28, -41, -55, 0, 0, -10, 24, 9, 15, -23, -19, -86, -8, 50, -32, 35, -32, -62, -2, 15, 48, 21, 27, -22, -20, 3, 32, 28, 13, 12, 12, -36, -69, 40, -10, 34], [19, -19, -111, 1, -23, -42, -26, -28, 86, -51, -11, 9, 43, 16, 14, -12, 23, -3, -51, -7, 21, 22, -41, 6, 21, -43, 0, 24, 20, -48, 24, 4, 79, 1, 16, -21, -32, 33, 28, -13, -1, 21, -23, -17, -24, 20, -37, -22, -21, -2, 31, 15, -39, 61, -17, -7, 37, 5, 21, -48, -28, 50, -1, 25], [-49, -15, -54, 10, -10, -15, -19, -16, 26, 23, -20, -17, 31, 32, -45, 7, -64, 54, -78, 28, 15, -7, 24, -25, -11, -12, -68, -40, 24, 15, 3, -14, 16, -14, -2, 13, 9, -3, 44, 52, -22, 63, -2, -3, -15, -39, -15, -19, 11, 53, -51, -13, -60, 66, -9, 13, -16, 28, 34, -17, 51, -62, 127, 49]], [[56, -19, -8, 7, -4, -17, 44, -16, 9, -75, -31, -21, -30, 37, -41, -4, -11, 51, -30, 38, 63, 6, -41, -64, 18, -10, 17, 55, 8, -51, 14, -11, -50, -5, -5, 0, -27, -21, 32, 0, -12, -11, -13, 25, 30, -6, 13, 45, 33, -19, 28, 15, -28, 10, -30, 25, -31, 3, -10, -4, 1, 14, -41, 34], [21, -46, -85, -6, 6, -26, 50, -38, 52, -53, -17, -66, 35, 14, -46, -24, 46, 8, -27, -4, 36, 5, 17, 26, 48, -5, 34, 43, 21, -63, 13, 18, 40, -32, -22, -10, 34, 18, 18, -32, -50, 25, -13, -57, 37, 4, -13, -22, -47, -38, 5, 1, 39, 88, -29, 23, -16, -38, -43, -10, 29, 19, -51, 28], [-30, 34, -24, -23, 20, -10, -2, 29, 1, 33, -14, 7, 37, 39, -34, 68, -55, -11, -23, -62, -12, -23, -21, -35, 49, -9, -6, 32, 37, -21, -8, -3, -79, 5, 21, -33, 5, 6, 13, 34, -46, 20, -17, -54, 3, -32, -30, 13, -7, -11, -37, -4, 26, 71, -36, 16, -49, -34, 26, -8, 39, -29, 34, 0]]], [[[-62, 4, -8, 14, 1, -31, -48, 16, 7, -11, -37, -4, 15, 17, 51, -46, -8, 23, -41, 65, -36, 101, -8, 10, -35, -28, 26, 67, 9, 54, -26, -25, -69, -22, 21, 27, 21, -52, 1, -41, -12, 64, -20, -19, 11, -34, -27, -37, -43, -47, -21, 3, 55, -67, 52, -34, 15, -43, 45, -39, 5, -18, -27, 83], [57, 4, 83, 40, 10, -58, -59, -19, 73, 4, -25, -45, 0, 21, 47, -33, 34, -1, 13, 44, 41, 34, -49, -18, -56, 36, 59, 94, 14, 73, 47, 58, -23, 23, -19, 68, 47, -10, -37, 16, 1, 16, 20, 9, 29, 10, 76, -33, -47, 8, -28, 0, -77, -75, 48, -107, 42, -34, 46, 23, 45, -18, 35, 6], [3, -12, 30, 4, -2, -73, -58, -5, 4, 20, 29, -26, 68, -3, -30, -13, -14, 26, -52, -22, 7, 58, -12, -68, -7, -14, 69, -23, 0, 88, 4, 6, -79, -27, 1, -11, 5, -24, -19, -83, 4, 52, -25, 30, -21, 16, 108, -4, -21, -21, -64, -17, 7, -24, 60, -83, 65, -24, 35, 36, 3, -39, 19, 67]], [[-51, -74, 22, -34, 45, -48, -45, -28, -58, 0, -19, 59, -4, -13, 55, -46, -4, -71, -42, 43, -2, 127, 16, -14, -11, -4, 28, 46, 51, 6, 25, -17, -45, -10, 3, 21, -3, -23, -15, 33, 11, 5, -41, -61, -23, -56, -7, -13, -15, -12, 18, -12, 50, -26, -8, 8, -6, -17, 35, -32, -49, 4, -5, -20], [42, -21, 40, -13, 13, 55, -3, 0, 9, -77, -15, 19, 40, -75, 71, -16, 12, -74, 12, 3, -11, -34, -82, 49, 57, -19, 40, 1, -31, -18, 39, 28, -23, -16, -36, -41, -64, -10, -102, 10, -13, 22, -52, -65, -14, -21, 72, -42, -65, -13, -45, -24, 13, 13, 48, 30, 109, -37, 33, 37, 0, -16, 35, -83], [-47, 8, 63, -34, 33, -35, -3, 3, 22, -1, -5, -24, 24, 6, 18, -12, 56, -28, 72, -42, -9, -5, -99, -13, 27, -25, 24, -9, 47, -17, 12, -46, -42, -11, -37, -35, -36, -5, -16, -80, -26, -1, -34, 13, -2, 34, 96, -40, 12, 12, -23, -10, 20, 38, 31, 47, -45, -40, 65, 22, -21, -2, 35, -72]], [[94, -49, -20, -38, 8, -36, -15, 7, -27, -38, -15, 9, -28, 2, -25, -41, 0, -48, -50, 53, -7, 58, 37, -38, -66, 33, -15, 10, 8, 23, 2, 8, -9, -40, -10, 22, -27, -19, 63, -40, -63, 48, -4, -51, -28, -45, -55, 35, -24, 40, 16, 42, 14, 49, 31, -9, -36, -10, -11, -67, -53, 4, 12, -12], [89, -19, 52, -55, 22, 29, 42, 17, 11, -51, -43, 15, 11, -72, -19, 44, 25, -6, 2, -16, 30, 22, -62, -34, 19, 59, 14, 4, -10, -59, -24, -4, -26, 27, -46, 27, -50, -104, 73, 3, -26, -66, 29, 24, -9, 64, -98, 63, -40, 48, -31, 103, 18, -27, 33, 86, 55, -51, -39, -4, -11, -22, -33, -40], [84, 31, 31, -62, -13, -3, 32, 29, -12, -23, 2, 14, -36, -10, -2, 22, 74, -34, 47, -14, 1, -22, -63, -29, 29, -16, -13, 27, 27, -42, -25, -34, 7, -13, 0, 31, -11, -15, 1, -93, -29, 19, 18, 34, -62, 70, -47, 2, 2, 49, -1, 16, -46, 5, 60, 32, 8, -24, -48, -32, -42, -49, -10, -8]]], [[[57, 16, 9, 11, 3, 57, 5, -4, 2, 15, -28, -19, 54, 0, 68, -26, 61, -50, -57, -24, -32, -1, -15, 23, -44, -45, 4, -14, -49, 16, -34, -35, 79, -2, -5, -28, 39, -19, 34, -14, -45, -26, 9, 12, 26, -8, 27, 7, 13, 64, 48, -47, 68, -27, 32, 60, 62, 22, -6, 21, 31, 20, -25, 3], [33, -7, 4, 7, 20, -1, 39, -16, 8, 12, -25, -15, 78, 30, 29, -9, 12, -48, -51, -45, -92, 1, 58, 32, -20, 31, -2, -53, -37, -13, -26, -54, 28, -12, 5, -43, 72, -24, 39, 9, 16, -6, 44, 26, -1, -14, 25, -8, -3, 81, -12, -7, 6, -60, -27, 44, 13, 31, -56, 5, -16, 14, -22, 22], [-21, 30, -55, 0, -16, -9, 16, -18, 2, 25, -75, 9, 127, 40, 1, -50, 26, -52, -58, 5, -9, 43, -26, -5, -44, 33, -54, -37, -24, -5, -60, 35, 44, 9, -52, -9, -28, 5, 14, 20, -44, -22, 35, 26, 21, 16, 27, -56, -5, 51, -5, 25, -27, -24, -38, -19, -22, 24, -4, 20, -32, 33, 36, 39]], [[-29, 20, -43, 21, 33, 29, -34, -34, -40, -27, -18, 20, -5, -22, 44, 35, -5, -11, -27, -10, -18, -1, -39, 47, -3, -43, -42, -20, -35, -22, 22, -20, -56, 26, 57, -14, 11, -13, 18, -25, -35, -28, -4, -19, 10, -38, -28, 22, 51, 9, 41, -39, 33, -25, -5, 23, 42, 15, 9, 7, -52, 12, 15, 23], [-28, -32, -18, 11, 62, -12, -41, -19, -21, -3, -4, 6, 28, -36, 42, 39, 26, -48, -45, -8, -19, -2, -6, 29, -28, 15, -29, -50, -29, -58, 42, -40, -78, -7, 39, 23, 74, -46, 43, 7, -18, 1, 18, -12, -23, -39, 12, 6, -7, 24, -31, -46, -22, -21, -10, 17, 17, 30, 7, 3, -36, 12, 14, -9], [10, 25, -24, 2, 28, -10, 5, 5, -16, -18, -37, 5, 57, 50, -8, 2, -40, -18, -39, -41, 20, 27, -38, -28, -59, 47, 11, -46, -22, 30, 10, 3, -63, -3, -40, -4, 0, 3, 40, 23, -37, 24, -3, 32, -16, -36, 3, -1, -2, 37, 27, 15, -45, 31, 0, 29, -8, 35, 23, 23, -42, -9, 51, 42]], [[-10, 7, -55, -24, 3, -10, -6, -54, -9, -33, -4, 27, -42, -8, 8, 29, -71, 60, -26, 36, 25, -6, -47, -10, 31, -51, -49, 20, -30, 13, 17, 26, -34, 27, 65, 49, -62, 51, 3, -14, -43, -62, 40, -65, -57, -36, -37, 14, 58, -2, 81, -24, -11, 18, 46, -9, 16, 60, 16, -13, -57, 35, -8, -24], [-24, -9, -60, -11, 23, -15, -16, -27, -39, -1, -16, 16, 26, -14, 5, 23, -74, 4, -111, 26, 5, 16, -36, -11, 11, -45, -25, -5, -9, -17, -2, 23, -23, 22, 5, 58, -44, 32, 2, 15, -40, -40, 25, -16, -46, 19, 45, -16, 32, 21, 53, 18, -52, -35, 53, 13, -60, 39, -1, -1, 28, -27, 0, -9], [33, 49, -2, -26, -15, -3, -2, 37, -44, 20, -1, 51, 40, 12, -46, 3, -70, 2, -38, -32, -10, -4, 23, 0, -21, -2, -2, -28, 7, -7, -3, -39, -14, 30, -23, 4, -61, 10, -16, 57, 16, -33, 11, -4, 55, -32, 28, 37, -4, 20, 62, 7, 39, -12, 33, 10, -24, 23, 10, -6, -5, 29, -46, 7]]], [[[14, 37, 28, 3, 18, 5, 29, -4, 24, 23, 24, -45, 5, -13, 123, 6, 3, -8, -38, -6, 62, 67, -45, 65, -5, 22, 2, 63, 42, 3, -17, 18, -2, 37, -7, 2, 8, -7, -71, 85, 8, 9, 22, 47, 28, 69, 10, -21, -2, -5, -80, -34, 38, -9, -42, 17, 0, -36, -23, 48, -43, 12, 42, 42], [-15, -33, -26, 1, -46, -11, -47, -18, 68, 20, -30, 22, -23, -18, 7, -9, -21, -37, 39, -24, 40, 25, -8, 61, -22, -7, 22, 38, 15, 8, -52, -13, 24, 14, -66, -7, 72, -19, 8, 30, -24, -14, -27, -24, -8, 21, 25, 21, 34, 20, -69, 7, 28, 22, 31, 30, -10, -33, -54, 41, -30, -7, 99, 25], [39, -13, -4, -31, -26, 29, 51, 16, 3, 28, 23, 39, -13, -41, -21, -18, 19, 18, -21, -1, 92, 7, -21, 50, -39, 35, 48, 69, 35, -15, -3, -10, 45, 66, -127, -63, 71, 21, 22, 48, -12, 35, -8, -13, -64, 11, 42, 24, -2, 15, -35, -25, -11, 34, -36, -31, 0, 19, -29, 9, 2, -45, 11, 26]], [[-37, 40, -14, 27, -28, 27, 54, -23, 47, -10, -94, -32, 7, -27, 27, -24, 94, 43, 1, 49, -85, 11, 22, -6, 17, -44, -18, -65, 52, 32, 62, 24, 22, 23, 9, 38, 2, -18, -7, 26, 45, -18, -4, 39, 30, -15, -14, -59, 25, 49, 33, 22, -2, -22, -10, -8, -21, -40, -57, 61, -59, 5, -44, 30], [-21, 20, -14, 23, -37, -11, 72, -17, 5, -40, -100, 13, -37, -8, -47, 9, 18, 41, 72, -26, -36, -10, 41, 11, 30, 51, 77, -27, 16, 13, 0, -41, -56, 30, -9, -9, 40, -38, 47, -39, 67, -9, -9, 12, -24, -10, -16, 21, 11, -20, -33, 41, 1, -40, 41, -31, -5, -3, -93, 23, -90, 51, 24, -12], [-30, 8, -26, 4, -25, -5, 79, 1, 26, 10, -36, 2, 15, -64, -52, -5, 68, 67, -23, -9, 4, -14, -34, -94, -42, 84, 81, 33, 45, -43, 41, -14, -13, 28, -20, 11, 67, -32, -18, 11, 56, 2, -13, 7, -69, 1, -21, 97, 24, 5, -41, 19, -29, -35, -28, -11, 19, -7, -50, -18, -8, -10, 66, -11]], [[-49, -38, -62, -56, -56, 15, 51, -20, -13, 18, -2, 45, 8, -48, -29, -55, 32, 21, -26, -37, -35, 29, -59, -40, 2, 20, 53, 13, -37, 5, -39, -11, 60, -19, -26, -17, -13, 1, -32, -12, 45, 41, 10, 1, -9, -46, -2, -57, 46, 34, 42, -69, 20, -20, -8, -22, -33, 87, -33, 54, -22, -38, -60, -21], [-34, 9, -69, -20, -9, 27, 89, 30, -48, -52, -32, 28, -28, -24, -100, 1, 59, 37, 16, -19, -15, 41, -63, -5, 26, 22, 56, 4, -24, 6, -27, -2, -27, 26, -12, -19, -60, -39, -31, 9, 25, -23, -26, -6, -20, -49, -65, 7, -18, 3, 58, -86, 27, -16, 19, -3, 20, 91, -12, 58, -27, 35, -26, -9], [-29, -7, -32, 20, 3, -33, 29, 79, -50, -11, -101, -1, -7, 12, -60, 0, 13, 3, 50, -19, -15, 60, -54, -48, -9, 13, 24, 58, 11, -2, 37, 9, -51, -22, -7, -20, -7, 1, -18, 11, -49, 6, 33, -19, -96, -2, -24, 41, 33, -28, -24, -46, 11, -60, -8, -38, 23, 65, -15, 34, 10, 85, 22, -7]]], [[[-43, -47, 31, 34, -9, 87, -62, 48, 72, -10, -40, -27, 27, -7, 7, -24, 20, -23, -10, -26, -30, 34, 0, 11, -12, -46, -14, 17, 4, 13, 31, 33, 4, 26, 1, -12, 6, -17, -22, -16, 1, 15, -39, -59, 23, -16, 1, -42, 45, 61, 55, -25, 14, -9, 15, -7, -15, 38, 14, 8, -14, -1, 23, -4], [-13, -78, 69, 19, -3, 76, -24, 21, -4, -18, -59, -80, 127, -56, -37, -10, 52, -77, -19, 1, -75, 30, 10, 71, -36, -35, -20, -46, -4, -24, 4, -1, 105, 28, -27, -10, -11, -11, 38, -36, -33, 39, -26, -61, -2, -46, -40, -82, 56, 50, 16, 0, 20, 43, -52, -14, 55, 47, 31, 17, -53, -15, 51, 53], [-57, -64, 4, 16, 20, 32, 9, 39, 28, -37, 11, -16, 54, -8, -7, -12, 27, -26, -50, -22, -45, 83, 31, -39, -38, 45, 7, -12, -25, -7, 28, -40, 33, 33, 41, 78, -41, 33, -38, -25, -32, 20, -24, -22, -10, 22, 32, -86, 71, 25, 40, -9, -4, 32, 41, -75, 31, 10, 10, 13, 21, 12, 44, 13]], [[-6, -62, -14, -26, -38, 50, -49, 30, -39, -6, -48, 17, 32, -7, 20, 1, -33, -64, -43, 37, -9, -28, -32, 25, 46, -1, 7, 22, 40, -37, 16, 26, 18, 5, -67, -42, 9, -26, -3, -34, -52, -17, -45, -38, 49, 6, 42, 3, 9, 27, 53, 2, 0, 5, 5, -36, 5, 35, 19, 49, -3, -35, -39, -18], [12, -49, 12, 22, 19, -2, -24, 19, -33, -9, -43, -88, 86, -13, -67, 8, -50, -69, -53, -58, -54, -50, 8, -1, 41, 13, 21, 13, 61, -5, 14, -71, -17, 0, 36, 5, 57, -48, 59, -1, -3, 12, 84, -93, 87, -60, -35, 15, 4, 55, -37, 3, -15, -53, -30, -8, 32, 48, 4, 27, -71, -28, -67, -22], [-20, -71, 6, 0, 24, -20, -18, 2, -1, 18, -29, 17, 80, -9, -40, -21, -48, -39, -35, -32, 23, 23, 32, -30, 11, -8, -19, -53, 46, -39, 9, -4, -3, -36, 55, 46, 14, -21, 16, 13, -51, 12, -28, 7, 21, 20, 25, 6, -4, -3, 49, -1, -10, 27, 60, 44, -13, -33, 53, 1, -8, -32, -24, -28]], [[0, -69, -4, -61, 75, -3, -11, 13, -28, -2, -104, 66, 21, -14, 25, -60, -34, 11, 15, -18, 24, -43, -2, 56, 55, -2, -19, 34, 20, -39, -1, 0, -80, 27, 97, 10, 15, -44, -38, 27, -46, 8, -8, -45, -9, 34, 36, -13, -21, -48, -13, 28, -13, 13, -35, -5, 6, -11, -22, -45, 19, 53, -33, -2], [-19, -87, 28, -21, 25, -26, -13, 22, 4, -10, -42, 45, 9, 22, 8, 1, -13, 33, -31, -28, -17, -35, 2, -1, 36, -7, -24, 40, -4, -48, -8, -32, -53, -5, 47, 57, -42, -50, -52, 0, 13, 52, -5, -26, -1, 15, -16, -18, -38, 14, -24, 38, -61, -45, 9, 56, 47, 13, 6, -57, -89, 60, -62, -32], [-22, -38, 0, 2, 71, 25, 12, -22, -24, 24, -48, 32, 27, -14, 12, -34, 18, 30, -9, -13, 25, 3, 26, 43, 18, 23, -22, 4, -11, -44, -24, -48, -76, 17, -11, 48, 22, -10, 42, 50, -34, 26, 24, 8, 70, 67, 16, -2, -74, -11, 12, 34, -19, -4, -11, 43, -1, -22, -8, -11, 13, 28, 6, -37]]], [[[-30, 31, -31, 12, -40, -11, 85, -34, -28, 53, -59, 16, -38, -30, -15, 57, 3, -27, 31, 72, -18, 27, 62, -76, -39, -22, 38, -24, 22, -67, 1, -94, -46, -28, 43, -73, 30, -35, -7, -12, 7, -20, 42, -45, -25, -69, -12, -18, 43, 49, 68, -18, -27, -40, -37, -33, 23, 32, -31, 42, 15, -36, -10, 21], [0, -4, 0, -2, -44, -58, 21, -10, -26, 47, -64, -39, 68, -36, -69, -21, 34, -1, 8, -77, -75, -4, 64, -35, -84, -4, 18, -29, 1, -30, 0, -24, 48, 34, 19, -98, 54, 2, 4, -30, -38, -28, 57, -46, -24, -36, -58, -43, 31, 87, 46, 6, 19, -39, -49, -42, 15, 49, -17, 19, 3, 7, 40, 42], [73, 48, 16, -13, 25, -16, 84, -50, -34, 36, -46, -5, -20, -33, 0, 33, 30, 31, -31, -79, -51, 97, 38, -40, -23, -26, 17, 12, 7, -54, -38, -26, -68, 32, 24, -94, 10, -20, 6, 49, -1, -30, 49, -26, -1, 27, -5, 11, -42, 37, 8, -31, 35, 3, -3, 4, -24, 91, -70, 0, -63, -14, 49, 17]], [[-19, 21, -17, 3, 57, -37, 59, -25, -16, -84, -103, 66, -28, -4, -16, -29, -34, 45, 26, 22, 11, 11, 2, 37, -65, -1, -40, -73, 9, -59, 19, 14, -20, 30, 22, 10, -7, 0, -14, -43, -1, -26, 59, -65, -33, 7, -18, -14, 59, -4, 44, -49, 58, 13, 25, -57, -8, -17, -54, 76, 31, -39, -8, 1], [-69, -6, -78, -39, -20, -49, 3, -17, -37, -26, -74, 26, 27, -41, -21, -33, -87, 0, 8, -74, -66, 2, -39, -13, -94, 7, -2, -28, -39, -57, 5, -16, 25, -14, -25, 28, -7, -3, -22, -93, -23, -41, 104, -10, -33, 13, -61, 1, 9, 16, -5, -8, 49, 24, 34, 8, 2, 16, -21, 67, -2, -34, 51, 19], [10, 52, 3, 25, 46, -31, 77, -11, -96, 9, -31, 16, -48, 4, 44, 32, 18, 63, -59, -104, -35, 53, 0, -13, -70, -28, 3, 25, 11, -87, 8, -71, 3, -23, 5, -9, -27, -17, -8, 19, 10, -34, 7, -13, -49, 52, -34, 27, 24, 13, -21, -60, 51, 35, 17, 33, 9, -46, -53, -9, -15, -43, 87, 17]], [[23, 36, -9, -57, 49, 4, 83, -81, 32, 20, -62, 59, 18, 39, -31, -30, -79, 15, -6, -5, 22, 54, 45, 73, -17, 0, -41, -7, -27, -29, 44, 12, -17, -64, 40, -10, 80, -90, 10, 28, -59, -36, 10, -14, 5, 75, 28, 17, 18, -43, 40, -48, 1, -1, 20, 18, 9, -88, -36, -7, 19, 20, -45, 11], [-41, -8, -52, -28, -39, -4, 103, 12, 20, -6, -59, 18, -16, -9, -22, 44, -89, -68, -24, -13, -32, 66, 3, 81, -46, -33, -9, -11, 27, -13, 85, -6, -29, -22, 23, 11, 14, 1, -13, -3, -63, -40, -3, 42, -4, -33, 19, -15, -19, -12, 9, -43, -30, -13, 11, 98, -69, -43, -9, -21, 39, -38, -21, -1], [-26, -22, 22, -56, 52, 26, 79, 5, -29, 21, -52, 29, 55, 12, -16, 25, -16, -7, -6, -31, 14, 16, -20, 41, 25, -43, -29, 73, -3, -27, 27, -23, 12, -92, -26, 54, 50, -6, 14, -23, -62, -17, -24, 30, -60, 38, 38, -29, 41, 34, -1, -57, 40, -55, -5, 127, 14, -72, 71, -17, 59, -45, 1, -38]]], [[[6, 9, 47, -2, -4, 2, 16, -46, -26, -60, -45, -25, -9, -56, 33, 33, -3, 10, 23, -24, 21, -65, 14, 10, -6, -33, -40, 67, 10, -55, -19, -5, -27, -11, 11, 33, -19, -23, -39, 8, 37, -2, 13, -84, 15, -84, 64, -49, -9, 49, -15, 43, 28, -13, 70, -19, 29, 16, -18, 38, 7, -33, -34, -20], [14, 64, 1, -14, 18, -59, 32, -53, -13, -42, -68, -37, 17, -65, -27, 10, 46, -6, 45, -100, 28, 3, 73, 25, -63, 38, -1, -61, 22, -53, -27, 29, 2, -16, -17, -21, 11, -36, -43, -14, -2, 8, -42, -32, -20, 2, 42, -36, -24, -12, 26, 4, -10, -26, 36, -31, 18, 63, -12, 4, 4, -57, 3, 53], [-6, 45, -37, -23, 0, 41, 12, -62, 19, -34, -31, -42, -2, 11, -26, -7, -49, -12, 50, -48, 29, -6, 82, 14, 9, 39, 37, -52, 55, -24, 16, 3, -29, -94, -4, 48, 50, -11, 21, -2, -34, -1, -14, -73, -31, 28, 32, -3, -35, 20, -26, -23, -42, -51, 43, -20, 37, -23, -27, -41, -72, -58, -28, 36]], [[-17, -6, 27, -1, -15, -33, -32, 1, -42, 52, -39, -35, -43, -6, 37, -7, 33, 42, -51, 3, 28, -39, 17, -12, 24, -9, 5, 69, -19, 17, 6, -30, -5, -2, 2, -27, -36, -60, -23, 22, 29, -9, 21, -31, 6, 10, 82, 0, -7, 16, -15, -45, -48, -50, 36, -2, 27, 7, 38, 8, -44, 38, -75, -22], [-24, -1, 10, -1, 17, -31, -8, 34, -12, 20, -36, 22, -22, -67, 21, 24, 24, -2, -22, -35, 34, 36, 29, 32, -27, 22, -15, -58, -14, 1, 32, -61, -22, 49, 13, -56, -25, -24, -27, -12, 12, -10, 4, 28, 20, 3, 44, -43, 15, 9, -26, -64, -15, -12, -20, -38, -47, 40, 57, -47, -77, 15, 20, -25], [12, 27, -77, -12, -4, -82, -26, 14, 55, 13, -47, 22, 5, -51, -33, -28, -11, 38, -23, 23, -32, 53, 37, 5, 1, 40, 38, -22, 25, -25, -5, 0, -8, 47, 35, -8, -16, -41, 35, -43, -53, -16, -28, -15, -4, 12, -22, 7, -13, 21, -9, -30, -10, -35, -31, -14, -16, 13, -6, -41, -50, -25, 96, 1]], [[26, 29, 21, -60, -48, -9, -7, 21, 1, 35, -64, -24, 28, -52, 2, -34, 40, 36, -14, -24, -64, -24, -12, -14, 38, 40, -41, -7, -37, -40, -27, -49, -6, -2, -56, -47, -47, -7, -27, 87, -1, 33, 16, 6, -16, -9, 55, 22, -10, 38, 3, -41, 11, -2, 17, 21, 39, -24, 0, -18, -127, 43, -4, -15], [-28, 60, -11, -35, -29, 7, 7, 60, 5, 12, -43, -29, 11, -76, -18, 29, 23, 19, -41, 10, -36, 21, -1, 24, -9, -6, -35, -13, -23, -37, 39, -48, 29, -22, 20, -15, -36, 26, 2, 19, 9, 12, 61, 0, -59, -36, 28, -12, 8, 19, -25, -48, -17, 8, 4, 16, 16, -40, 22, -43, -93, 1, -4, -10], [-17, 36, -37, -24, -48, -70, -43, 27, 11, 33, -57, 47, 16, -16, -63, -54, 89, 2, -51, 11, -11, 102, -44, 29, -47, 1, -31, 3, -22, 47, -18, -14, 28, 10, -1, -25, -44, -76, -14, -23, -19, 26, -19, -26, -2, -27, -20, 2, 27, 0, -8, -26, -22, 10, 14, 30, -3, -77, -11, -8, 4, 14, 38, 12]]], [[[52, 20, 3, -48, 23, 3, -20, -23, -28, 42, 28, 10, 71, 19, -1, -23, -20, -10, 4, -17, 3, 16, 19, 4, 10, -12, -39, 42, 11, 10, -14, -25, 51, -34, -14, 60, -38, 0, -21, -74, -7, -20, 36, 4, 15, 26, 7, -14, -9, -19, -75, 48, 32, 48, -8, 30, -50, 27, -14, 40, -97, -10, -14, -6], [64, 29, 16, -38, 6, -13, -4, -59, -25, 36, -5, 12, 6, -37, 16, 1, -64, 16, -14, 50, 12, 17, 12, 68, 62, 17, -13, 72, -63, -32, -3, 27, 17, -9, -18, 32, -45, -18, -18, -27, 12, -28, 31, -13, -6, -14, -12, -40, -73, -7, -33, 14, -34, 44, 18, 24, -27, 16, 1, 33, -24, -20, -14, 15], [2, -7, 32, -97, -12, 61, -35, -29, -38, -35, 14, -9, 3, -10, -18, -53, -24, 2, 13, 20, -37, 16, 55, 29, 10, 14, -22, -31, -51, 57, 37, -23, 105, -37, -8, -63, -10, -7, 8, 12, 21, -58, -24, 52, 20, -18, -30, -6, -20, 0, 45, 38, -5, 53, 21, -3, 28, 32, -24, -30, 4, 15, 14, 24]], [[-3, 53, 23, -4, -11, 19, -8, -64, -46, 4, 44, 43, -19, -1, 4, 26, 3, -13, -27, 38, -16, -26, -33, 11, -25, 5, -60, -28, -28, 50, 18, -78, -29, -57, 18, 20, -7, 26, 0, -14, -40, -2, 10, 22, 13, 14, -27, 14, -18, -12, -96, -23, 4, -39, 52, 25, -5, 33, -28, -12, -5, 34, 8, -11], [39, 49, 8, 45, -1, -23, -16, -7, -48, 31, -2, 27, 9, -22, 7, 46, -12, 12, -34, 56, -10, 9, -36, 3, -23, 2, -50, 56, -59, -4, -26, 0, -38, -54, 13, -31, -33, -32, 21, -17, 13, -9, 5, -29, 1, 29, -4, 11, -22, -1, -42, 5, -11, -11, 52, 2, -40, -2, 8, 22, -25, -1, 5, -23], [34, 23, -15, -26, 22, 17, -36, 9, -77, 8, -6, 75, 36, 5, 87, 69, 4, -62, 5, -37, -38, 53, -57, 9, -23, -9, -21, 24, -30, 1, -7, -74, 9, -39, -14, -23, 1, 36, 1, -24, 2, -24, -1, -19, -10, 31, -9, 32, -51, 24, -12, 12, 24, -14, 39, -6, 10, 55, 27, -4, 11, 44, -39, -34]], [[-12, 25, -15, 75, 33, -8, -33, 0, 35, 24, 6, 14, -37, 57, -19, -11, -15, 1, 41, 52, -18, -14, -47, 13, 44, -28, -8, -57, -58, -24, 47, -78, -17, -64, -12, -17, 116, -25, -7, 35, -26, 1, 44, -3, -3, 45, -42, -6, -16, 3, -127, -29, -1, -11, 56, 5, 16, 21, -3, -1, 42, -6, -13, 10], [43, -5, -17, 98, 12, -40, -40, -15, 3, 18, -11, -4, -5, 23, -11, 5, -14, -10, -1, 21, -41, 31, -57, 6, -21, 15, -37, -20, -60, 22, -46, -40, -52, -51, 43, -46, 69, -59, -14, -21, 28, 6, 35, -13, 48, 3, -20, -29, -2, 10, -42, -1, -22, 7, 22, 21, -20, 37, 39, -40, 27, -47, 5, 12], [-34, 31, -55, 73, -6, -55, -38, -14, -1, 2, -12, 7, -7, 73, -16, 57, 14, -35, 32, -16, -55, 27, -31, 42, 41, 5, -23, 33, 38, -23, 4, -64, -55, -42, -10, 30, 89, 27, -10, -48, 1, -1, 24, -40, -9, -5, -28, 15, -16, 18, -45, -21, -33, 17, 67, -19, 4, 10, 56, -5, -6, 3, -5, 41]]], [[[-13, 55, 45, 23, 53, 56, 62, -34, -41, 31, 19, -21, 70, -23, -21, -5, 18, 7, -21, -5, 4, -12, -32, 20, 65, 8, 1, 79, -43, -62, 30, 6, -53, -58, 48, -37, -49, -26, 25, 62, -30, 7, -24, -49, -6, -13, -65, 17, -9, 80, -22, -22, 53, 3, -35, 57, 37, 79, 11, -11, 68, -62, 127, -10], [-82, 41, 23, -6, 64, 75, 96, -36, -80, 42, -27, 120, 45, 74, -41, -3, -77, -35, 6, 29, 48, -47, -41, -25, -49, -31, 118, 7, -29, -40, -23, -42, -27, -24, 70, 40, -25, -31, -23, 47, 19, -16, 32, -19, 1, 69, -32, 11, 1, 50, 16, 10, -39, 92, -39, -60, -32, -33, 67, 107, 53, 46, 8, -11], [-51, 31, 7, 0, 24, 101, 55, 31, -20, 32, 10, 28, 27, 9, 33, 36, 1, -29, -48, -32, 58, 56, -63, 2, 45, -18, 1, -71, -4, -17, 49, -9, -26, -29, 53, 103, -10, -38, -14, 52, -26, -75, 38, 59, -29, 14, -56, -18, 16, 53, 21, -34, 20, 57, -31, 44, -48, 9, 59, -69, 25, 22, -30, -54]], [[77, 35, 71, 29, 40, -28, -12, -98, -22, -17, 43, -54, 64, -42, 43, 78, 57, -76, -48, -58, -26, 92, -42, 10, 22, 1, 56, 0, -34, -83, 66, 13, 13, -29, 5, -75, 50, 6, -46, -7, 52, 46, -41, -68, 33, 24, -52, -32, 87, 76, -13, 16, -48, -24, -6, -13, -10, 72, -2, -30, 19, -11, 99, -6], [18, -2, 11, -18, 60, -30, 13, -14, 15, 31, -9, 12, 20, 66, -24, 71, -67, -40, -26, -19, 31, 11, 47, -41, -22, 31, 113, -17, -57, -19, 79, -84, 68, -28, 63, -33, 4, 10, -57, -12, -7, 40, 33, -87, 39, 43, -40, -15, 54, 58, -38, 13, -64, 44, 9, -44, -45, -5, -43, -3, 29, 48, 83, 9], [-3, 17, -18, -33, 99, -66, 19, -6, -47, 16, 57, -34, -30, 86, 5, 20, 31, -65, -89, -16, 11, 63, 20, -43, 60, 18, 44, -68, -43, -71, 33, 23, 26, -20, 20, 23, 36, -14, 29, -38, 24, -66, 38, 20, 53, -41, -24, -13, 39, 56, -44, -8, -64, 22, -1, -32, -45, 61, 34, -28, -22, -27, -10, -1]], [[8, 73, -17, 3, 16, -35, -80, -91, 30, -18, 22, -21, 45, -29, -2, -14, 16, 18, 2, -39, -10, 53, -53, -54, -88, -30, 34, 41, 56, -101, -29, -29, 83, -65, -18, -36, -27, 5, -38, -79, 0, 4, -38, -107, 57, -32, 24, -79, 42, -27, 51, 25, -41, 28, -71, -44, -65, -13, 5, 42, 42, -73, 16, 35], [1, 83, -23, 9, -23, -35, -34, -24, 65, -42, -21, -26, 76, 32, 42, -5, -95, -14, -14, -34, 26, 11, -81, -88, 17, 14, 39, 66, -60, -10, 19, -24, -27, -52, 72, 56, -21, -14, -31, -35, 2, 25, -15, -23, 64, -3, 51, 0, -50, 5, 78, -26, -3, 52, -11, -61, -26, -34, -10, -27, 28, -18, 36, 84], [4, 37, -77, 0, 32, -68, -32, -64, 5, -75, 48, -95, -18, 30, -12, -15, -5, 18, 20, -64, -7, 71, 66, -27, 6, 11, -52, 14, 36, -54, -19, 19, 43, -39, 3, 50, -29, -44, 78, -59, 14, -41, -21, 1, 64, -69, 58, -100, -32, 39, 80, -18, -10, 40, -29, -57, -14, 1, 31, 14, 0, -86, 29, -28]]], [[[-62, 44, -22, -22, 9, -22, -21, -10, 7, 36, -16, -15, 15, 39, -43, -13, -47, -10, 5, 27, -21, -7, 14, 54, 0, -63, 49, 0, 13, 17, -30, -51, -3, -4, -30, 22, 25, -12, 3, -9, 5, 25, 39, 41, 13, -6, -2, -40, 2, -5, 2, 16, 14, 62, 30, -19, -10, -15, -5, 8, 35, -34, 19, 40], [-56, 25, -18, -12, 0, -3, 32, -25, 13, 18, 22, -32, 51, 39, -39, 22, 9, -7, 5, 20, 2, 76, 71, 25, -37, -26, 46, -29, 20, 28, 2, 18, 19, 16, -35, -18, -7, 3, -1, -62, 30, 14, 1, 16, -8, 5, 7, -55, 10, 1, -36, -6, 17, 50, 10, 70, 30, 44, 26, 36, 48, 6, -32, 2], [-50, 33, 24, 9, 13, -18, 29, -21, 5, -26, -53, -30, 64, -10, 9, 41, -18, 2, -21, 15, -3, 18, -18, 15, -41, -18, 26, -1, 9, -3, -21, 19, 7, 4, -38, 5, -1, -8, -37, -19, -30, 14, 23, -29, -38, -11, -11, 4, 7, -3, -38, -3, -4, 64, 42, 39, -9, 25, 3, -3, 1, 4, -1, 18]], [[-39, 36, -6, 46, -6, 7, 8, 5, -2, 41, -18, 11, 3, 5, -27, -36, -34, -3, 8, 0, 15, 30, -51, 32, 16, 15, 7, -38, 1, -7, -9, -2, 9, -33, 21, -25, 8, -8, 7, -46, -45, 41, -12, 47, 99, 21, 35, 4, -14, 14, 52, -34, 34, 18, 4, -7, 3, -44, -6, -11, -47, -36, 17, 6], [-65, -8, -3, 28, 5, 25, 30, 3, 61, 6, 14, 44, 50, 18, 6, 4, -11, -13, -47, -8, -5, 35, -18, 27, -33, 3, 74, -15, 39, 12, -10, 56, 2, 9, 21, -40, -52, 8, -28, -38, -21, -27, -15, 99, 29, 18, 9, 62, 4, 8, 23, -37, -2, -12, 12, 2, 29, -11, 31, -32, -50, 19, 32, -6], [-2, 29, -4, 20, 40, -16, 11, -21, 48, -42, -30, 26, -4, -36, 21, 6, 0, 15, 4, -22, 0, 11, -53, 55, -41, -39, -1, 7, -4, -41, -28, 31, 9, -1, 8, -80, -36, 5, -38, 4, -47, -25, -25, 23, -6, -4, 14, 63, 20, -15, 1, -21, -6, 8, -23, -2, 37, -20, 41, 10, -26, 3, -18, -23]], [[2, 30, 25, -20, 50, 0, 21, -24, -23, -25, -22, 56, -24, 43, 4, 8, -16, -24, 43, -18, -29, 27, -12, -13, -22, 33, 7, -44, -5, 15, 51, -101, -27, -63, 24, -11, 25, -10, 34, -36, -38, 13, 5, -30, 46, -14, -10, 46, -12, 2, 61, 4, 3, -36, -13, -8, -22, -21, -5, -6, 4, -32, 25, -12], [-25, 25, 13, -65, 4, -11, 55, 17, 38, -18, 3, 15, -5, 0, -8, 13, -9, -10, 33, 8, -87, -22, -20, -7, -9, -14, 15, -31, -11, -30, 30, -83, -29, -40, 35, -12, 34, 4, 42, -47, -22, -19, 9, -8, 22, -19, 17, 4, -32, -20, 127, -14, -50, 15, -27, -30, -28, -30, 24, -40, 5, -22, 35, 30], [-47, 33, 19, -15, 30, -6, 56, 7, 45, -15, -43, 15, -21, -16, 42, 52, -18, 3, 51, -12, -39, -2, -34, 4, -12, 7, 8, -14, 13, 13, -51, -39, -71, -40, 65, 20, 31, -15, 14, -38, -51, -32, 31, -24, 24, -1, 3, 22, -22, -48, 38, -7, -1, 18, -62, 16, 58, -9, 37, 5, 21, 3, 8, 16]]], [[[-16, 21, 43, -12, -18, 17, 37, -2, 2, -15, -26, -34, -16, -20, 23, 40, -10, -12, -37, 34, 34, 7, -53, 12, 12, -10, -58, -23, -24, -38, -42, -74, -34, 31, 25, -28, -59, -8, -60, 58, 0, -3, 32, 51, 13, -48, 4, -22, 36, 62, 9, 42, 34, 48, -20, -7, -25, 22, 24, 49, -11, 29, -12, -3], [58, 12, 16, 23, 10, 52, -6, -28, -20, 6, -45, 3, -39, -9, 1, 2, -17, 1, -8, -14, 8, 14, -55, -20, -39, -1, -20, -3, -22, -6, -10, -12, 5, 17, -74, -2, -127, 37, -3, 44, -26, -46, -10, -3, 27, 7, 32, 30, 16, 42, 15, 16, 85, 56, -17, -50, -15, 45, 49, 32, 21, 12, 43, 21], [63, 0, 42, 49, 35, -3, -35, -67, -26, 30, -8, 8, -27, -43, -2, 2, 53, 7, -16, -14, -4, 27, -36, -17, 3, -48, -17, 32, -11, 54, -14, -32, -22, 57, -16, -34, -54, 5, 6, 20, 9, -8, 37, 22, -6, 33, 29, -1, 19, -7, 39, 11, 8, 49, -4, -32, -20, 59, 70, 25, 45, -21, 57, 19]], [[-38, 5, 20, -18, 32, 20, 12, 11, 8, -51, 6, 21, -10, 6, -10, 2, -5, 10, -42, -34, 25, 19, -7, -14, -29, 24, -51, -24, -1, -14, 9, -46, -16, 52, -6, -7, -57, 10, -20, -14, -29, -26, 25, 27, 19, -55, 4, 35, 18, 17, -17, 63, -15, -6, 0, -39, 12, -9, 93, -23, -28, -7, 24, 2], [-30, 0, -24, 17, -14, 7, 28, -12, -20, -19, -26, -36, 19, 0, -31, -28, -5, -7, -14, -40, 22, 13, -18, -14, -50, 2, -29, 13, -15, -6, 4, -33, 18, 22, -12, -25, -39, 1, 20, -22, -17, 3, 33, -27, -18, -10, 8, 12, -27, -33, -19, -36, -33, 4, -11, 29, 11, -34, 10, -11, -63, -6, 11, 38], [-11, 24, -48, -4, 18, 1, -17, 8, 10, 8, -17, -36, -11, -10, 5, 1, 20, -43, -22, -95, 7, 25, -29, -2, -15, -8, -33, 32, 18, 55, 25, -8, 1, 49, 20, -17, 8, 2, -34, -22, 19, 10, 16, -6, -26, 45, -14, 0, -29, -13, 36, 31, -1, 2, 4, 29, -32, 0, 25, 2, 20, -32, -1, -39]], [[5, 52, -19, 5, 37, -23, -15, 43, 14, -45, -21, 0, 0, 25, -11, -31, -15, -18, -29, -6, -42, 13, 14, -4, 22, 63, -25, 64, 24, 6, 28, -23, 12, 43, -1, -5, 31, -56, 17, 15, 2, -15, 12, 22, -7, -45, 22, -1, -45, -43, -13, 32, -13, 0, -11, -22, 25, -13, 63, -71, 17, -2, 0, 9], [-27, 4, -43, 33, -11, -47, 36, -45, 35, -18, -5, -21, -18, 53, -11, -1, -25, -38, 35, -6, 29, 5, 6, -41, 10, 22, -12, 32, 27, -18, 44, -9, 14, -8, 34, -8, 79, -15, 82, -6, 11, 79, -10, 10, -13, -41, 34, -7, 3, -27, -59, -38, -17, 19, 7, 54, 17, -14, 19, 2, -11, 20, -34, 16], [-54, -12, -13, 26, -3, -27, 15, 3, 41, -4, -6, -9, -19, 49, -12, 19, -59, -39, 63, -46, -18, -21, 49, -16, 4, 5, -28, -22, 64, 2, 5, 19, -12, 9, -4, -32, 63, -45, 35, -22, 32, 15, 11, -35, -24, 13, -11, -10, -32, 53, -14, -4, -39, -42, 23, 55, -45, 5, -26, 15, 16, 9, -52, -24]]], [[[-23, 35, 19, -29, -30, -60, -20, 10, -23, -23, -59, 1, 22, 13, 8, -13, 8, 12, 4, 41, -29, 18, 33, -48, 29, -81, 44, 48, -6, 5, 12, -51, 3, -48, 19, -23, 35, -34, -17, 53, -30, -32, 39, -12, -28, -16, 11, -16, -7, -60, -28, -12, 86, 14, 37, 45, -32, -14, 25, -1, -2, -31, -73, 34], [-33, 45, 21, 14, -38, -16, 70, -52, 30, -23, -33, 14, 19, 10, 101, 13, 65, -2, -36, -10, 45, 93, 2, 13, -74, -45, 37, 18, 8, -95, -27, -51, 32, 46, 89, 1, 28, -24, -26, -31, 40, 43, 36, -28, -4, 9, 9, 10, -54, -5, -67, 7, 12, -11, -7, 35, 39, 7, -40, 35, 46, 24, 32, -25], [-30, 89, 7, 50, -33, -16, -11, 52, -55, -55, -35, -22, -28, -12, -27, -64, 49, 4, -31, -74, 36, 81, -25, -32, -24, 45, -60, -117, -11, -63, -22, -63, -35, -41, -18, 39, -2, -49, -31, 78, 9, 50, -32, 31, 18, 15, -13, -21, 43, -17, -87, -28, -30, 0, 30, 3, 68, 14, -56, 6, 81, 7, 87, -34]], [[1, -64, -29, 32, 40, -15, 6, -43, 2, 22, -7, 2, -28, 13, 20, 18, -11, 8, -10, -25, 11, 6, 34, -51, 12, -18, 23, 22, 3, 25, 63, 86, 42, 0, -2, -48, 94, 2, 21, 44, -4, -44, -11, 9, 4, 5, -11, 59, 21, -10, 24, -6, 47, -19, 18, -53, 21, 16, 23, -27, -68, 1, -34, -50], [52, 52, -3, 2, 13, -3, 21, -43, -19, 14, -20, -40, 57, -16, -8, 73, -5, 11, -50, -35, 33, -15, -95, 5, -63, -20, -17, -1, 13, -75, 83, 63, 10, -27, 18, -42, -63, -47, 38, 24, 27, 31, -10, -15, -1, 29, -6, 11, -4, 44, -17, -15, -26, -31, -41, -27, 39, -9, -35, 14, -20, -37, -19, -36], [8, 77, -31, 11, 23, 1, -54, 17, -64, -7, -10, 6, -9, 57, -56, 15, -43, 11, -42, -12, 60, 19, -34, -48, -11, -16, 16, -80, -6, -41, 42, 79, -46, -78, -19, 50, -21, 29, 6, -12, -6, 81, -27, 75, 53, -48, -1, -19, -1, -8, 30, -68, -41, 15, -38, 33, -11, -2, 29, -25, 0, 3, 60, -49]], [[-14, 13, -30, 11, 4, -4, 49, 49, 13, -24, -27, 60, -55, -2, 3, -5, -7, 26, 28, -29, -76, 13, 21, -26, 8, -24, -28, -59, -26, 4, 30, -34, -11, 50, 15, -46, 6, 3, -7, 67, -54, 0, -26, 12, 29, 49, -31, 56, -10, -40, 55, 43, 20, 18, 25, -57, -63, 127, 39, -89, -36, -10, 21, -34], [41, 19, 8, -4, -63, 2, 12, 78, -13, -48, -39, -12, 39, -54, -58, -8, -10, -25, 15, -5, 15, 8, -29, 25, -5, -11, -32, 8, 38, 37, 60, -5, -63, -40, -4, -36, -44, 58, 46, 29, -33, -72, 59, 83, 32, 50, 21, 46, -62, -55, 33, 59, -20, 45, -34, -46, -69, 28, 6, -52, -62, -37, -27, -2], [-22, 11, -42, 29, 12, -51, 16, 123, -24, -37, -64, 28, 7, 49, -46, -16, -64, 17, 11, -25, 74, -8, -64, -35, -17, 19, -41, 14, 12, 24, 32, -9, 2, -83, 19, -10, -25, 113, -5, 14, 8, -71, 9, 97, 16, 17, -10, 52, -24, -46, 82, 21, -38, 8, -4, 1, -27, 2, 51, -13, -37, -79, -49, 39]]], [[[-15, 51, -32, -5, 1, -42, -49, 23, 46, -65, 1, -53, 61, 28, -52, -9, 45, -2, -90, -19, -20, 13, -17, 62, -25, 42, 74, 62, 59, 44, -7, 80, -56, -61, 13, -11, 26, -13, 28, 10, -60, -16, 33, 48, -6, -45, 38, 16, -6, -18, -27, -72, -35, -42, -7, -44, -3, -13, -1, 43, 29, 73, -56, 37], [-75, 87, -35, -3, -1, -103, -34, 28, 57, 5, 7, 0, 29, 6, 59, 40, 67, 34, -40, -54, 105, 45, -39, -26, -69, 45, -5, 7, 18, -8, -48, 69, 41, -113, 22, -23, -7, -58, 67, 86, -25, -35, -32, -56, -13, -30, 54, 15, 27, 6, -57, -12, -65, -28, -21, -9, 7, -43, -9, 86, 34, -51, -1, 18], [-127, -43, -42, 35, 5, -39, -43, -3, 45, 6, 1, 119, -54, 17, 29, -61, 14, 55, -38, -5, 35, -29, -3, -32, -38, 48, -7, -28, 0, -44, 42, -44, -36, -73, -62, 46, 0, -26, 50, -24, -69, -11, 39, 11, -15, 73, 62, 45, 24, -2, -79, 7, -40, 11, 3, 18, 18, -66, 5, 17, 64, -28, -16, -31]], [[59, 19, -21, 25, -18, -31, -21, 39, 1, -37, -47, 57, 32, 64, 4, -28, 98, -34, 22, 9, -14, 8, 10, -2, -63, -7, 102, 62, -5, -36, -40, 68, -71, 52, 24, 76, 4, -39, 36, 6, 15, 124, -30, -64, -28, 47, 1, -10, 35, 14, 24, -54, -7, 36, 7, -21, -34, 29, 8, 64, 9, 30, 16, -13], [-2, 45, -12, 1, 0, -44, 33, 1, 46, -9, -45, 37, -45, 21, 51, -5, 59, 19, 39, -22, 8, 57, -24, -11, 16, 2, -43, 44, 16, -32, -95, 12, -24, 43, 7, 50, 13, -29, -35, 35, -4, 62, -45, -31, 36, 59, 35, 17, 39, -29, -43, -80, 0, 5, -20, -29, -28, -26, 54, 24, -4, -44, -15, 35], [61, -55, -24, 33, -11, -62, -1, -15, 53, 48, -46, 50, -91, 88, 34, -4, 127, -44, 18, -39, -47, -33, 54, -3, -45, 34, 13, 3, -1, -6, -40, 7, -41, 2, 21, 6, 38, -1, 44, -71, -8, 23, 29, -45, -18, 106, 29, 37, 20, -4, -78, -30, -12, -48, -35, 70, -1, 3, -2, 23, -63, -43, -2, -34]], [[28, 67, 4, -1, 17, -12, -22, 41, -13, -4, 34, 59, 100, -41, 25, -21, 31, -49, 117, -7, 31, -52, 15, 70, -95, 40, 57, 11, -43, 5, 37, -30, -34, -9, -9, 57, -3, -40, -46, -6, 43, 29, 15, -105, -54, 17, 12, 23, 15, -33, -48, -50, -83, 65, 71, 9, 3, 14, -4, 8, -39, -105, 6, 11], [-39, 43, -33, -5, -20, 12, 4, 52, 8, 37, -8, -3, -25, 12, 24, -3, -80, 4, 104, 2, -4, 24, 9, 18, -91, -28, 15, -20, 30, -44, 26, 46, -48, 10, 66, -5, -26, 21, -68, -14, 58, 32, 36, -4, -62, 65, 51, -9, 27, 22, -48, -53, -11, 16, -26, 19, -9, 54, 7, -25, -21, -80, 15, -58], [6, 18, 19, -37, 14, -12, -43, 16, 60, -4, -3, -37, -37, 45, 26, 16, 33, -32, 25, -64, -12, -31, -2, -23, -62, -9, 22, -16, -42, -43, 25, 44, 16, 17, -5, -11, 39, -13, 6, -22, -1, -6, 3, 92, -28, 31, 10, 12, -52, 38, -40, -102, 11, -18, -5, 75, 44, 11, -52, -28, -96, -35, 54, -52]]], [[[48, 70, 23, -102, -7, -43, 39, 45, 3, -43, -6, 53, 26, 10, 53, -7, 34, -54, -35, 68, -26, -8, -29, 67, -60, -49, 65, -73, -38, -32, -27, 0, -91, -9, 51, -102, -25, -48, 49, -60, -22, -46, 23, 66, 54, 45, 16, -3, 1, -23, 7, -51, 83, 14, -18, -33, -55, 10, -23, 8, 45, -38, 27, -32], [27, 56, -12, -47, -8, -37, -22, -34, -44, -34, -39, -23, 78, -33, 33, -64, -26, -23, 9, -13, -45, 21, 108, 34, -33, 27, 46, 13, -53, -10, -25, 21, -113, -29, 66, 36, -31, -24, 55, -39, -14, 10, -4, -7, 10, 35, -29, 20, 30, 4, 6, 98, 12, 3, 0, 13, -56, -46, 9, -36, 22, 3, 24, -53], [6, 60, 24, -26, -2, -39, 56, -16, 36, 8, -22, 63, 66, -38, 0, -70, -20, -5, -100, 50, 2, -16, -29, -6, -52, 16, 41, -25, -36, -1, 0, 11, -82, 39, 31, 12, -46, -63, 55, -5, -80, -12, 70, -18, 61, -22, 11, 21, 5, 33, -73, 17, 26, 3, 27, -26, -50, -47, -3, 40, 38, -3, 22, 40]], [[-14, 93, -13, -86, 30, -20, 35, -2, -44, 34, -15, 77, -70, 36, 47, -42, 37, 9, 20, -24, -43, -15, -50, 23, -80, 13, 9, 9, -23, -6, 5, -94, -36, 6, 30, -25, -32, 15, 7, -64, -13, -9, 1, 17, 46, 2, 71, -7, 1, -30, 30, -123, -21, -10, -8, -17, 15, -28, -16, 5, -43, 24, 27, -27], [-1, 43, -23, -98, 35, -50, -23, -41, -56, -11, -13, 38, 49, -42, 28, -53, -15, 48, 46, -24, -8, -56, 23, -35, -29, 44, -19, -18, -30, -42, 59, 16, -55, 8, 87, 46, -57, -14, 28, -12, 19, -28, 15, -58, 22, 28, 40, -1, -32, -3, 40, 24, -48, -40, 34, -13, 67, -42, -5, -17, 7, -29, 36, 15], [-22, 73, -31, -67, 30, -25, 31, -47, -13, 37, 9, 37, 20, 27, 11, -93, -43, 40, 47, 16, -10, -31, -46, -24, -28, -18, 16, 5, -80, -41, 8, 1, 28, -13, 40, 1, 3, -76, 22, -30, -19, -44, 18, -42, 31, -3, 86, 38, -46, -29, -5, -61, -25, -52, 17, 48, 71, 10, -7, 2, 20, 2, -22, 67]], [[7, 5, -6, -63, 102, -23, 50, 15, -55, 74, -41, 31, -53, 25, 18, 18, 59, 86, 2, -48, -7, -37, -13, -29, -30, 23, -21, 38, -27, 4, -14, -18, -17, -35, -21, 22, -82, -29, 0, 10, 14, 73, -6, -75, -76, -27, -29, 3, -39, -28, -20, -112, -20, 6, 18, -59, -45, 38, 11, 43, -24, -33, 0, -53], [21, 21, -7, -67, 83, -8, -15, 37, -63, 41, -108, -6, -22, -50, 3, 27, 22, 121, 32, -14, -4, 16, 45, -50, -30, -25, 11, 6, -5, -17, 44, 64, 12, -24, -8, 63, -17, 24, 9, 36, 83, 53, 32, -51, -72, 17, -31, -17, 7, 23, -26, 11, -45, -63, 20, -23, -19, 16, 38, 5, 18, -101, 38, -34], [7, -8, -34, -68, 67, -23, 22, 42, -16, 54, -42, -12, -30, 15, -34, -66, 2, 127, 46, 42, 16, -18, -27, -48, -19, -24, -35, -24, -69, -6, 57, -58, 68, -82, 17, 35, -1, -18, -15, 21, 34, 71, 8, 29, -30, 41, -3, -36, 45, -8, -24, -87, -32, -67, -1, 6, -10, 52, -3, -27, -12, 4, -9, -31]]], [[[-23, 48, -12, -27, -40, -47, 23, -49, -70, -19, -24, -22, -21, -16, 17, -20, 13, -33, 21, 67, -7, -5, 78, -84, -24, -21, -15, -3, 18, 22, -8, -104, -4, -36, -16, 44, -55, -30, 26, 54, 90, -36, -6, -94, -112, 16, -65, 48, 29, -11, -56, 22, -34, 59, -3, -39, -23, -64, -21, 18, -49, -40, 44, -29], [-52, -9, -15, 5, -71, 4, 27, -10, 63, -64, -94, -61, 6, 75, -32, -26, 71, 33, -30, -9, 9, 19, 23, -41, 51, -29, -10, -71, 11, 9, 47, -59, -7, 30, -46, -47, -42, -45, 28, 4, 68, -15, 8, -91, -21, -5, -20, -10, 75, 34, -72, -42, -38, 55, -17, -93, 92, -68, 58, 8, -39, 19, 87, -47], [-42, -8, 9, 18, -11, -17, 25, -33, -28, -61, -38, 8, -5, -9, -64, 13, 23, 43, 12, 28, 4, 0, 21, -20, 43, 67, -22, 49, -68, 27, 7, -5, 64, 40, 11, -2, -19, -78, -24, 14, 84, -37, 28, -2, -4, -50, 4, -14, -23, -17, 14, -26, -92, 44, -59, -42, 37, -69, 82, 7, -55, -17, 2, -66]], [[65, 19, -62, -9, -10, 8, 17, -16, -14, 20, -5, -14, -40, -6, -34, -53, -62, -24, 5, 83, 4, -39, 7, -53, -37, 47, -45, -34, 4, -76, 28, -14, -57, -25, -35, 37, -11, -8, -40, 21, -33, 45, -10, 14, -15, 54, 6, -6, 31, -7, -11, 30, 39, -8, 66, 35, 39, 8, -32, -29, -30, 5, 9, 83], [17, -34, -68, -31, -51, 10, 4, 10, 42, 35, -85, 26, 44, 69, -54, -46, 42, 54, -51, 18, 34, -25, 34, -9, -43, -93, 24, -52, -15, -99, 50, 51, 53, 32, 3, 49, -5, -15, 51, 2, -37, -33, 27, 15, 14, 62, 3, -5, 33, -3, 25, -50, 63, 13, 49, 5, 88, 23, -7, 28, -54, 61, 75, 71], [-12, -21, -21, 52, -37, 27, 53, 26, 3, -1, -29, 108, -6, -16, -19, 4, -48, 48, 19, -46, -23, 11, 1, -82, -13, 11, 39, 17, -38, -14, -26, 10, -13, 15, 33, 74, 8, 0, -20, 66, 7, -69, 3, 40, 82, -3, 2, 1, 11, -9, 14, -62, 7, 8, 53, 13, 22, 5, 52, -19, 10, -36, 55, 50]], [[69, 83, 55, 33, 33, 11, -48, -8, -49, -25, 22, -21, -47, 65, -46, -4, -49, -4, -11, 21, -12, 29, 32, 30, -20, 58, -22, 69, 18, -6, -47, -16, 9, -4, 55, 9, 93, -85, -54, -32, -47, 27, 42, 61, -31, 25, -15, 0, -10, 31, -11, 42, 29, -43, 31, 29, 41, -39, -46, -31, -12, 4, -45, -15], [-6, 0, 38, -44, -19, 44, -17, 13, 25, -23, 6, -11, -26, 31, 5, -11, 15, 32, -15, 32, 11, -5, 127, 8, 4, -10, 61, 9, -11, -14, -7, 92, 12, 25, -27, 1, 97, -12, -19, 21, -41, 0, 31, 51, -57, 23, -8, -43, -73, 0, 30, -35, 31, -1, -9, -5, 53, -15, -60, 14, -32, 3, -70, -8], [4, 21, 6, -21, -2, 104, -34, 49, -61, 11, -6, 39, 11, 27, -14, -22, -21, 3, 49, 0, -32, 25, 29, -39, 4, 22, 31, 53, 5, -38, -50, 44, 4, -44, -17, 2, 12, -25, -43, 2, -52, -6, 58, 41, -7, -18, -11, -19, 7, 1, 43, -43, 51, -126, 31, 28, 75, 7, 44, -7, 7, -14, -56, 5]]], [[[65, -56, 16, 68, -36, 64, -40, 50, -73, 25, -9, 19, 59, -14, 47, -28, -18, -52, -13, -6, -7, 50, -16, -50, -21, -6, -31, -63, 2, -100, 15, -57, -38, 7, -70, -55, -17, 11, 2, -50, -50, -21, 17, 22, 25, -57, 33, -25, -15, 83, 26, -35, 25, -89, 39, 90, 15, 5, 21, -44, -97, 2, -76, 61], [99, 46, 2, 66, -48, 14, -4, 70, 67, -43, -79, -17, 43, -47, 57, -1, -15, -66, -20, -109, -11, 100, 37, -29, -63, 17, -65, -18, 69, 2, -43, -42, -52, 63, -46, -28, -56, 4, -24, 52, -33, -23, 16, -51, 53, -5, 9, -9, -41, 84, -33, 26, 22, -57, 84, -24, -3, -49, -29, 10, 13, -7, 17, -22], [44, -1, -26, 36, -20, 12, -41, 2, -25, -13, -9, -35, 3, 0, -11, -8, -3, -10, 36, -96, -3, 40, -17, 0, 18, -72, -63, 3, 44, 1, -28, -11, -57, -9, 35, 85, -32, 12, -37, 68, -94, -9, 21, -35, -62, 5, -34, -13, -38, 12, 17, -36, -1, 17, 4, -72, 43, 29, 54, -45, -31, 22, 11, 10]], [[14, -15, 10, -24, -1, 3, -19, 27, -67, -13, -53, 109, 7, 5, 65, 7, -8, 28, 7, 28, 1, -41, -46, -38, 26, -30, 8, 25, -48, -110, 42, -16, 7, -7, 11, 11, 17, 7, 40, -9, -17, -12, -15, -12, 33, -16, 17, 63, 47, -14, 8, 15, -2, -1, 71, 54, 18, 7, -13, -41, -19, 75, -20, 1], [39, 24, -5, -50, -39, 8, 6, 31, 30, -64, -54, 20, 32, -62, 16, 15, 6, -68, -5, -29, -45, 35, -29, -12, -15, 6, 23, -59, -57, -68, 19, -40, 2, 48, -26, -51, -37, -17, 19, 18, 7, -37, -36, -47, 27, 5, 91, -5, -20, 14, -40, 91, 4, -19, 119, 32, -45, -58, -38, -18, 51, -5, 92, -15], [-43, -12, -13, -25, -12, 32, -13, 23, -55, 49, -30, -44, 26, 36, 13, -6, -64, 29, 29, 5, -16, -13, -58, 2, -2, -16, 33, 3, -46, -98, -36, -13, -14, -8, 1, 46, 31, -25, -31, 29, -20, -35, 47, -7, 2, 38, 16, -5, 34, -51, 24, 5, 11, -19, 13, 15, -10, -31, 54, -6, 44, 49, 71, 53]], [[-24, 6, -16, 16, -6, -30, 49, -53, -22, -38, -38, -11, 45, -17, 35, 18, 43, -21, -17, 36, 46, 27, -15, -15, -34, 72, 12, 17, -5, -22, 72, -19, -13, -46, -4, 11, 3, 3, 7, -33, -33, 70, -19, 42, -5, 4, -28, 1, -24, -53, -25, 11, -14, 101, -52, -7, 25, 22, -19, -66, -23, 19, -119, 5], [-13, 19, 34, -42, -19, 1, 46, -86, 2, -26, -68, -56, 87, -18, 1, -40, -56, -127, -31, -16, 24, 75, 20, 19, -12, 95, 41, 50, 11, 15, 110, 61, -4, -10, -12, -36, -40, -67, -20, -63, -13, -36, -23, 64, -7, 96, 19, -7, -1, -14, -38, 18, 23, 67, -48, 38, -2, -16, 10, -29, -66, -44, 8, -1], [-21, -46, -65, -68, -13, 25, 9, 29, 9, 47, -33, -31, 9, 22, -48, 6, -5, 15, -21, -9, 39, -31, 23, 11, -45, 16, -10, 9, -29, -24, 10, 20, 19, -76, 58, -71, 37, -9, -36, -43, -17, 80, 2, 27, 91, 36, -27, -2, 11, -32, 3, -27, -23, 15, -78, 20, -36, -11, -18, 1, -76, -12, -6, 32]]], [[[-83, -108, 42, 27, -27, -31, 16, -74, 17, -37, -26, -16, -49, 6, -44, -2, -1, 16, 20, -27, -12, 4, -5, -31, -17, -2, -7, -80, -42, 27, -40, 12, 51, -40, 52, 6, -72, 3, -3, -21, -10, 21, 72, -38, 10, 4, 14, 10, 18, -26, 17, 11, -28, -2, -41, 20, -9, 46, -7, -27, -32, -61, -28, -23], [14, -67, 36, 22, -36, -21, 49, -46, 28, 1, -19, -74, -14, -29, -43, -74, -14, 76, 4, 16, -23, 31, -22, -2, 50, 38, 34, -26, -9, -30, -95, 12, 30, -9, 50, 37, 29, -32, 9, 5, -1, 14, 52, 22, 5, -61, 14, -57, -16, 2, 34, -41, -35, -27, -54, -8, 7, 19, -29, 70, -27, -9, -13, -36], [48, -58, 23, 7, -20, -16, 1, 3, -8, -21, -52, -62, 27, 21, -6, -76, 21, 36, 2, 96, -6, 45, -20, 14, -38, -26, -73, 15, 5, 27, -39, 66, 31, -18, 24, -11, -64, 25, 11, 32, 56, -12, 23, 47, -5, -58, 22, -12, -18, -14, -4, 14, 11, -29, -22, 8, -16, 20, -45, 13, -40, 7, 12, -9]], [[9, -36, -35, -24, -27, -10, -6, -25, 49, -55, -20, 29, 10, 15, -9, 19, -32, 10, -29, -38, 11, -31, 11, -11, -13, -3, -14, 35, 27, 4, -15, -6, 67, -45, 24, -21, -73, 17, -5, -52, -6, -8, 26, -23, -34, -22, 21, -34, 22, -3, 7, 30, -31, 22, 26, 127, -4, -6, -9, 28, -47, -37, -65, 10], [5, -29, -30, -2, -50, -11, -33, -31, -22, -29, -12, -21, -75, -3, -66, -25, -37, 32, -53, -23, 26, -22, 8, 2, -20, 70, 40, 4, -33, -43, -47, -14, 66, -1, -1, 18, 37, -34, 62, -20, -51, -29, 47, 10, -2, 13, 11, -25, -21, 51, 46, 1, -5, 30, -20, 79, -16, 31, 22, 4, -39, -17, -8, -11], [2, -45, 25, -1, -21, 18, -1, 5, 0, -35, -44, -11, -42, 47, -4, -75, -54, 33, -18, -14, -44, -29, -23, -64, -22, 49, -56, -21, 32, -39, -25, 26, 30, -30, 23, -21, -24, 43, 7, 57, 31, 13, 13, -14, 27, -55, -12, -21, 34, 14, 16, -30, -3, 57, -16, 24, -3, 14, 60, 17, 16, -58, -6, -18]], [[27, -11, -45, -32, -37, 18, -39, 5, 35, -11, 1, 14, 11, 50, -1, 23, -33, -23, -2, -25, 8, 34, 22, 50, -40, -44, -20, 30, 23, -20, -11, 9, -16, 51, 95, 10, -23, 15, 46, -80, 7, -1, -54, 46, -37, -33, 37, -53, 35, -22, -33, 8, 3, 24, 19, 45, 10, -42, 10, 20, -50, 67, 13, 52], [4, -23, -28, 10, -37, -22, -18, -46, -18, -34, 22, 4, 34, 24, 4, 0, 20, -4, -2, -42, 5, 41, 27, 40, 1, 8, 27, -41, 40, 25, -59, -32, 10, 41, -34, 12, 3, 19, 42, -7, 11, -3, -70, 26, -33, -14, -13, 26, -43, 39, 11, 16, -18, -1, 2, 21, -33, -38, 8, -2, -45, 68, 3, 17], [-24, -61, -15, 47, -39, 10, 19, 0, -42, 26, -40, 70, -3, 78, 6, 18, -8, 26, 9, -15, 60, 30, -47, 22, 8, 78, 12, 26, 0, -17, -11, -54, -20, 21, -42, 36, -40, 19, 3, 38, 24, 46, -24, -58, -66, 35, 5, -21, -19, 23, -55, -32, 22, 78, 36, 29, -20, -39, 32, -26, -15, -52, 50, 71]]], [[[-2, -57, 44, 7, -3, -11, 22, -25, 69, 21, -30, 25, 0, -36, 15, 57, -13, 52, 24, -42, 19, -13, -20, 52, -37, -36, 39, 19, -13, -6, 27, 21, -33, -14, -11, -7, 48, 18, -6, 16, -30, 20, -59, -52, 3, -39, -16, -66, -72, 82, -75, 59, 20, -30, 37, -37, 39, 15, 28, 56, -58, 41, -10, -30], [37, 26, -33, -34, 32, -6, 15, -44, 9, 31, -57, -58, 1, -28, -47, 1, 31, 6, 17, -105, 52, 27, -1, -8, -42, 50, 31, 5, 22, 0, -1, 16, 10, 15, 21, -4, 61, -53, 45, 3, -10, -51, 10, -22, -26, -4, -88, -28, 8, 50, 3, 76, 0, -17, 65, -88, 84, 24, -37, 32, -29, -12, 84, 16], [-8, -51, -2, -45, 6, 24, -16, 66, -30, -26, 58, -26, -35, 4, -25, 53, -79, 27, 28, -80, 44, 1, -12, -27, -30, 78, 17, 32, -9, 61, 51, -41, -89, -36, -22, 3, -22, -47, 7, -33, 4, 33, -72, 5, -28, 79, -44, -47, -4, -8, -49, 46, -16, 27, 44, -49, 70, -22, -16, -25, 13, 62, 20, 50]], [[-118, -32, 14, 35, -46, -10, 8, 6, 24, 29, 42, 86, 34, -19, -21, -4, -44, 62, 12, 57, 38, -54, 34, -6, 12, -60, 54, 47, -30, -40, 13, -35, -33, -2, -52, -42, 11, 13, -8, -23, 36, -12, 16, 17, 125, 10, 11, -56, 80, 45, -23, 48, 59, -20, 15, 59, 15, 31, -59, -20, -30, 11, -43, -38], [19, 127, 14, -18, -20, 1, 14, -20, 29, 18, 61, -32, 87, -41, -54, -19, 39, 25, -55, 6, 33, -3, -62, 2, -18, 33, -7, -41, 35, -8, -52, -16, -32, 20, 33, -63, 0, -28, 21, -67, -2, -5, 44, 48, 31, 33, -65, -35, 10, 47, 1, -6, 3, 45, -13, 27, 21, -1, -7, -4, -36, 48, -15, 25], [-41, -40, 47, 17, -45, 17, -2, 55, -6, 10, 0, 10, -33, -35, 10, -45, -36, 12, 36, -36, 54, 21, 58, -11, 2, 19, -18, -18, 42, 41, -10, -8, 3, -17, 59, -7, 39, -31, 2, -8, -30, 21, -47, -23, -16, 48, -25, 25, 24, -41, -31, 43, -12, 2, -6, -7, -8, -20, -3, -22, -39, 28, -25, 17]], [[-85, 51, 54, -19, -57, -7, 47, -24, 5, -5, -55, 55, 16, 27, 27, -3, -36, 14, -17, 32, -28, -60, -58, 27, 70, -44, -1, 54, 22, -6, 31, 10, -31, 0, -23, -17, -13, -7, 63, -74, 37, 3, 28, 78, 60, -23, 0, 10, 31, 62, -29, 98, 54, -43, -6, 8, -34, -64, 21, -69, 60, 5, -18, -44], [-5, 87, 81, -2, 5, -30, 20, -72, 72, -2, -34, -26, 65, -13, 27, 2, -2, 6, -27, 0, 65, -43, -19, 21, 32, -46, 13, -40, -2, -20, 6, -32, -18, 8, 8, -62, -47, -22, 80, -84, 85, -34, 54, 75, 37, -3, -25, 49, 48, 44, -21, -39, 21, 67, -43, 36, -31, -15, 80, -24, -7, 34, -34, 0], [-35, -29, -31, 25, -53, 50, 25, -59, 7, -2, -45, -44, -8, -14, 42, -24, 52, -42, -22, -46, 33, 62, 70, -6, 14, -9, 12, 17, 11, 28, 4, -50, 14, 35, -18, -28, -33, -47, -62, 8, -22, 46, 22, -75, -22, 45, -13, 64, -3, -18, -35, 3, -42, -28, -9, 37, -9, -38, 89, -109, 89, -6, -62, 9]]], [[[-41, 5, -14, -63, -12, -22, -47, 41, -6, 11, -17, 6, -71, -27, 23, 76, -3, -41, -2, -1, 25, -3, -40, -60, 28, -11, -57, -49, -39, 16, 0, 47, 42, -22, 43, 49, -16, 2, -8, 55, 9, 36, 21, 47, 0, 24, -4, -19, -30, -62, -32, -7, -21, -24, -2, -10, 27, 31, 4, 21, 25, 20, 32, -31], [-1, 17, 12, -53, -27, -10, -5, 36, -12, 18, -20, -44, -54, 25, -55, 37, -45, -28, -34, 27, 38, -51, -15, -51, -17, 118, -34, 27, 14, -12, -60, -21, -51, -10, -1, -42, 18, -43, -33, 70, 14, -4, 18, 12, -24, -24, 39, -13, -27, -28, -18, 63, 0, -35, -25, 42, 54, 8, -33, 23, -32, 2, 19, -2], [-11, 28, -3, -55, 40, 31, -43, 52, 41, 10, 22, -25, 3, 3, -67, 15, -11, 8, -31, 21, -14, -36, 6, -21, -20, 55, 11, 1, 7, 5, 24, 4, 55, -40, -63, 2, 22, -15, -2, 49, -1, -10, -11, -38, -2, -41, 19, -15, 27, -16, -7, 19, -9, -23, 68, -12, 14, 24, -16, 9, 25, 5, 14, -26]], [[-7, -12, -21, -3, -10, -24, -26, -3, 4, -14, -20, 36, -76, -14, -56, 7, -66, -45, 7, -25, 36, -49, -36, 7, -32, -30, -30, 17, 39, -4, 30, -104, -4, 27, 39, 27, -55, -6, -34, -15, -1, 29, 0, 105, 61, 70, 26, 38, 23, -1, 10, -23, -12, 19, -8, -26, -16, 7, 15, 5, -47, 3, 9, -21], [12, -57, 21, 40, 22, 7, 34, 11, -8, -11, -17, -22, -73, 3, -57, -5, -57, -3, -17, 22, 23, -47, 3, 14, -33, 108, -40, 16, 57, 0, 23, -62, -9, -22, -6, -50, 16, -8, -29, -33, 30, -6, 1, 51, -6, 8, 15, 49, 78, -16, -5, -10, 22, 21, -12, 34, -11, -72, -7, 22, 3, -37, -60, 72], [24, 21, 28, 14, 23, 13, -14, 26, 6, 37, -7, -16, 18, -2, -5, -7, 15, -26, -10, 2, -12, -30, 14, -21, -39, 91, -30, -32, -3, -11, 21, 10, 56, -47, -3, -36, 15, -2, 33, -33, 30, -17, -36, -22, -52, -12, -14, 55, 49, 6, 2, -5, 19, 50, 58, -35, 7, -4, 23, 9, 1, 37, -90, 4]], [[-1, -25, 15, 31, 4, -21, 8, -41, -34, 63, -59, -15, -47, 21, 42, 0, -48, 25, 50, -61, -29, -61, -16, 26, 41, -25, 27, -26, 11, -11, -9, -125, -37, 22, -66, -5, -1, 19, -18, -30, 6, 6, 8, -8, 47, 25, 13, 45, -34, 44, -9, 26, -24, 14, -19, 6, -10, 27, -8, -22, 34, 6, -14, -15], [-1, -12, -12, 53, -11, 6, 40, -68, 32, 40, -59, 28, -78, 5, -22, 26, 5, 21, 17, 29, 8, 26, 24, 19, 31, 4, 2, -31, 17, -25, -47, -48, -13, -1, -42, 27, -27, -21, 70, -37, -2, 32, -5, -13, -38, -3, 19, 74, 3, 43, -20, -26, 18, 44, 20, 1, -14, -32, -11, -38, 127, -35, -84, 15], [1, -25, -14, 13, -85, -1, 16, 15, 32, 12, -46, 45, -36, 20, 40, -9, 32, -10, 3, 29, -12, -8, 59, -39, 55, -38, 19, -27, -8, -10, -18, -8, -4, -56, -61, -17, 13, -18, 20, -10, -27, -16, 14, 7, -20, 1, 50, 32, 2, -18, 2, 0, 13, 57, 18, -33, -61, 41, 49, -17, 21, 37, -91, 5]]], [[[16, -105, -50, 8, 16, -60, -28, 48, -13, -11, -58, -4, -10, -53, 3, -55, 0, -13, -51, 29, -14, -22, 42, 5, 16, -8, -46, -1, -40, 6, 30, 48, 61, -60, -17, 22, 8, 61, -55, -13, 42, -32, 5, 8, -55, 20, 49, -32, 60, 23, 53, -30, 24, 2, 31, -26, 25, -29, 60, 51, 10, -61, -9, -61], [30, -93, -23, 32, 62, -54, -36, 67, 38, 17, -35, -1, -55, -22, -38, 60, -17, -33, -3, 41, -14, 34, 56, -11, 50, 10, 78, 20, -3, -1, 2, 35, -10, -5, 23, 49, -43, -7, -6, 24, -45, -47, -26, 2, -19, 37, 9, -31, 43, 88, 48, -81, 30, -23, 28, -72, 54, 29, 37, 72, -25, 24, -17, -58], [13, -29, 5, 26, 6, -81, 14, 127, -85, -49, -64, -23, 16, 34, -32, -1, -30, -6, -50, -37, 8, 42, 45, 18, 2, -41, -47, -31, -22, 35, 37, -38, -19, -17, -40, 41, -22, 7, -31, 26, -50, 25, -13, -3, -51, 17, -9, 9, 39, -44, 8, -33, 39, 32, 16, -23, -9, 30, 98, -14, 19, -79, 30, -36]], [[-23, 19, 31, -14, -9, 40, -31, -27, -12, 67, -30, 32, 39, -34, -49, -32, 6, -49, -21, 30, -46, 16, -12, 15, 18, 27, -41, 1, 5, -26, -26, -66, -36, 19, -8, -15, 2, 24, -65, -83, 29, -8, 0, 24, -5, 32, 11, 34, 60, -6, 8, -12, 47, 61, 38, 31, -21, -37, -42, -24, -3, -13, -36, 30], [-2, 3, 30, -14, -8, 11, -46, 51, -20, 55, -8, 40, -3, -13, -59, 48, -53, -48, 24, 11, -27, 18, 14, -8, -34, -34, 42, -25, 10, 3, -35, 18, -62, -10, 18, 10, -2, 32, 18, -23, 2, -7, -11, -19, -33, 59, 7, 46, 20, -5, -11, -72, 70, 43, 33, -23, -2, -29, -55, 43, 59, 45, -31, 103], [6, 24, 41, 17, 61, 58, -1, 58, -38, -2, 30, 57, 3, 25, -46, 44, -47, -29, 2, -63, -25, -17, 36, -38, -22, -29, 29, -28, 5, 71, -35, -63, -26, -32, -7, 26, 26, 28, -5, -29, 2, -18, -33, 7, -109, -10, -6, 26, -22, -20, -5, 10, 44, 7, 22, -23, -60, -25, 5, -15, -10, -18, -9, 63]], [[13, 65, 18, -39, -22, 4, 15, -63, -15, 94, -41, 5, 38, 1, -53, 7, -4, -35, -31, 8, -29, 29, -42, -11, 41, 66, 33, 45, -8, -51, 41, -58, -19, -20, -26, 24, 53, -23, -21, -45, 20, 17, 7, -66, 26, -64, -8, 13, 45, 23, -18, 1, 22, -12, 18, -48, -71, 7, 13, -40, 11, -15, -69, 6], [-2, 2, -22, -8, -1, -32, -33, -25, -17, 92, -82, 2, 66, -2, -43, 19, -53, 3, -42, 35, 13, 26, -10, -44, 39, 28, 95, 3, 5, -21, 23, -17, -20, 33, 23, -6, 36, -37, -42, 5, -7, 1, 37, -63, 20, 35, -9, 26, 25, 2, -29, -17, -30, 5, 49, -30, -30, 24, 32, 39, 17, -2, -36, 31], [22, -24, 7, -5, 20, 12, 0, 11, 18, 43, 19, -35, 69, 22, -45, 54, -9, 19, 13, 4, 43, 12, 48, -38, 6, -8, 12, -12, 7, 15, 34, -92, 35, -3, 10, 33, 15, 17, 3, 26, 3, 48, -16, 33, 0, 52, -31, 19, -44, 41, -20, 5, 6, -28, 22, 23, -78, 4, 47, 33, -76, 34, -1, 58]]], [[[-41, -28, -38, 11, -30, -96, -37, -17, 104, 53, -16, -39, -11, 52, 25, 2, -42, -5, 0, 44, -2, 49, -9, 57, 32, 22, 34, 2, 21, -14, -15, 39, 98, -27, 2, 38, -20, -64, 21, 15, -55, -48, -7, 94, 75, -8, 20, -12, -4, -69, -76, -34, -32, -7, -16, -57, -30, 104, 1, 52, 17, -44, 2, -12], [-38, -42, -8, 41, -18, -51, -17, 10, -19, 23, 40, -78, -51, 12, 43, 23, -60, 57, -11, 76, -45, 81, 27, -4, 33, 32, -20, -46, -3, 7, 10, 23, 8, -21, -53, -77, 41, -49, 39, 11, 30, 55, 85, 42, 33, 0, -49, -27, -35, -40, -57, -26, -53, -64, -17, 11, -48, 36, 6, 16, -21, -87, 10, -31], [-68, 50, -37, 41, -79, -37, -49, 73, -27, 1, -29, -28, -12, 51, -22, -21, -14, 18, 34, -67, 15, -4, 74, -27, 34, 20, -24, -23, 66, -2, 91, 66, 4, -23, -11, 2, 19, -20, -26, 50, 58, -17, 39, -51, 12, -9, -19, 44, -32, -56, -107, 28, -60, 42, -1, 97, 9, 108, -91, 12, -3, 19, -49, -6]], [[10, 15, 1, -65, 8, -107, 45, 71, 35, 24, -63, 81, 4, 58, 41, -20, 32, -19, -28, -37, -39, -16, 37, -5, -38, 39, -28, -47, -16, 16, -65, -126, 2, 7, 20, 3, -24, 31, 2, 25, -21, 31, 98, 63, 73, -14, -1, 66, 56, -26, 8, 29, 50, -33, 0, -83, -25, 19, 68, 88, -23, -38, -29, 3], [-20, -44, 33, -27, -39, -59, 11, 7, 1, -36, -7, 46, -99, 10, 25, 30, 37, -9, -21, -33, -28, -54, 22, -94, -39, 67, -64, -35, -46, 5, -29, 14, -41, -56, 46, 2, -40, 36, 40, -3, -43, 75, 45, -75, -26, 36, 15, -8, -32, 22, 35, -21, 48, -49, 48, -3, -22, -25, 73, -42, 20, -85, -20, 0], [-47, -15, -6, -38, -40, -27, -34, 11, -6, 82, -2, -3, -31, 25, 41, -28, 127, -14, -36, 22, -28, -34, 17, -77, 6, -10, -45, 50, -46, -68, -47, -6, 40, 3, 45, -25, -60, -11, 46, -23, -42, 26, 43, 19, 13, -12, 32, 21, -7, 83, -38, -30, 7, 2, -33, 96, 24, -10, 28, -8, -34, 87, -95, 4]], [[58, 15, -69, 4, -7, -38, 68, 95, -15, 87, -18, 42, 67, -7, 77, -10, 93, -118, -29, -10, -55, 85, -15, -4, -10, 11, -31, -104, -10, 13, -61, -110, -38, 53, -12, -25, 0, 28, 22, -45, -21, -61, 25, 59, 1, -61, 72, 71, 23, -67, -21, -5, 49, 56, -83, 13, -5, -12, -38, 48, -32, -53, -7, -17], [54, 48, -28, -29, -36, 17, 22, 0, 47, 48, -12, -7, 100, 15, 75, 47, 18, -52, -27, -39, 54, 80, 47, -41, -1, -33, -5, 9, -71, -20, -77, -20, 34, -18, 14, 8, -45, -4, 59, -52, -28, -31, 6, 25, -89, -12, -1, 42, -7, -20, 18, 51, 84, 54, 15, 57, 10, -9, 18, 1, 25, -62, -26, -77], [77, 30, 61, -23, 13, -17, 21, -10, 44, 61, 29, -40, 46, -29, 15, -27, 45, -39, -54, -10, 16, 25, 18, -15, -8, -18, -20, 3, -79, -15, -82, -72, 47, 32, -44, -27, -69, -7, 115, -43, -53, 14, 4, 80, 11, -62, 46, 79, -31, 29, 7, 54, 72, -1, -64, 40, 7, -88, 76, 48, -40, -20, -53, -23]]], [[[43, 14, 30, 37, 0, -73, -105, -22, -23, 55, -46, 73, 13, 15, -51, 22, -35, 30, 3, 29, 34, -40, -54, -1, -58, 15, 45, 19, 55, -20, -13, 84, -20, -49, 45, -2, 47, -79, -21, -2, -32, -27, -19, 74, 27, -33, 58, 9, -6, 16, -8, -92, 3, -2, 42, 58, -36, -29, -31, 28, 4, -29, -3, 0], [6, -11, -11, -23, -6, -8, -7, 15, -46, 24, 0, 45, 104, 8, -34, -73, -32, -20, -10, -9, -11, 0, 14, -10, -36, 15, 99, -15, 25, 7, -44, -20, -34, 57, 20, -54, 8, 49, 82, -115, -22, -43, 17, 125, 66, -21, 51, 2, -19, 24, -1, -54, 36, 16, 60, 11, 20, 0, 2, -33, 26, -25, -34, -12], [-64, 34, -11, 22, 20, -20, 17, 8, -40, 64, -17, 15, 82, -20, -17, -7, -31, -30, 0, -53, -75, 3, 34, -68, 19, 16, 53, -3, 8, -33, -11, 33, -91, 42, -18, -1, -55, 40, 53, -38, 0, -13, 23, -69, -75, -24, -1, -32, -11, -3, -54, 13, 11, 10, 6, 94, 51, 40, 7, -11, 51, -24, -43, -5]], [[37, 8, 35, -6, 6, 23, 34, -76, -18, -29, -56, 73, 65, -37, -19, -93, 16, 17, -1, 40, -5, -83, -86, -44, -9, -7, 1, 48, -18, 2, 2, 31, -24, -60, 33, -55, -5, -6, -32, -74, 6, -24, -26, -53, 10, 26, 40, 17, -21, -27, 17, -61, -4, -23, 7, -8, 23, -20, -10, 86, 54, -10, 34, -4], [-21, -32, -25, 0, -14, 70, 56, -36, 10, 44, -8, 18, 9, 17, -53, -63, 4, -55, 40, 23, -23, 8, -1, -52, 31, -19, 54, -15, -15, -9, -14, 9, -2, -26, 41, -105, -28, 20, -24, -127, 4, -62, 24, -23, 13, 2, -11, 13, 55, 1, -21, 8, 44, -56, -46, -50, 75, -6, 7, -31, 33, -24, 8, -52], [-72, -4, -40, -41, -35, 17, 29, 54, 26, 24, -76, 15, 31, 48, -37, 14, -10, -44, 52, -32, -57, 26, 1, -22, 62, -11, 59, 39, 5, -41, -48, -43, 10, 41, 7, -57, -32, 27, 32, -30, -7, 5, 45, -3, 60, -87, -52, -14, 5, 18, 53, 21, 31, 22, -51, -18, 55, 18, 33, 29, 47, -25, -17, -47]], [[84, 32, 32, -39, -29, 43, 53, -92, -5, 3, 15, 35, 0, 12, -13, -81, 30, -37, 70, -22, 16, 26, -23, -16, 57, -50, -3, 60, -17, 0, 39, -57, -20, -22, 54, 3, -43, 7, -87, -42, 53, -24, 3, 35, -100, 18, 67, -38, 91, -61, -3, -1, -75, -2, -38, -23, 63, 19, -25, -33, 111, 38, 110, 103], [116, 24, -14, 21, -12, 44, 20, -51, 9, -4, -32, -39, -15, 87, -13, -57, 44, -4, 58, -4, -3, 8, 21, 28, 67, 9, 33, -3, -10, -32, 33, -63, 1, -58, 47, -46, 2, -48, -40, -47, 20, -8, -1, -62, -45, 17, 5, -13, 49, -34, -3, -75, -92, -12, 27, -60, 76, 11, 5, -14, 99, 98, 54, 14], [-13, -15, -9, -36, -35, -68, 62, 58, -10, -41, -78, -18, -116, 11, -44, -21, 80, 17, 67, 47, -57, 42, 21, -1, 108, 15, -26, -17, -17, -21, 47, -107, 42, 4, 25, -49, 55, -86, -14, 53, 18, 42, 20, -55, 18, -38, -63, -43, -4, 23, 61, -51, -42, 57, -41, -34, 44, 42, -15, 19, 69, 70, -1, 20]]], [[[53, -54, 10, 5, 95, 8, 46, 45, 18, -22, 51, -15, -36, 49, -12, -18, 14, -28, -19, 28, -23, 6, -44, 30, -38, -37, 50, 3, 5, 21, -16, -7, 41, 52, 4, 2, 0, 41, -43, -16, -13, -41, -4, -31, -22, 20, 17, -88, -69, 44, 34, 3, -15, -61, 85, 51, -16, 4, 32, 23, 34, 86, 32, 46], [7, 25, -56, 4, 41, -27, 26, -9, -1, -12, 1, -66, 25, -21, -57, -44, 25, -77, -15, 9, 13, 4, -110, 3, -25, 27, -33, 1, 98, -59, -53, -1, 43, 7, -67, -14, -10, 91, 13, -36, -18, -68, -16, 70, -5, -30, 2, 24, -9, 33, -45, 39, -21, 24, 79, 23, 20, -16, 18, -31, -21, 53, 17, -11], [-26, -3, -23, -9, -25, -36, -55, -28, -33, -21, 26, 61, -64, -11, -62, -102, 23, -52, 23, -15, 14, -44, -22, -8, 2, 98, 12, 7, 22, -13, -9, 35, 8, 20, -70, -11, 22, 20, -24, -32, 1, -87, 0, 32, -77, 5, 4, 25, -19, -51, -77, 32, -50, 94, 28, 50, 25, 7, 44, -17, -14, 92, -62, 38]], [[-16, -16, 4, 0, 69, -51, -28, -31, -30, -81, 8, -16, 24, 10, 41, 18, 11, 14, 35, 3, -30, -35, 13, -1, 35, -12, -30, 42, -46, -54, -16, -22, -54, -53, -19, 36, -5, -62, 36, 0, 4, -57, 26, -38, -24, -21, -28, -22, -50, 26, -68, -18, -40, -46, 18, 22, -21, 24, 6, 77, -20, -18, 34, -5], [-19, 29, -26, 43, 28, 11, -16, -30, -71, -34, -15, -45, -3, -27, 15, 22, 45, -60, -5, 5, 43, -22, -50, 30, -13, -20, -73, 45, 63, -64, -26, 31, -40, -55, 20, -4, 11, -7, 47, -13, 12, 15, 26, -27, 7, -56, 1, 12, -56, -45, 16, 3, -23, 23, 42, 56, -14, -73, -48, 88, 22, -10, 57, 14], [-17, -31, 36, 36, -8, -7, -66, -63, -6, 56, -1, 67, -13, 18, -22, 8, 10, -53, 73, 28, -15, -21, 9, -10, -26, 12, -9, -4, 30, 4, 31, 55, -31, 8, -19, -28, 69, -34, -48, -60, -14, -45, -26, -72, -30, -4, -13, -22, -29, -19, -13, 10, -33, -3, -3, -6, 7, -4, 18, 45, -32, -7, 18, 6]], [[-3, -70, -18, -41, 63, 5, -47, -8, -2, -45, 1, 34, 21, 5, -19, 39, -16, 19, 42, -24, 20, -48, 84, -63, -7, 57, -51, 33, -106, -47, 101, 29, 7, -68, -5, 40, 96, -9, 39, -26, -21, 29, 55, -58, 23, 0, 25, -46, 0, -30, -22, 36, -86, 3, 22, 7, -28, 46, 3, 64, 18, -11, 16, -37], [24, -47, -37, -40, -20, 23, -71, 25, -102, -18, -30, -4, -50, -23, -5, 46, 20, -28, 25, -13, 3, -24, 101, -13, 31, 10, -13, 22, 41, -8, 74, 37, 8, -27, 79, 18, 82, -42, 37, 58, 35, 54, 18, -54, -10, 51, 23, 0, 17, -72, 19, 30, -2, 4, 87, 17, -28, 39, -23, 88, 77, -32, 1, -43], [27, -14, -55, -5, -3, 14, -61, -10, 12, 19, -33, 46, -21, 24, -10, 47, 9, -56, 49, 21, 2, 36, 63, 37, 44, -12, 22, 13, 61, 52, 32, -28, -4, 31, 67, 34, 127, -34, 33, -41, -28, 1, -11, -77, -53, 41, 0, -74, -5, -76, -5, 31, 17, -55, 27, -17, 41, 34, -1, 71, 84, -60, 87, -9]]], [[[-45, -25, 5, 16, -34, 73, -39, 19, -47, 45, 9, -34, -26, -20, -16, -12, 11, -3, -21, 39, -36, -20, -32, 0, -76, -62, 7, -2, 25, 100, 42, -53, 19, -7, -31, -6, -68, 1, 28, -41, 62, 85, -40, -21, -28, 43, -17, -10, -40, 4, 39, 29, 46, -57, 54, 13, 5, -13, -7, -3, -21, -8, -79, 29], [-77, 36, -33, 2, 4, 66, -49, 26, -42, 77, -22, 43, -15, 44, -43, -19, -5, -27, -66, 41, 0, -45, 61, 45, -22, -51, 81, -5, 16, 65, -2, -4, 49, -24, -37, 50, -50, 111, -20, -20, 96, 94, 47, -60, -13, 35, 54, -39, -62, 52, 49, 44, -18, -32, 42, -41, 28, -17, 28, 56, -27, 12, -81, 17], [-66, -13, -68, -40, -27, 28, 31, 21, -38, 1, -14, 7, 42, -47, -61, 23, -22, 19, -107, 11, -13, -114, 21, 10, -98, -11, 25, -23, 31, 105, -12, -35, 7, 56, 16, -14, -43, 52, 27, -10, 38, 12, -3, -29, 18, -10, -19, -76, -13, 24, 32, -2, -14, -26, 37, -34, 1, -2, 13, -10, 17, -16, -45, 30]], [[-22, -3, -30, -17, -57, 6, 2, -63, 43, 25, -59, 20, 28, 27, -18, -15, 97, -42, 28, -17, -5, -9, 0, -57, -18, -37, 41, 33, 11, 12, 51, -48, -66, 16, 18, -20, 22, -45, -16, -7, 59, 32, -21, 52, -46, -36, -9, 56, -5, 16, 31, 31, 31, 18, 61, 1, -49, -3, 6, 26, 10, 13, 24, 17], [-18, 30, -20, -26, -29, -40, 11, -69, 29, 67, -73, -3, 55, 106, -24, -59, 84, -43, 25, 30, 0, -19, 75, -85, 41, -35, 48, 0, 7, -67, -7, 2, -33, -35, -53, -49, 37, 10, -14, -17, 57, 6, -40, 25, -56, 19, 38, 25, 1, 56, 64, 78, -35, 10, 99, -4, -1, -14, 4, 127, 21, 40, -25, 14], [-11, -42, -67, -35, -26, 17, 65, -46, 12, -26, -44, -22, 80, 2, 11, -26, 42, -68, 22, -33, 74, -5, -2, -42, -30, 16, 75, -37, -10, -44, 10, -22, -41, 70, -17, -50, -16, -38, 2, 4, -21, 21, -17, -3, -8, 1, -47, -44, -5, 54, 36, 14, -7, 3, 40, 10, 2, -18, 8, 78, 7, 31, -55, -31]], [[66, -39, -40, 76, -108, 3, -24, -35, 33, -12, 8, 38, -15, 32, 36, -54, 44, -34, 11, 8, 11, -61, 74, 28, 39, -21, 15, 72, 24, -18, 56, -67, -49, 16, 45, 5, 38, -14, -57, -3, 0, -10, -57, -45, 10, 5, -25, 50, 11, -11, -77, -20, 28, 32, -22, 54, -40, 57, 102, -10, 29, 28, 28, -3], [43, -12, 12, 19, -61, -47, 2, -75, 21, 60, -85, 39, -6, 89, 19, -66, -16, -28, 35, 42, -9, -37, 52, -8, 48, -20, 7, 13, -10, -117, -23, 4, -57, -61, -52, -45, 44, -10, -8, -40, -102, -32, -63, -30, -23, 8, 17, 55, 72, 3, -35, 36, -33, 66, -6, 98, 15, 30, 26, 74, 21, 1, 48, -27], [48, -79, -57, 3, -96, -37, 12, 21, -2, -49, -19, 13, -9, 85, 11, -39, -19, -28, 36, 49, -2, 23, 25, 15, -14, 27, 31, -38, 5, -60, -7, -60, -30, 20, -18, -28, 17, -45, 0, 7, -52, -15, -50, -53, 32, 35, -39, -17, -16, -1, -24, -20, -4, 61, -16, 63, 6, 75, 24, 65, 80, -59, 18, -26]]], [[[-29, 57, 34, 1, -25, 0, 17, -6, 30, -1, 28, 20, 14, -43, -28, -17, -27, 85, -39, 16, -7, -7, -6, 22, -80, 29, 8, 0, 31, 27, -23, -23, 5, 25, 0, 40, 53, -66, -12, -19, 25, 7, 17, -16, -32, -19, 0, 19, 8, -11, 70, -9, 13, 2, 10, -13, -36, -9, 7, -10, 81, -43, -18, 4], [22, -24, 30, 12, -3, 3, 53, -46, 24, -6, 0, 24, 52, -43, 58, -21, 30, 51, 18, -24, 35, 46, 16, 9, -39, 78, -66, 25, 0, -46, 42, -7, -57, -1, 48, 12, 14, -55, -24, 0, 39, 23, 33, 52, 26, 55, -14, -34, 3, -12, 44, -20, -3, -115, -65, 12, -27, -22, -17, 27, 24, -14, -16, -60], [22, -3, 13, -3, -73, -39, -49, -28, 8, -14, 4, -69, 12, -9, -28, -48, 12, 93, -38, 39, -56, -6, 25, 67, -40, 27, -20, 7, -6, -63, 20, 17, -7, -29, -37, -100, 70, -27, -27, 23, 37, -24, 13, 62, -11, 26, 37, 34, 10, -38, 27, 46, -16, -45, 54, -31, -19, -2, 25, -20, -12, -27, -30, -39]], [[-101, -60, -17, 13, 29, -15, 24, 4, 2, -24, -21, -69, -18, -6, 16, 15, 28, 7, -6, -13, -16, -31, -64, 4, -46, -67, 19, 35, -4, 10, -14, -8, 62, 40, 21, -41, -44, 22, -8, 56, -2, -58, -16, -3, 7, -41, -35, 59, 64, 81, 30, -33, 66, -16, -7, -10, -4, 10, 37, 9, -16, -25, 3, -39], [-2, -47, 36, 2, 34, -55, 57, 40, -20, -23, -45, 8, -22, -19, 18, -6, 16, 70, 25, 10, -16, 12, 31, 39, -26, 3, 24, -52, -49, -93, 84, -13, -1, 8, 24, 31, -123, 16, -29, 10, 28, -20, -3, 39, 3, 15, 26, -3, 42, 47, -32, -75, 27, 14, -42, 45, 1, -33, -21, -7, 19, -18, 1, -58], [-11, 43, -25, 56, 25, -19, -34, -66, 24, -1, -20, -43, -1, 33, -15, -28, 21, -37, -13, 4, 34, 30, -9, 12, -24, -17, 50, -68, -15, -53, 59, 23, 36, 4, 6, -20, -12, 21, -56, 19, -16, -10, -16, 34, -13, -13, 38, 83, 27, 39, 22, 6, 23, 84, -15, 21, -39, 29, 6, -9, 38, -37, -43, -14]], [[-39, -35, -87, -23, -16, -35, 41, 21, -45, -30, -64, -48, -13, -10, 65, 50, -5, -12, 17, -11, -5, 25, 56, 0, -5, -62, -32, 27, -19, 40, 5, 17, 37, 34, 14, 8, -41, -19, -26, -21, -21, -26, -11, 12, -86, 16, -30, -8, 28, 48, -88, -16, 41, 27, 17, 33, -24, -3, 46, -5, -68, -33, 1, -5], [-2, 43, -20, 6, -1, 12, 24, 31, -50, -81, -50, -13, 35, -8, 10, 31, -21, -13, 6, 2, -49, 13, 127, 44, 56, -37, 18, -60, -12, 26, 14, -63, 67, 17, -26, 69, -46, -35, -14, -17, 9, -15, 12, 31, -84, -7, 3, 9, 22, 6, -89, -45, -2, 47, 1, 76, -16, 2, 11, -3, -64, -23, -12, -1], [-24, 37, -64, 50, 71, -7, 39, -35, -33, -60, -58, -6, -12, 42, -16, -40, -26, -14, 29, -54, 18, 22, 10, -37, 11, -42, 16, -76, 23, -1, 38, -10, -6, 4, 0, 68, -16, -32, -10, -14, -56, -3, 6, -6, -21, -35, 18, 23, 21, 18, -24, 4, 12, 100, 18, 6, -78, 41, 24, 17, -53, 66, -44, 77]]], [[[-48, -6, -42, -25, -18, -26, -17, -18, 10, 49, -12, -36, 45, 26, -67, -4, -16, -32, 3, -1, 36, -14, -52, 10, -2, -28, 54, 44, -35, 19, 17, -23, 32, -25, 1, -42, -72, -36, 16, -11, 23, -22, 51, 23, 5, 36, 6, 9, -23, 50, 25, -3, -50, 3, 3, -37, -6, 40, -57, 2, -17, 22, -31, -14], [-10, -31, -4, -22, -28, 22, -13, -24, -59, 11, -64, -28, -14, -24, 14, -11, -50, 12, -9, 1, 4, -19, 13, 32, 27, 34, 44, 14, -26, 85, -27, 27, -26, -72, 0, 34, -103, 22, 41, -79, -14, 4, 29, 52, -12, 64, -2, 23, 44, 45, -52, 2, 57, 21, 65, -1, 61, -7, 81, -22, 28, -15, -10, -2], [23, -6, -2, -25, -47, 63, 28, 47, 28, -31, -54, 46, 2, -27, -13, -6, -53, 18, -19, -24, -26, -38, -2, -56, -12, 103, -1, -4, -15, -12, 9, 12, 35, 2, -4, -6, -50, -22, -42, -68, -11, 22, 19, 29, -15, -55, -3, -1, 54, 40, -25, 11, -2, -9, -4, -77, 21, 6, 25, -2, -49, -17, 23, 36]], [[15, -8, -47, -14, -4, -1, 26, 32, 47, -59, -76, 16, 9, -14, -8, 43, 48, -21, -6, 21, 23, -32, -12, -22, 6, -34, -18, 13, -44, 14, 48, 24, -16, 1, 0, -14, -10, 1, 0, -24, 6, -32, 42, 49, -2, 13, 100, 29, -46, -17, 35, 5, -6, -15, -35, -6, -25, 34, -12, -13, 5, -57, -5, -21], [-2, 22, -70, -52, 52, 15, 37, 43, -33, -1, -53, -7, 32, 14, 2, 38, 75, 5, 41, 42, -8, -1, 59, 38, 3, -61, -24, -29, -1, 34, 10, 46, -36, -34, 9, -2, 8, 35, 23, -47, -41, 7, 71, 12, -38, 54, 67, -8, 22, -58, -91, 17, 10, -4, -67, 41, -21, 23, 94, 17, -31, 1, 14, 15], [-32, 5, -69, 14, 13, 25, -12, 13, 72, -23, -78, -15, 12, 18, 26, 23, 16, -24, 8, -24, 1, -2, 43, -7, 3, -47, -40, -23, -34, 30, -12, 33, -18, 11, 23, -3, -52, -5, -51, -15, -24, -24, -11, -1, 19, -10, 57, 23, 15, -31, -6, -9, 28, 7, -50, -50, 19, 14, 28, 3, -14, -11, -42, 82]], [[39, -9, 4, 35, 64, -41, 10, -20, 30, -67, -26, 36, 0, -4, 49, 68, -9, 6, -48, -4, -19, 7, -26, -17, -11, 9, -39, -30, -54, -33, 112, -7, -36, 89, -60, 28, -8, -15, -25, 13, -68, -37, 45, -53, -8, -31, 83, 46, -45, -46, 41, -5, 21, -12, 5, 20, 10, -54, -28, -51, -1, -89, 7, 13], [63, 59, 14, 2, 96, -69, 31, 57, -86, -70, -5, -24, 17, 59, 63, 17, 4, 19, -15, -48, -42, 25, -26, -20, 17, -57, 22, 1, 27, -12, 127, -48, -37, 69, -3, -21, 8, -28, 5, 56, -27, -2, -6, -84, -12, -28, 44, -23, -6, -34, 20, -27, -40, -30, -43, 21, -24, -54, -51, 54, 23, 2, 1, -26], [2, -5, 0, 23, 16, -11, 15, -24, -48, -21, -21, -43, -18, 20, -8, 48, 10, 13, 37, -8, -21, -23, -39, 0, -9, -61, 15, 21, -30, -30, 9, 40, -3, 3, 30, -33, -1, -28, 14, -10, -71, -10, 10, -41, 3, 15, 46, -45, -34, -38, 84, -27, 39, 46, -3, 47, -46, -21, -22, -8, 9, -12, 63, 19]]], [[[-60, -32, 35, -24, 50, -15, 1, 1, -8, 35, -39, -55, 15, -80, 53, -27, -17, 99, 18, -21, -74, -44, -5, -45, -27, 5, -1, 94, 86, -34, 54, -73, 58, -23, 97, -54, -48, -28, -58, -21, 43, 21, -23, 4, -89, 62, 35, 50, 61, -7, 9, 61, -23, -7, 16, 116, -46, -20, 32, -72, 15, 8, -80, 25], [-95, -34, 82, 4, 64, -32, -3, -46, -32, 39, -102, -14, 28, -58, -8, -8, 57, 14, 83, -44, -121, 25, -9, 46, -24, -8, -2, 22, -42, 44, 10, -44, 47, -53, -50, -72, -90, -8, -41, 8, 2, 28, -52, -11, -96, 43, -2, 36, 41, -2, 103, -24, -56, 16, 8, -65, -38, -62, -10, -12, 22, 89, -4, -2], [-112, 50, 81, -20, 29, -32, -2, 0, -39, -40, -33, 42, 43, -9, 3, -34, -21, 90, 69, 8, 83, -23, 64, 37, -42, 58, -31, -43, -39, 93, -17, -65, 28, -30, -29, -69, -37, 2, -33, -74, 23, 6, 20, 46, -72, -1, 87, -8, 24, 74, -8, -10, -13, 88, 10, -102, -15, -21, -71, -50, -23, 2, 115, 79]], [[-18, -38, -53, 55, 15, 2, -61, 51, -27, 21, -42, -35, 20, -102, 29, -8, -25, 20, -65, -10, 26, -60, -12, 35, -35, -43, -31, 1, 111, -92, 39, 2, 2, -13, 70, 19, 19, -19, -26, 11, -12, 31, -47, -28, -25, 114, -27, -22, -13, -41, -86, 76, 57, -16, -1, 33, -28, 31, 21, -47, -14, -54, -46, 33], [-31, -84, 17, 29, 23, 24, -37, -60, -91, 5, -28, -7, -62, 12, 28, -9, -6, 93, -12, -75, 77, 8, 9, 90, 2, 29, 11, -9, 64, -10, 13, -96, -22, -10, -24, 4, -19, -37, 32, 64, -18, 46, -71, -16, -75, 14, 2, -13, 11, -17, -13, 14, -28, -38, -12, -16, -17, 26, 2, -71, -11, -33, -35, 40], [14, -1, 8, -36, 39, 23, -12, 16, -77, -42, -18, 20, -46, -3, 74, 5, -41, 27, 24, -74, 57, -5, 51, 0, 21, 15, 12, -28, 78, 15, 16, -36, 52, -53, -26, -3, 21, -21, -74, -101, -17, 27, -91, -23, -30, -29, 56, 19, -1, -11, -4, 36, -21, -6, -52, -52, -52, 19, 46, -32, -20, -66, 31, 50]], [[37, -97, 25, 43, 1, -25, 39, -36, -13, -31, 49, -50, 79, -4, -40, 28, 0, -3, -87, -54, -29, -1, 12, 29, -40, 17, -4, -54, 59, -34, -4, 83, -28, 13, -56, -4, 68, -54, -101, 0, 58, -14, -3, 15, -23, -21, 4, -50, 29, 1, -18, 25, -10, -72, 11, -52, -20, -8, -95, 22, 47, -7, 19, 33], [28, -30, 33, -2, 44, -2, 34, -58, 11, -8, -25, -82, 34, 86, -44, 59, 55, 41, -47, -36, -2, 17, 37, 49, -9, 34, 6, -14, 13, -48, -76, -32, -127, 8, -24, 6, 68, -20, -40, -16, -28, 75, 39, 21, -34, -94, -10, -13, 14, 24, 74, -34, 26, -72, -20, -72, -12, 90, -51, 26, 31, 47, -24, 70], [60, -4, 31, -5, 20, 37, 18, -22, 25, -21, -17, -42, -19, 2, 68, 74, 21, -26, -37, -75, -48, -27, -7, 47, 39, -16, 41, -56, -20, 19, -24, -33, -74, 4, -17, 3, -6, -67, -43, -58, 27, 43, 4, -99, -41, -93, -7, 43, 3, -16, -19, -9, 8, 13, -20, -65, 4, 54, -59, 102, 56, 19, -28, 78]]], [[[24, -99, 0, 4, -16, -2, 39, 10, -39, -18, 9, -18, -7, 35, -30, 50, 11, -1, -45, 52, 1, -74, -44, 62, -13, 15, 52, -10, 3, 26, 8, -38, -6, 3, -6, -14, -55, 9, -16, -47, -31, 44, -14, -63, -8, -49, -22, -53, 33, 74, 33, -15, -23, -25, -28, -8, -31, -26, -46, 17, -18, 4, 99, -49], [-1, -74, 28, -39, -50, -17, -1, -40, -23, 26, -29, -44, -39, 33, -53, 94, -13, 13, -17, -57, -36, -47, -26, 51, -31, 53, 61, 46, 39, -39, 1, -24, -14, -22, -5, -80, -6, 32, 6, -32, -22, -40, 6, 18, 16, -34, -82, -46, 91, 109, -30, -2, 51, -18, -46, 15, -18, -9, -1, 38, 6, -2, 36, -54], [13, -127, -9, -29, 0, 51, 44, 29, 13, 7, 33, -57, -31, 12, 12, 22, 1, 18, -45, -88, 32, -29, -42, 54, -31, 8, 17, 5, -32, -53, 21, 18, 20, 11, -20, -77, -40, -2, 1, -50, -43, -9, -4, 41, 10, -33, -27, -40, 7, 54, -4, 2, 80, -6, -62, 14, -21, -10, -51, 5, -52, -40, 8, 30]], [[48, -13, 54, 55, -26, -11, 10, -31, 40, -17, -34, 35, -35, -30, -1, 27, -13, -6, 15, 29, -7, 41, -62, 17, -52, -12, 39, -26, 0, -7, 26, 39, -35, -12, 42, -45, 42, 24, 6, -37, -65, 10, 97, 22, 12, -5, 0, -44, 87, -6, 23, 81, 28, 4, -16, 11, -14, -56, -62, 15, 15, 8, 8, -2], [23, -14, 40, -2, -5, -43, 15, -82, 45, -3, -51, 45, -43, 11, -6, 7, 62, 53, -6, -4, -16, 36, -8, 6, -69, -14, 31, -22, -6, -48, 33, 9, -36, 14, 21, -87, 17, -9, 19, -41, -8, -54, 54, 18, 23, 14, -48, -6, 40, 40, -24, 42, 91, -24, -93, 7, 37, 1, -34, 3, -2, 25, 64, 4], [38, -16, -17, 23, -11, 6, -17, -4, -5, -28, -46, 1, -77, -11, 27, 3, 1, 32, -1, -55, -1, 76, -35, 25, -19, -16, -28, 19, -43, -3, -31, 25, 1, 3, 26, -43, 3, 50, 12, -70, -24, -50, 62, -17, 1, 37, 7, -8, -3, 10, -68, 17, 57, -30, -5, 12, -6, 10, -66, -5, 32, 1, 75, 12]], [[45, -10, 64, 19, 59, 22, 0, -11, -5, -25, -21, -19, 7, -54, 30, 4, -17, -31, -20, 3, -76, 15, -67, -15, 17, -29, 55, 6, -3, 27, -21, 25, 19, 36, 70, -15, 12, -6, 30, -9, -51, 26, 15, -60, 30, 1, 3, -15, -15, -34, -13, -6, 35, 6, 23, -2, 2, -42, 24, -31, -13, 8, -11, -29], [9, 54, 39, 47, 62, 10, 15, -14, -47, 11, 9, -24, 16, -17, 30, -22, 6, 6, -10, 13, 4, 40, -9, -46, 49, -6, 3, -3, 7, -49, -13, -31, -16, 5, 27, -25, 72, -51, 21, -35, -15, 28, 4, -58, 33, -63, 35, 31, 40, -58, -88, 42, -31, -25, 20, 49, 37, -16, 1, 1, 9, -35, -29, 8], [46, 58, -32, 47, 57, 29, -13, 18, -2, -13, -48, -6, -15, -11, 44, -1, 35, 4, -3, 47, 25, 32, -46, 28, 33, 14, -36, -12, -29, 38, -12, -6, 19, 12, 41, 32, 21, 21, -10, -31, -45, 47, -29, 22, -31, 26, 25, 12, -3, 14, -43, 3, -90, 39, -26, 47, -28, 9, -17, -22, 31, -16, 43, 2]]], [[[-34, 13, -80, -27, -41, -58, -1, 31, 2, -56, -98, -62, -68, 8, -21, 58, -10, -32, 32, -2, 10, 29, -28, 23, 24, 10, -22, 31, -17, -41, -28, -37, 2, 45, -8, -48, 16, -39, -10, -41, -10, -3, 82, -35, 3, -21, -39, -41, 69, 48, -6, -8, 89, 44, -59, -7, -18, -8, 12, 6, -5, -6, -110, -34], [-61, 32, -47, 6, -6, -5, 37, -23, 25, -16, -62, -15, 94, 49, -17, 15, 11, 71, -44, -44, 38, -3, -53, -50, -48, 47, -40, 15, -5, -110, 0, -68, 13, 3, 5, -11, 51, -94, 5, -93, 47, -10, 109, 1, 86, -32, -53, -53, 40, 67, 14, 64, 6, -28, -37, 41, -5, -72, -4, 2, -16, -23, -70, -25], [-70, 0, 1, -28, -29, -27, 10, 18, -16, -41, -14, 74, -68, -38, 14, -17, 65, -8, -67, -51, 21, 38, 7, -23, 34, 49, -19, 27, -38, 15, -3, -20, 6, -9, 55, 31, -7, 36, 33, -19, 3, -6, 12, 22, 2, 63, -14, -8, -3, -9, -21, -21, 31, -30, -44, 26, -33, 26, -59, 9, -12, -25, -50, 63]], [[29, -44, -6, 31, 5, -23, 54, 28, -14, 23, -34, -62, -36, -9, 23, 48, -40, 18, 35, -43, 15, -48, -27, 10, 59, -7, -19, 14, -15, 28, 16, 63, 93, -63, 26, -21, 8, -33, 10, -98, -7, 15, 1, 43, 2, -23, -70, -28, -9, -6, -7, 59, -6, -49, -28, -67, 21, 27, -11, -33, 6, -8, 0, -46], [8, 52, -26, 38, 32, -14, 54, -3, 22, -46, -15, -7, 31, 19, 7, -13, 24, 61, -69, 3, 77, -40, -57, 8, -6, 4, -20, 29, -5, -59, -5, -29, 39, -93, -21, 17, -21, -48, 0, -127, -10, 11, 46, 15, 37, 3, -38, -18, -65, -18, 42, 35, -38, -9, 8, -18, 53, -61, 38, -25, -81, 23, -5, -82], [6, 49, -23, -17, -67, -3, 38, 28, -41, 2, -68, 1, -71, 12, 0, 3, 16, 0, -53, 11, 46, 26, -13, -11, 28, 32, 8, -3, 5, 23, 23, 3, 62, -44, -88, 12, -25, -16, 29, -5, -70, -26, -29, -58, -31, 22, 9, 70, -11, -15, -43, 14, -42, 18, -44, 31, -31, 56, -46, 22, 115, 4, -18, 0]], [[65, 56, -16, -15, -8, -19, 42, 48, -36, -40, -30, 9, -19, -35, 1, -51, -62, 58, 6, -37, -55, -22, 5, 7, 27, -32, -31, 111, 22, 25, -82, 4, 14, 32, 48, -9, -6, -38, -47, -57, -2, 20, -44, 27, 61, -45, -47, -22, -23, -17, 5, 27, 20, -23, -27, -16, 48, 46, 78, -5, 17, -10, -12, -37], [14, 81, -4, 18, -13, 48, -8, 40, 38, -65, -37, 25, -11, 27, 8, 22, -31, 79, -65, -17, 33, 3, -46, -13, -25, 16, -53, 42, -1, -45, -121, 42, -49, 18, 18, -10, -25, -10, -31, -72, -13, -22, -21, -5, 37, -40, -34, 14, 16, -42, 19, -47, -48, -19, 25, 5, 6, 23, 77, -2, -68, -1, -29, -91], [-2, 57, -45, -7, -42, -32, 44, 123, -3, -44, 9, 12, -8, 17, 17, -10, -6, -5, 9, 19, -28, 23, -11, -64, 10, 31, -40, -21, -8, 7, -16, 14, -6, 4, -94, -32, -44, -34, 18, -28, -12, -54, -37, -19, 8, 5, 25, 42, 91, -25, 28, -19, -22, -9, 41, 2, 50, 53, 8, 7, 44, -63, -1, 4]]], [[[-11, -2, 20, 127, -27, 37, -21, -7, 8, 6, -44, 7, -63, 17, -38, -66, 36, -23, -22, 30, 10, 58, 16, -87, -33, -50, -9, -58, 2, 7, -29, -74, 11, 12, -43, -80, 10, -46, -20, -37, 16, -3, 3, 38, 3, 19, -14, 2, -29, 28, -53, 28, -61, 62, -30, -25, 6, 87, 3, -17, -80, -28, 55, -46], [16, -95, 25, 53, -14, -32, 59, 23, 21, -8, -52, -59, -83, -40, -16, -62, -3, 13, 34, -2, -77, -39, -15, 38, 2, 24, 86, -5, -37, -11, -18, -33, 22, 18, 7, -57, 6, -18, 19, -55, 40, 37, 85, -6, -26, 12, -37, -41, -73, 28, -45, -41, -32, 22, -28, -23, 5, 99, -31, 28, -38, 25, -36, -63], [-35, -115, 44, 48, -9, 48, 12, 1, -1, -7, -77, -13, -123, 25, 5, -38, 78, -18, -2, 9, -56, 1, 21, 70, 4, 23, -10, 20, 2, 60, 39, 15, 75, 43, -21, -56, -72, -14, 39, -11, -23, 1, -18, 9, -4, -27, -23, 12, 5, 23, 33, 0, -25, 13, -6, 22, -16, 81, 32, -20, -67, -21, -56, 38]], [[56, 22, 10, 1, -31, 25, -45, 35, -27, -17, -71, 8, -3, 32, -57, -48, -5, -34, -57, 43, 3, 35, 45, -16, -32, 28, -40, -13, 5, -35, -67, -22, -15, -18, -86, -10, -33, 16, -32, -39, 9, 18, 76, 3, 0, 27, -35, -19, 13, 13, 8, 18, 27, 17, -35, -83, 33, 29, 30, 16, 10, -40, 54, -53], [61, -6, 39, -64, -35, 3, 30, 40, -15, 3, -51, 4, 24, -13, -41, -31, -7, -88, -54, 8, -23, 36, 10, -28, -13, 3, 24, 5, -42, -60, 9, 6, 34, -14, 25, -41, 26, 48, 4, -90, -9, -11, 24, -11, -1, -1, -18, 75, -78, -15, 12, -31, -44, -21, 33, 4, -8, 75, -12, -11, 14, -17, -26, -80], [20, 20, 12, -32, 23, 19, -27, 16, 11, -42, -54, -27, 23, 48, -33, 5, -8, -63, -33, -56, -3, -3, 2, 29, -44, -47, -13, 22, -3, -4, 14, -40, -36, -8, 51, -27, -35, 17, 59, 26, -17, -9, 52, -36, 40, -30, 57, 69, -63, 33, 36, 12, -13, 47, 19, 84, -29, 53, -24, 11, -7, -73, -36, -14]], [[55, 13, -1, -8, -15, 39, -26, -32, -2, 29, -24, 73, 21, 51, 22, 29, 0, -35, -39, 80, 24, 14, 14, 49, -19, 6, -8, -14, 21, -21, -14, -33, -36, -11, 13, 31, 15, -10, -73, 16, -29, 5, 109, -53, -5, -78, -25, -17, -27, -12, 85, 47, -21, 3, -14, 12, 15, -70, 22, -16, -4, 24, 44, -5], [-8, -84, 65, -55, -74, -24, 27, -62, -64, -26, -51, 106, -72, 104, 38, -15, -59, -52, -121, -38, -10, 45, -26, -38, 71, -37, 29, -79, 20, -17, 66, -44, -22, -45, 7, 63, -12, 17, -52, -15, -45, -76, 39, -19, 6, -9, -5, -1, -51, -20, 20, -1, -51, 38, 24, 98, -4, -9, 77, -24, -11, 41, 43, -37], [39, -8, 4, -4, 90, 12, -7, -11, -26, -74, -71, -15, -45, 24, -10, 29, -68, -10, -57, -49, 3, 17, 28, 5, -30, -107, -10, -9, 32, 3, -2, 35, -27, 7, -24, 60, 15, -10, 6, 48, -16, -38, 44, 8, 34, 29, 30, -2, -34, -19, 13, -39, -50, -7, -8, 112, -23, 18, 57, 72, -31, 17, -6, -6]]], [[[5, 8, -3, -6, -14, -41, 25, -28, 43, -23, -2, 86, 8, 36, 60, -41, -88, 58, 13, 56, -72, 30, 9, 12, 7, 8, -47, -25, 52, -17, -65, 23, 6, 21, 28, -40, 43, 36, -47, 25, -17, 33, -16, 4, 26, -4, 39, -10, 6, 33, -28, 57, 22, 17, -34, -39, -39, -23, -32, -39, 34, -8, 36, -62], [43, 32, 11, 31, -48, -59, 1, 3, 24, 28, -49, 15, -15, 5, 26, 11, -6, 89, -7, -33, -48, 12, -4, 61, -25, -3, 20, -4, 61, 21, -1, 56, -32, 56, 10, -28, 7, 14, 11, -25, 17, 25, -9, -58, 26, -63, 29, -24, -15, 47, -15, 39, -25, 0, -40, 7, -16, 7, -4, -31, 20, 16, -35, -3], [-37, 78, 45, 34, 20, -100, -11, -19, 50, 24, -33, 18, 15, -44, -24, -13, 3, 46, 14, -12, -38, 25, -10, -5, -11, 1, 6, 19, 75, -6, -51, 127, 19, 45, 30, -48, 26, -54, 5, 45, -54, 1, -14, -28, -8, -60, 39, -23, -20, 61, -14, -1, -61, -19, -61, 94, -39, -30, 5, -17, -20, 21, -13, -40]], [[-52, 51, 71, -39, 16, 21, 3, -15, -17, 50, 7, 83, 51, 13, -33, -41, -19, 49, -37, 33, -16, -20, 15, 32, 71, 68, -83, -15, 83, -21, -71, 7, 68, -13, -64, 0, 41, 32, -24, -14, -25, 8, -18, -52, -5, 24, 50, 16, 17, -5, -6, -11, -3, -38, 9, -57, -7, -38, -34, -12, -4, -44, -10, 9], [-69, 54, -9, 2, 33, -30, 33, 18, -6, 43, -48, -53, -28, -36, -32, -23, 60, 31, -42, -33, -4, -46, 13, 49, -46, 17, 41, 35, 38, -12, 16, -14, 67, 3, -53, 100, 41, -38, 16, 7, -21, -11, 11, -2, -45, 43, 43, 2, 12, -48, 47, -7, -59, -59, 34, -15, 21, -51, -21, -27, -34, -1, -24, -43], [-85, 62, 21, 28, -12, -20, 20, -49, 30, 33, -31, -38, -13, -57, 27, -42, 32, 24, -36, 17, -17, 1, -6, 53, 37, 0, 58, 25, 7, 51, -26, -19, 10, -21, 12, 92, 35, -17, -3, 54, -32, 39, -23, 54, -13, 40, 22, -2, -8, -53, 0, -4, -46, -22, 44, 81, 53, 0, -21, -16, -50, 12, -4, -7]], [[56, 46, 55, -26, 20, 13, 17, -48, 3, 22, 59, 20, 17, 27, -54, 70, -25, 2, -57, -3, -33, -4, 9, 18, 74, 64, -8, -20, 33, 44, -116, -36, 13, -42, 53, -41, -9, -18, -43, -22, -85, 69, -61, -44, -36, 44, -12, -22, 12, -6, -76, 9, -41, 7, -8, -55, 23, -48, 32, 7, -7, -26, -25, -30], [-14, 63, 66, -6, 4, 27, 40, -46, -36, 4, 25, 97, -44, -52, -34, 38, -45, 1, -1, -4, 2, -42, -24, -15, 23, 38, -28, 11, 66, 11, -58, -60, -14, -10, 94, -31, 58, -67, 13, -54, -40, -27, -36, -68, 3, 65, -25, 8, 12, -26, -93, 37, 1, -16, 11, -18, -1, -77, 17, 2, -8, 6, -20, -71], [-28, 65, 59, -3, -29, 12, 38, -77, -27, 40, 1, -21, -36, -42, 32, 16, -7, -31, 11, -6, 24, 13, -39, 49, 1, 21, -11, -17, -11, 31, -81, -22, -77, -4, -8, 23, 1, -69, 13, -11, -50, -5, -47, 40, -16, 31, -76, -75, -20, -24, -71, 52, 70, -22, 35, 44, 45, -42, 5, -5, 0, 0, -15, 32]]], [[[-17, 17, -1, -10, -1, -65, 4, -15, -15, -21, -20, -16, -11, -4, 14, -47, 4, -41, -47, -22, 24, -11, 15, -24, -38, 27, -18, 33, 19, 14, 17, -10, -127, 8, 31, 22, -16, 29, -56, -5, -33, -42, 6, -13, -20, 5, 28, -5, 25, -36, 24, -10, 32, 10, 2, 36, 15, 9, 22, -21, 64, 4, -41, -14], [43, 26, -4, 29, 31, -59, -19, 14, -6, -34, -35, -28, -12, 9, -2, 49, 23, 2, -39, -34, 89, -16, 26, -3, -13, -10, -21, 17, 1, -53, -17, -11, -83, -13, 43, 22, -2, -1, 30, -9, 0, -9, 62, -76, 18, -11, 17, 13, 82, -6, 33, -19, 4, -50, 11, -31, -6, -29, -21, -2, 27, -18, -55, -88], [-15, 6, -29, 13, -22, -32, 5, -26, 17, -17, -27, -25, -27, 13, -21, 3, 26, 16, -45, 7, 52, -27, 35, -19, -8, -22, -34, 31, 27, -96, 38, -20, -60, 26, -14, 28, -8, -2, 1, 15, -24, -60, -11, -33, -7, 20, 9, 9, 41, 20, 3, -38, -31, 1, -4, -8, -22, 16, 31, -44, -13, -26, 12, -28]], [[15, -33, -34, 36, -11, -6, -30, -6, -16, -4, -37, -16, 2, 25, -19, -32, 22, -16, 15, 3, -10, 8, -32, 2, -18, 7, -16, 62, 58, 8, 50, -52, -60, -26, 27, 4, 0, 44, -12, 22, 0, -34, -29, 16, 13, -19, 14, 4, -1, 35, 8, -21, 60, 31, -54, 19, 27, -24, -7, -20, 28, -6, 24, 20], [19, 37, 19, 42, 30, -8, -7, 1, 13, 34, -36, 29, 11, 10, -8, 27, -9, 5, -12, -31, 36, -51, -14, -38, -45, -25, 42, 18, 17, -42, -9, -23, -39, -54, 3, -7, -23, 23, -24, -28, -7, -59, -21, 30, 35, -34, 27, 25, 13, 8, 19, -1, 0, -8, -25, 18, 9, -32, 12, -21, -46, -20, 26, 46], [17, 78, -9, 33, 25, -1, -7, 29, 13, 51, -17, -63, 49, 20, -17, -27, -18, -15, -20, -25, -6, 16, -8, -25, -30, -20, 27, 23, 45, -16, -22, -17, -46, 31, -42, -18, 13, -80, 15, -18, -19, -63, 5, -6, -17, -19, -1, 45, 20, 40, 26, 36, -8, 19, -11, 11, -4, -10, 48, 34, 28, 27, -1, 72]], [[-4, 3, -14, -57, -21, -6, -36, -64, 11, 0, -30, -28, 4, 18, -32, -26, 14, -28, 27, -1, -38, -1, -45, -31, 2, 10, -12, 17, 3, 51, 32, -32, -13, -41, -19, -45, 52, -17, 7, 23, 21, 41, 32, 30, -32, -20, -28, 21, -17, -9, -39, -16, -2, 43, 47, -48, 3, 16, -41, -33, -12, 24, -20, -14], [1, 33, 8, -31, 1, -33, 11, -14, 27, 15, -82, 18, -15, -35, -45, -5, -21, 30, -12, 12, -11, -16, -32, -17, -26, -7, 8, -6, -36, 24, 21, 0, 18, -27, 9, -8, 65, -21, 9, -4, 22, 25, 73, 20, 42, 6, 29, 15, -28, -35, 5, -49, 41, 17, 50, -30, -9, -2, -32, -31, -43, 10, 21, -21], [31, 89, 7, -9, 34, -34, 32, 33, -1, 2, 3, 0, 1, 8, -38, -9, 1, -27, 7, 4, -21, 13, -11, -12, 1, 9, 28, 13, -40, -20, 16, -29, -33, -23, 19, -51, 75, -40, 14, -48, 28, 52, 27, -11, 42, -34, -1, 27, -49, 77, 36, -26, -1, 1, -41, 2, 4, -16, 5, 13, 8, 4, 24, -31]]], [[[-39, 3, -54, 12, -6, -51, -59, -24, -32, 41, -20, -38, 15, -60, -16, -20, 21, 15, 25, 7, -71, 27, -32, -27, -15, -27, -45, 13, -22, -48, -38, -63, -16, 44, 29, -3, 26, -7, 47, -38, -61, 22, 56, -5, 15, 3, -75, 15, 67, 62, -4, 82, 23, -37, 96, -29, -8, -29, -55, -18, -6, -83, -11, -20], [-67, -1, -10, 15, 12, -88, 7, -43, -38, -23, -50, -123, -18, -18, -7, 42, -14, -3, 22, -69, -42, 6, 1, 69, -48, -3, 28, -74, 30, 20, -3, -55, -78, 12, 14, -12, 20, -2, 40, -22, -29, -33, 24, -38, 21, 10, -41, -27, 69, 66, -38, 52, 54, -48, 84, -1, 77, -4, -82, 13, 14, -38, 6, -27], [-36, 5, -70, 6, 17, 7, -16, -41, -27, -37, -16, 55, 10, 10, -5, -24, -17, -31, -2, -56, 87, 16, -10, 2, -31, 57, -52, -82, -60, -8, 10, -97, -11, -14, 41, 39, 31, 24, 32, -27, 17, 37, 9, -16, 7, 23, -82, 38, 25, 56, -8, -13, -9, 25, 20, 2, -68, 1, 36, 14, -23, -62, 21, 37]], [[14, 13, 5, 8, 44, 26, -44, 25, -5, -12, -35, -52, -86, 27, 28, 48, 30, -41, 9, 15, 4, 3, 16, 1, -29, -13, 5, 95, 56, -79, 62, -1, -12, 6, 65, 64, 15, -89, 20, 7, -1, -26, 15, -2, -18, -6, 38, -24, 3, -70, -67, 22, -2, -23, 38, 28, 29, -45, -3, -69, 6, -60, -23, -3], [-115, -12, 48, 43, 13, -24, 2, -14, 26, 39, -23, -82, -89, 17, 49, 26, 32, -44, 16, 21, -33, -5, 21, 62, -22, -29, 89, 9, -9, 12, 22, 19, -28, 29, 7, 78, -18, -57, 49, -19, -19, -15, -4, -13, -52, -8, 81, 64, -79, -61, -31, -34, -10, -12, 53, -20, 34, -17, 47, 11, 42, -76, -73, -36], [-77, 24, -74, -72, 61, -16, 4, 5, 6, 19, -15, 53, -16, 94, -17, -42, 7, -43, 9, -10, 2, 20, -25, 62, 2, -8, -89, -127, -9, 7, 9, 0, 4, -10, 15, 56, 54, -40, 45, -57, -14, -45, 57, 32, -42, 6, 64, -12, 3, -6, 14, -7, -58, 41, 58, 18, -59, 21, 29, -31, 0, -55, -83, 51]], [[41, -35, -15, 18, 7, -31, 10, 38, -28, -7, -113, -14, -10, 92, 46, -13, 3, 43, 17, 83, 21, -83, 94, 32, 37, 7, 89, -20, -7, -26, 106, -9, -37, -17, -51, -96, -11, -78, 12, 44, -52, -45, -49, -78, -12, -78, 19, 23, -19, -7, -37, 41, 34, 3, -7, 38, 62, 24, -19, -28, -47, 36, -49, 46], [76, -43, -3, -45, 23, -46, 3, 0, -13, 51, -95, 10, -25, 80, 76, 9, 37, -16, -7, 23, 23, -86, 69, 69, 35, -8, 27, -47, 18, -15, 43, 10, 10, -2, -13, 62, -79, -2, 16, 47, -49, 32, 16, 20, -98, -3, 33, -51, 28, 10, 45, -23, 4, -12, 61, 68, -50, 41, 59, 69, -16, 43, -9, -1], [-31, -54, 24, -23, -5, -34, 22, -61, 11, 0, -65, 11, -40, 18, -88, 16, -26, -19, -21, -75, 35, -58, 60, 23, 62, -51, 6, -62, -12, 4, 47, -12, -54, -21, -69, 59, 47, 45, 48, 19, 38, -25, -36, 118, -12, -11, -3, -41, -10, 42, -53, -36, -4, -11, 74, 67, -80, 6, 5, 55, -66, 53, -60, -7]]], [[[-65, 72, -23, 5, 16, -27, 2, -65, 25, 86, -24, 120, 43, -50, 11, -29, 19, 49, 1, -27, -34, 32, -3, -3, -72, -54, -1, -3, -24, -22, 7, 70, 43, 54, 5, 14, -42, -90, 52, 7, 23, -6, 0, -36, -18, 36, -35, -51, -81, 50, 36, -16, 20, -10, -18, 31, -39, -6, -23, 5, 16, 62, -9, -41], [-29, 18, -29, 105, -64, 13, 2, -52, 26, 53, -10, -17, 21, 58, -33, -11, -66, 69, 26, 1, -1, 28, -10, 44, -57, 40, -18, 20, -53, -12, -25, -12, 13, 15, 49, 44, -9, -28, 9, 14, 10, -4, -39, -127, -25, 33, -57, -76, -49, 13, -20, -1, -83, -26, 91, -23, 14, -38, -27, 8, -27, 60, 27, 8], [18, 38, -15, -85, -32, -25, 11, -30, -29, 50, 16, 1, 111, -18, -38, -32, -29, 62, -65, 35, -22, 50, -19, -34, -82, -21, 26, -14, -6, -73, -2, -6, -9, 90, 3, -20, -3, 22, -33, -2, 4, 0, 27, -2, 34, 61, -24, -73, 41, 6, 36, -51, -55, -15, 14, -35, -3, -1, -34, -27, -23, 57, 31, 21]], [[-91, 28, 21, 46, 17, 16, 18, -26, 13, -26, -60, 69, 58, -99, 33, -72, -18, -7, -44, 0, -10, 12, 35, -14, 35, -35, 3, -62, 2, -93, 50, 20, 5, 20, -31, -14, -24, -32, 1, -42, 33, 41, -6, 44, 2, -25, -8, -21, -55, 59, 58, -30, -51, 6, -25, 47, 23, 4, 6, -37, -6, -5, -8, 5], [-20, -32, -4, 101, -26, 4, -12, -42, -14, -20, -38, 27, -40, 46, 14, -20, -1, 49, -23, -42, 41, 11, 87, 38, 52, 61, 52, 41, 5, -32, 32, -18, 45, 30, 44, -45, -11, 24, 25, 5, -6, 9, 12, -17, -35, -2, 19, 72, -49, -23, 31, -45, -63, -1, 22, 11, -43, 7, 13, -8, -25, -12, 9, 20], [-45, 1, -37, -10, -8, 7, 18, -72, -43, -18, -30, -51, -44, 62, 19, -52, -67, -25, -13, 21, 21, 40, 37, 3, -2, -9, 19, 3, -9, -59, 28, -14, -32, 2, -5, -62, -25, -48, -21, 39, -34, 49, 9, -6, 77, 33, -12, 8, 5, 6, 41, -10, -20, 22, 1, 5, -37, 38, 4, 15, 11, -23, 57, -13]], [[13, 21, 7, 98, -40, -9, -21, 0, -10, -30, -34, -55, 14, 22, -5, -17, 0, -52, 49, 7, -6, -3, 72, -12, 41, -48, -7, 27, -37, -13, 24, -76, -58, 21, -15, 6, -54, -24, -29, 8, -16, -12, -14, 76, 1, -9, 16, -25, 45, 30, 4, -12, 13, -1, -6, 30, 31, 13, -10, 30, 16, -93, -3, 115], [-34, 4, -34, 44, -28, -19, -24, -15, 6, -32, -22, 35, -56, 45, 13, 7, -6, -62, 50, -44, -32, 29, 68, -3, 76, -21, 35, -46, 38, -16, -43, -52, -16, -17, -6, 57, -24, -29, -25, 8, -4, -41, -5, 15, -31, 67, -12, 112, 77, 12, 27, -24, 28, 39, 2, -21, -9, -15, -13, -6, 54, -45, -31, 74], [-8, 54, -78, 37, -12, -30, -23, -21, -32, -40, -21, -3, 0, 56, 42, -55, -14, -65, -27, -92, 29, 1, 50, -55, 36, 8, 58, -25, 28, -14, 13, -47, -74, -61, -19, -9, -74, -48, 12, -37, -61, 1, 59, -61, 50, 77, -9, 97, 38, -4, -28, 10, 10, 105, -38, -44, -14, -9, -2, 54, 1, -35, -48, 37]]], [[[-35, 52, 57, -1, 17, -24, -19, 23, 49, 98, 66, -56, -24, 10, 14, -35, -31, 44, 59, -9, 41, -33, -12, -17, 98, -14, 40, -36, -8, -19, -21, -12, -101, -16, 5, -41, 2, 10, 2, -42, -17, -34, 3, 12, 60, -11, -9, -2, -96, 95, -81, 16, 5, -36, -24, 86, -32, 46, 17, 25, -54, 15, -48, -11], [-26, -9, 45, -7, 35, 19, -3, -6, 71, 54, 37, 27, -50, -27, -22, 28, -32, 45, 17, -12, -19, 13, -9, 15, 60, -14, 29, -16, -8, 29, -70, 18, 12, -20, 31, -26, 55, 44, 19, -65, -19, 4, 40, -15, 47, -35, -33, -24, 14, 71, -26, -6, 38, -24, -24, 12, 13, 44, -25, 47, -19, -38, -56, -13], [-38, -80, 61, 13, -7, -23, 17, -48, -15, -5, -30, -2, 3, -8, 7, 2, 14, -22, -35, -27, -67, -31, 31, -57, 32, -35, -50, -40, -42, 14, -60, -6, 122, 25, -1, 6, -7, -4, 25, 4, -38, 8, 20, -21, -1, -48, -8, -25, -22, 9, -17, -3, 8, 34, -43, 20, 48, -6, 22, 37, -23, -48, -8, -47]], [[12, 9, -11, 2, 17, -5, -20, -4, 8, 67, -10, 23, -24, -23, -33, -64, -71, 38, 3, -1, 9, -86, -34, -124, 53, 7, 13, 15, 14, 57, -51, 75, 7, -81, 39, 15, 41, -71, -3, -58, 57, -24, -32, 1, 59, -21, 90, 4, -44, -11, -80, 32, 21, 4, -1, 23, -39, 35, -3, 34, -63, 19, -22, 79], [19, 52, -26, 45, 18, 44, -40, -58, -26, 27, -35, 46, -70, -68, -16, -96, -47, 19, 36, 55, -17, -27, -62, -111, 16, 16, 67, 9, 40, -21, -55, 120, 45, 54, 50, -25, 93, 3, -1, -40, 30, -26, -16, -33, 58, -75, 18, -47, 90, -18, 3, 31, 32, 0, 13, 40, 9, 0, -31, 28, 12, 25, 5, 61], [26, -13, 22, 62, 30, 27, 27, -82, -40, 62, -16, 25, -17, 17, 70, -68, -35, -65, -24, -9, -52, 0, 53, -118, 50, -35, -8, -27, -51, -31, -67, -22, 65, 69, 37, 78, -31, -107, 27, -28, -5, -6, 55, -26, 39, -40, 28, -7, 26, 15, 52, -32, -38, 39, 2, 108, 39, 35, -14, -4, -68, 47, 21, -5]], [[19, -54, -76, -22, -50, 33, 17, -43, 63, -15, 12, -14, 73, 43, 15, -6, 30, -24, -44, 7, 55, -1, 79, -93, 30, -13, 46, 84, 31, 73, -59, 59, 85, -127, 33, -10, -50, -67, 15, 19, 82, -76, -68, 3, -54, -28, 64, 17, 98, -45, 32, 13, -9, 82, -33, -15, -16, -34, -8, -34, 42, -38, 37, 8], [35, 6, -7, 25, 0, 63, 15, -5, 6, 10, -11, 45, -52, -2, -62, -2, 47, 22, 29, 59, 5, -23, -12, -77, 15, -6, -24, 60, 97, -28, -47, 10, -48, -5, 54, -53, -101, 21, 39, 21, 93, -43, -7, 15, -41, -43, 83, 16, -8, -28, 29, 29, 46, 40, -46, 23, -64, -23, -8, -45, 40, -47, 3, 0], [80, 68, -4, 15, -51, 86, 43, -3, 53, 1, -37, -24, 9, 5, -21, 11, -20, 1, -70, 26, -53, 25, -13, -14, 14, -17, -87, -20, -5, -26, -12, -18, 50, 48, 44, 26, -78, -13, -51, 41, 46, 33, 60, 1, -2, -41, 98, 16, 16, -43, 88, 19, -36, -6, 0, 73, -28, 34, -10, -46, 20, -53, 29, 13]]], [[[-1, -65, -3, -92, -51, 102, 41, 20, -32, -57, 42, -70, 30, -7, -14, 16, -33, -75, 1, -26, -24, 46, 40, 5, -99, 74, -51, -94, -19, -13, 19, 43, 6, -35, 75, 4, 72, -52, -4, 35, 56, 33, -5, -40, 86, -48, -1, 65, 28, -29, -39, -27, -29, -67, 9, -30, 12, -26, -14, -21, 3, -35, -23, 53], [34, -39, -13, 2, 36, 37, 8, -46, -30, -60, 25, -8, 42, 18, 10, 31, -23, -56, -46, 17, 6, 33, 37, -43, -39, 1, -12, 21, -12, -15, -77, -14, 21, -73, 16, -33, 49, -39, -24, 115, 40, 17, -54, -1, 16, -119, -39, 20, -21, 11, -10, -24, -24, -43, 46, 20, -8, 2, -48, 47, -60, -22, -51, 24], [-78, -75, -22, -49, 55, 19, 54, -48, -23, 17, -26, 24, -44, 36, 0, 66, 16, -12, -60, -2, -4, 4, -37, 45, -96, 31, -41, 57, -5, 22, 17, -22, 4, -23, 27, -55, -3, -14, -8, 27, 45, -16, -33, -50, 92, -101, -39, -4, 68, -9, -10, 38, 39, 10, -59, -20, -67, 64, -34, 45, -13, -54, -15, -41]], [[13, -28, -3, -45, -60, 33, 19, 75, -2, -28, 90, 50, 15, -37, -50, 0, -6, -42, 8, -92, -54, 21, 22, 23, 12, 47, -20, -36, -14, 64, -14, -41, -69, -78, 19, 8, -26, 51, 2, -29, 16, -13, 73, -11, 51, -36, 7, 64, 2, -33, -23, -26, -25, -26, 57, -73, 5, 66, 14, -26, -57, -31, -44, 29], [-59, 81, -27, -2, -57, -33, 44, 67, -84, 11, 21, 47, 35, 41, -11, -42, -3, -57, -14, 14, 17, 60, 8, 17, 75, 20, -27, -22, -49, 48, -80, -87, -43, -70, -44, 37, -15, -21, 54, 65, -57, -15, 65, 76, 48, -46, 61, 11, 10, -68, -14, -56, 3, -2, 40, -82, 52, -2, 31, 67, -5, 34, 10, 18], [-33, 48, -31, -34, -58, -30, -21, 54, -8, 37, 23, 51, 25, 26, 15, 61, 86, 31, -21, 7, 42, -21, -5, 58, 50, 4, -44, 64, -42, 93, -6, -65, -26, -25, -2, 54, -52, 4, 8, -25, 64, -9, 55, 33, 4, -33, 75, 21, -21, -37, -13, 35, 8, -23, -3, -75, 42, 18, 6, 21, -8, -15, 52, -57]], [[33, -78, 36, 34, -77, 3, 64, 107, 25, 48, 13, -18, -8, -39, -50, -40, -46, 63, 33, -63, 39, 25, 18, 17, -9, 0, -50, -50, -52, 8, 19, 69, -12, -85, 34, -45, -34, -34, -3, 85, -30, -35, -23, -20, 71, 77, 10, 0, -55, 8, 127, -57, 85, -76, 45, -11, -2, 79, 22, -77, -88, -18, -59, -6], [-16, -45, 40, -58, -80, -43, 17, 52, -4, -1, -6, 18, 29, -31, -1, -48, -74, 36, 36, 43, -15, 24, -29, -21, -32, -12, -40, 10, -57, 2, -41, 18, -32, -46, 7, 14, 65, -38, 25, 81, -79, -15, 4, -30, 38, 42, 81, -33, -36, -24, 97, -11, -17, -23, 49, -19, 4, 12, -40, -15, -25, 63, -36, -9], [-36, -43, 21, 12, -59, -38, -14, -2, 30, 29, -2, 38, -11, -34, -10, -15, -26, 67, -22, 33, -4, -45, 21, -10, 30, 29, -24, 44, -49, 26, -13, 8, -27, 11, 65, 1, 6, 18, 30, -1, 35, -53, -23, 9, 12, 55, 39, -28, -7, 9, 98, 34, -95, 26, 56, -6, -23, -1, -77, -32, -53, 19, -7, -26]]], [[[-4, 42, 28, 74, -7, 30, -35, -56, 9, 24, -75, 1, 89, 55, -7, 1, 27, 24, -11, -51, 26, 20, 79, -58, 78, 63, -63, 0, 22, 54, -17, 22, -7, -16, 44, 63, -34, -47, -58, -30, -10, -25, -45, 47, 9, -26, 16, -15, -8, 0, -56, 73, -73, -33, 66, -23, -3, 61, 10, 5, -71, 23, -61, 34], [0, 25, 26, 26, 14, -3, 4, -39, -3, 22, -56, -13, -2, 79, 15, -7, -49, -18, 9, -4, -88, -15, 17, 39, 87, -7, -100, -26, -53, 39, 25, -24, -57, 26, 14, 61, -37, -32, 24, 10, 17, 32, 6, -59, -25, 28, -45, 8, 0, -25, -94, -21, 36, 3, 42, -28, 11, 59, -31, 22, -121, 14, -37, 19], [4, -26, 55, 7, 36, 6, -47, -46, 31, 29, -100, -12, 57, 63, 8, -43, -33, -12, 36, -65, -71, -22, 8, -2, 82, -23, -24, 81, 33, 5, -47, -33, -13, -2, -29, -36, -30, -39, 17, -47, 18, -15, 10, -53, -28, -8, -62, 1, -25, -17, -58, -15, 42, -8, 127, 28, 9, 25, 4, 39, -78, -43, -65, 18]], [[14, 57, 17, 37, 27, 66, 25, -7, 9, 9, -57, -43, 45, -25, -34, -28, -50, 54, -21, -17, -22, -12, 27, -31, -17, 25, -17, 3, 26, 13, 22, 28, -35, -25, 6, 26, -12, -38, -7, -20, -2, 9, -60, -7, -14, 22, -21, 22, -65, -1, -21, -8, -61, 16, 96, 22, 22, 38, 27, 42, -57, -8, 16, 1], [29, -25, 9, 21, -6, 7, 96, -3, -2, 80, -29, -2, 12, 33, 39, -4, -35, 47, -65, 38, -17, -3, -4, 19, 38, 16, -16, 47, -9, 107, 63, -10, 20, -66, -41, 81, -23, 6, -17, 37, -19, 32, -41, -44, -1, 10, -108, 19, -19, -74, -62, -3, -53, -43, 107, -24, 23, 89, 6, 10, -65, 0, -57, 27], [1, -27, -7, -35, 0, 24, -11, 8, -50, 21, -44, -5, 21, 19, 14, 38, -89, 32, 9, 57, -37, -14, 55, 20, 58, -18, 34, -29, 34, 20, -32, -54, -32, 24, 8, -10, -21, -23, 55, -56, 14, 1, -50, -11, 18, -3, -21, 22, -1, 16, -13, -10, -27, -16, 112, 14, -15, 59, 61, 32, -27, 5, 30, 17]], [[19, -11, 25, 15, -10, 38, -20, 6, 18, -9, -70, 0, 31, -20, -13, -7, -14, -10, -34, 7, -22, 18, -25, -36, -48, 0, -9, 26, -35, -41, -20, 35, 16, 80, 9, -62, 30, 3, 17, 3, 45, -26, -40, -19, 29, 91, 26, 2, 16, 0, 67, -89, -9, -7, -12, 49, 36, -27, 32, -21, 27, -5, 69, -37], [11, -4, -39, 13, 6, -6, 54, 75, 49, 13, 15, 0, -9, 31, -8, 5, 90, 27, -34, -17, -5, 37, -66, -17, -60, 35, -36, 45, -5, -13, 20, -6, -52, 1, -57, 8, 28, 21, -16, 40, 16, 2, -36, -32, -17, -41, -26, 14, -32, 20, 0, -30, -55, -18, -68, 32, 13, 0, -1, -54, 85, 21, -17, -6], [21, -73, -25, -9, 30, 16, 4, 49, 35, -21, -18, -1, 27, -31, 32, -1, 22, -13, 8, 8, -17, 64, 51, 23, 2, 32, -10, -26, -20, 32, -7, 16, -50, 66, 70, -53, 7, 27, -10, 30, -9, -13, -13, -51, 2, -58, 9, -48, -4, 6, 78, 10, -19, 84, -30, 12, -10, -15, 51, -46, 89, -12, 35, 4]]], [[[28, 9, -21, 42, 61, -18, 9, 3, 10, 2, -54, 24, 2, -15, -21, -15, -11, -32, 28, -30, 37, 79, 31, -4, -7, 21, -2, -48, 29, 4, -14, 9, 30, 19, -27, 33, -3, -1, 30, -23, -3, -18, 47, 4, 22, -3, 3, -15, 18, -12, 73, -12, -16, -46, 5, -42, 19, -4, 4, -14, 11, -49, 51, -40], [-19, -2, -13, 28, 61, -1, 47, 1, 22, -6, -26, -30, -32, -25, -21, 9, -35, -27, 22, 12, -4, 60, 26, 16, 2, -42, -10, -38, 15, 22, 13, 18, 5, -4, 39, 18, -17, -25, 17, -15, -45, -19, 2, 40, -10, -41, 0, 19, 39, -17, 47, -12, 2, 16, 7, -5, 7, -12, 12, 3, -5, -57, 20, -24], [24, 37, 12, 14, 28, 6, 32, 31, 12, -20, -54, -39, -19, -33, 25, 24, 11, -16, 45, 33, 2, -32, -23, 22, -21, -44, 42, 54, 8, -42, 6, 31, 17, -14, 23, -43, 6, 5, -4, 12, -24, 7, 10, 25, 10, -10, -42, 13, 12, -10, -8, 15, 51, 4, -2, 27, -29, -50, 15, -18, -3, -5, -31, -40]], [[-5, -81, -4, -30, 5, 42, 43, -127, 39, -2, -40, -12, -17, -3, 15, 11, 6, 15, 1, -75, 0, 13, 1, 19, -39, -3, -20, -47, -15, -16, -38, -15, 16, -39, -8, -3, 33, 76, 18, -26, -19, -33, 17, -71, 8, 20, 16, -1, 10, -22, 7, -17, -14, 16, -43, -18, 19, 41, 10, -42, 33, -14, 29, -32], [-22, -97, -27, -38, -11, -4, 46, -98, 19, -12, -19, 5, -12, -1, -2, 5, 21, 7, -16, -38, -16, 28, -13, 6, -4, -17, -10, -42, -28, -13, -24, -29, 8, -14, -1, 39, 35, 49, 21, -8, -48, -15, 5, -21, 17, -29, -11, -26, 33, -7, 61, -22, -8, -16, -38, -49, -22, 63, -1, -36, -8, -10, 11, -22], [13, -38, 17, -17, -14, -2, 30, -92, 12, 3, -20, -9, -32, -5, 12, 26, 24, -3, -9, 4, -18, -39, 7, 29, -2, -15, 15, -5, -12, -17, -31, 38, 18, -30, 37, -14, 13, 32, -18, 24, -23, 1, -40, 46, 27, -28, -34, -32, -1, 17, 17, 24, 24, 10, -37, -2, -43, 31, 15, -41, -3, 10, -24, -1]], [[2, -41, 42, -58, 22, 38, 16, -40, 0, 21, -48, -39, -6, 1, -40, 29, 7, 28, 39, -25, 1, -8, -11, -14, -30, -47, -16, -32, 10, -8, -29, -65, 23, 16, -6, -26, -10, 1, 0, -32, -19, 24, 34, -2, -43, 35, -43, 5, 22, 7, -60, 13, -24, -8, -24, -13, 27, 68, 26, -18, 59, -4, -30, -34], [-15, -47, -27, 1, 10, 59, -4, 18, -34, 31, -22, -41, -31, -19, -40, 11, 13, 22, -11, 28, -11, -51, -3, -2, -49, -47, -39, -65, 24, 24, -42, -11, 32, 16, 14, 44, 1, 23, 15, -15, -25, 79, 23, -27, -43, -27, -21, -40, -4, 65, 14, -8, -35, 25, -14, -9, 29, 28, 17, -13, 23, 27, 2, 14], [38, -48, 20, 10, 8, 21, -6, 8, 20, 1, -22, -1, 12, -27, -21, -28, -34, 36, -18, -1, 29, -29, 5, 20, 11, 0, 27, -40, 4, 22, -21, -43, -2, -5, 23, -14, 16, -16, -46, 21, -26, 56, 29, 14, 49, -52, -28, -41, 25, 9, -38, 20, 36, -48, 13, 38, -1, 22, 37, 19, -28, 24, -25, 6]]]]> : tensor<64x3x3x64xi8>, "sym_name" = "__constant_64x3x3x64xi8", "sym_visibility" = "private", "type" = memref<64x3x3x64xi8>}> : () -> ()
  "memref.global"() <{"alignment" = 64 : i64, "constant", "initial_value" = dense<[18257, 34241, 24216, -13894, -2520, 8776, 20195, -44184, 5794, 7245, 31267, -4198, 11341, 4682, 7529, 37231, -329, -11601, 4410, 22046, 1, 21649, -18278, -20767, 25009, 17855, 6845, 22214, -13041, -21249, -10192, -46027, -30259, -510, 16649, -25472, 25677, -44783, -5167, 43743, 8053, 35223, 24523, -7278, -3573, -6759, 30328, 1786, -22914, -1920, 11268, 16038, -18429, -8961, -14121, 23306, -25427, 17912, -18220, 17095, -8326, -49181, 12130, 28629]> : tensor<64xi32>, "sym_name" = "__constant_64xi32", "sym_visibility" = "private", "type" = memref<64xi32>}> : () -> ()
  "memref.global"() <{"alignment" = 64 : i64, "constant", "initial_value" = dense<[[[[3, -62, 46, 43, -31, 6, -45, 2, 39, -17, -31, 37, -49, -31, 0, -16, -34, 19, -17, -27, -78, 17, -46, 63, 45, -97, 42, 7, -44, -51, 67, -60], [27, -90, -44, 62, -55, 2, -107, 25, 34, -9, -45, -25, -8, -15, 25, -47, -30, -7, -31, -19, -62, -26, -99, 36, 9, -27, 25, 52, -25, -36, 18, 54], [-3, -77, -59, 44, -28, 13, -99, 39, 6, -30, -25, -32, 30, 45, 40, -22, 35, -37, -28, 15, -34, -13, -66, 7, 13, -18, -2, 48, -13, -16, 2, 68]], [[39, -92, 53, -10, -11, -5, 19, 39, 90, -14, -56, -4, -44, -23, 15, -5, -37, 54, -34, 12, -71, -20, -41, 52, -12, -90, 32, 18, -6, 13, -7, -43], [25, -87, -33, 28, -28, 2, -24, 62, 90, 18, -65, -38, 10, -9, -15, -69, -20, 33, -16, 41, -68, -9, -101, 25, -54, -16, 5, 42, 22, 0, -36, 54], [-7, -27, -38, 54, -6, 11, -29, 127, 51, 2, -23, -43, 37, 22, -9, -74, 37, -7, 3, 58, -59, -23, -86, 12, -20, -29, -37, 43, 28, -17, -2, 81]], [[26, -74, 58, -91, 28, -11, 74, -6, 46, 57, -25, -13, -12, -7, 20, 42, 8, 46, -71, 37, -73, 6, -78, -3, -56, -66, -44, -10, 4, 30, -1, -18], [41, -95, -17, -61, 7, -12, 48, 24, 71, 52, -10, -15, 24, -5, -2, -30, 10, 22, -49, 70, -85, 4, -84, -33, -68, -35, -32, -24, -6, 35, -13, 40], [15, -38, -8, -13, -20, -1, -42, 49, 46, 11, 43, -2, -1, -12, -22, -58, 35, 47, -42, 55, -67, -12, -47, -12, -6, -40, -55, -21, 4, 23, 4, 77]]], [[[2, -91, -37, -9, 26, -25, -31, -20, 52, 14, 7, 27, -48, -1, -26, -101, 63, 39, -45, 2, 19, 24, -74, -2, 39, -45, 2, -77, -4, -20, 53, 49], [31, -124, -20, -55, 20, -15, -12, 8, 119, 0, -49, 78, -63, -36, -36, -33, -24, 13, -50, 54, -13, 7, -47, -5, -16, -72, -11, -120, 36, -28, 58, 76], [14, -19, 110, -25, 26, -40, -4, -10, 66, -7, -33, 45, -32, -5, 14, 16, -45, 29, -40, 60, -7, 2, -20, -10, -7, -90, -10, -86, -19, 0, 7, 63]], [[-45, -52, -10, -29, -6, -3, 16, 47, 43, 36, -43, 73, -79, -21, -18, -24, -46, 14, -69, 40, -20, 17, -115, 36, -75, 7, 25, -70, -33, 1, 20, 68], [9, -127, -41, -97, 6, 28, 20, 56, 61, 31, -57, 104, -109, -26, -25, -18, -42, -4, -43, 105, -28, -52, -79, 10, -113, -26, 11, -95, 25, 14, 23, 79], [35, -92, -1, -81, 16, 23, 42, 9, 30, 1, -50, 63, -22, 36, -21, 51, -12, -34, -63, 90, -20, -31, -29, -3, -57, -33, -19, -79, 16, -1, -22, 54]], [[-56, -32, 40, -25, 6, 38, 61, 69, 7, -10, -18, -10, -43, -34, -51, -96, -95, -2, 48, 44, 6, -83, -22, 18, -22, 42, 12, -20, -30, 37, -34, 22], [-47, -64, -58, -59, 13, 53, 26, 57, -14, 0, -5, 12, -79, 13, 6, -113, 4, -43, 21, 70, 0, -117, -10, 13, -106, 1, -31, -24, -34, 37, -31, 53], [2, -9, -98, -31, 60, -6, 35, 48, -11, -43, -13, -30, 25, 62, 14, -57, 57, -47, -5, 55, 1, -40, 22, 10, -62, 25, -23, -39, -5, 40, -56, -4]]], [[[-9, -7, -17, 12, -13, -9, 12, -45, -2, 49, 1, 8, -29, 11, -21, -1, 46, -7, -4, 17, 18, -20, -38, 6, 3, -14, -12, -4, 29, 3, 33, -25], [19, -53, -11, 127, -43, 29, 18, -60, -20, 6, 19, 41, -37, 52, -46, -2, -1, -4, -8, 1, -16, -16, -3, -6, -50, -28, 47, -24, 25, -19, -23, -16], [19, -67, 13, 92, 8, 37, 11, -54, -10, -45, 27, -1, -9, 37, -31, 17, -20, 10, -9, 5, -25, 7, 24, 0, -65, -34, 28, -45, 15, -9, -37, 16]], [[-20, -20, -32, -9, -38, -18, 29, -48, 39, 35, -29, -12, -33, -23, -22, -23, 20, -29, -47, -14, 3, -18, 12, 16, -37, 9, 63, -13, -12, 4, -9, -30], [-39, -55, -41, 42, -55, 19, 21, -18, 30, 19, -28, -29, -13, 26, -6, -37, -8, -30, -76, -56, -44, -72, 16, 19, -28, -34, 90, -32, 10, -8, -46, -8], [-35, -30, -32, 37, -17, 16, 36, 8, 23, -16, -43, -44, 3, 5, 10, -12, 4, -27, -80, -27, -43, -63, 28, -1, -24, -28, 71, -43, 35, 10, -17, 1]], [[-31, -3, 15, -8, -16, -26, -17, 10, 70, 6, 0, -34, 23, -12, 2, -28, -58, 5, -82, -15, 6, 26, 1, -11, -59, 25, 62, -29, -50, 13, -29, -30], [-77, -16, -9, -16, -50, 25, -19, 23, 65, -32, -27, -44, 26, 4, 38, -25, -48, -31, -79, -53, 4, -30, -12, 48, -57, -1, 60, -56, -8, 10, -21, -7], [-45, -9, -29, -15, 9, 32, -5, 15, 44, -44, -26, -58, -2, 17, 34, 1, -14, -42, -58, -16, -19, -88, 34, 51, -23, -4, 30, -42, 23, 26, -11, -6]]], [[[7, -22, 3, -20, 14, -12, -9, -64, 70, 10, -82, -12, -9, -45, -24, -14, 13, 35, -17, -10, 46, 1, -23, -22, 53, 74, -2, 8, 33, 50, -30, -3], [-10, -54, -10, 57, 3, -12, -20, -40, 34, -40, 60, -1, -58, -45, 10, -5, 37, 38, 6, -12, 60, 93, -24, 10, 22, 16, -41, -28, 26, 47, -37, -8], [16, -37, 41, 6, 1, -28, 13, -8, 43, -51, 91, 6, -66, -6, 32, 10, -10, 41, 19, -3, 11, 42, -27, 12, 22, 29, -49, -63, -4, 29, -18, -30]], [[29, -26, 18, -42, 48, 26, -6, -70, 30, 14, -73, -27, 35, -2, -1, -70, 3, 8, -50, 15, 51, 27, -36, 1, 47, 46, -16, 25, 78, 42, 6, -4], [-13, -52, -20, -45, 44, 40, -7, -99, 79, -4, 57, -29, 23, -31, 3, -51, 27, 28, -53, -11, 87, 115, -24, 0, 10, -5, -23, -1, 63, 19, 37, 21], [-9, -20, -5, -56, 18, 3, -18, -49, 61, 20, 127, -22, -10, -17, 20, -32, 9, 13, -30, -11, 71, 105, -37, -18, -12, 24, 11, -33, 30, 37, 28, 15]], [[18, -17, 16, -71, 26, 5, -9, -33, 19, 38, -17, 5, 69, 36, -19, -34, -32, -40, -13, 1, 32, -20, -15, -3, -21, 18, -19, 19, 42, 15, -28, -22], [-15, -8, -31, -70, 64, 42, 25, -77, 49, -6, 47, -18, 46, 10, -30, -4, -66, 2, -70, 14, 97, 4, -30, 17, -30, -51, 21, 8, 61, -18, 3, 7], [-44, 17, -65, -62, 40, 54, -11, -48, 24, -5, 71, -42, 16, -27, -23, 3, -46, -25, -95, 31, 70, 76, 7, -19, -79, 24, 33, 0, 12, 29, -7, 11]]], [[[-5, 2, -57, -73, 99, -20, 26, -20, -5, -5, -34, 45, 62, -2, -22, 25, -22, 10, -44, -16, -11, 24, 3, -27, 2, 43, -11, -46, -23, 99, -11, 13], [11, 3, -43, -47, 65, -20, 43, -31, -1, -24, -38, 78, 10, -58, -75, -17, -11, 9, -62, -22, -48, -1, 8, -38, 21, 27, 15, -68, 12, 103, -20, 32], [41, -17, 34, -63, 42, 0, 51, -23, 2, 7, -5, 35, 14, -48, -74, -4, -35, -29, -50, -4, -34, -4, 22, -10, -5, -13, -12, -51, 33, 51, 9, 22]], [[25, 17, 12, 29, 53, 83, 22, -34, 8, 10, -21, -11, 29, -27, -20, -18, 13, -39, 11, -10, -27, 0, -8, -3, -2, 98, 29, -22, -19, 103, 29, -21], [-3, 10, -14, 24, 42, 58, 28, -80, 33, 34, -33, 39, 23, -37, -45, -44, 5, -11, -30, -9, -63, -2, 41, -46, -1, 79, 12, -79, 15, 106, 23, 1], [-14, 26, 11, 1, 12, 4, 23, -49, 27, 42, -18, 14, 15, -46, -34, -49, -5, -3, -21, 7, -44, -9, 42, -35, -44, -3, -33, -47, 12, 92, 33, -6]], [[-27, 29, -108, 66, 11, 19, -69, -65, 6, 11, 8, -38, -10, -47, -15, -36, 49, -51, 55, -37, -11, 15, -25, -47, -20, -38, 11, -6, -23, 94, 5, -40], [-31, 35, -63, 49, -31, 61, -2, -86, -1, 14, -8, -52, -9, -69, -3, -5, -40, -34, 48, -26, -46, 6, 10, -70, -25, 112, -23, -35, 9, 127, 5, -27], [-7, 56, 3, 54, -18, 35, -1, -56, 11, 4, -15, -11, -32, -70, 15, -12, -48, -13, 53, 15, -24, 1, 27, -19, -46, -21, -38, -10, 22, 111, 22, -15]]], [[[-40, -11, -13, -9, -5, 13, -51, 56, -37, -77, 13, -52, -56, 27, -35, 62, 13, -76, 41, 53, -44, 66, -6, 29, 79, 24, 13, 74, 31, 26, -81, -1], [-29, -35, 65, -12, -15, -32, 4, 41, -9, -117, -40, -104, -56, 42, -49, 5, 81, -12, 45, 83, -73, 83, -54, -3, 15, -20, 3, 80, 46, 69, -54, -51], [-8, -35, 19, 22, -21, -28, 100, -20, -43, -25, -14, -61, 1, 50, -50, 25, 38, 12, 32, 35, -41, 42, -111, 3, -4, 8, -10, 67, 7, 93, -75, -34]], [[-104, 8, 15, 1, 44, -15, -26, 27, -36, -53, -5, -90, 22, 13, -8, -12, -69, -46, -16, 22, -11, 60, 63, 42, -23, -17, -15, 62, 33, 29, -26, 8], [-112, -14, 9, 5, -2, -81, -16, -5, -23, -101, -51, -117, -25, 14, -21, -50, -33, 0, -25, 20, -22, 58, 26, 38, -55, -57, -5, 82, 35, 56, 8, 5], [-35, -49, -30, 11, -48, -46, -19, -27, -5, -30, -35, -65, 5, 14, -39, -47, -54, -17, -31, -40, -1, 45, -43, 10, -39, -15, 22, 25, 44, 70, 11, -14]], [[-66, -1, 11, 98, 0, -35, 6, -11, -22, -8, 27, -16, 4, -37, 33, -2, -45, 36, 12, 6, -3, 49, 78, 40, -71, -23, 34, -15, -10, 25, 9, 1], [-61, -8, -41, 122, -17, -127, 27, -3, 5, -58, 1, -55, -41, -22, 15, 20, -18, 38, -21, -46, 28, 41, 85, 45, -64, -27, 22, -24, 5, 4, 19, 7], [-27, -13, -90, 105, -57, -62, 28, 2, 44, -9, -13, -14, -21, -30, 23, 11, -1, -22, -14, -63, 18, 29, 17, -5, -48, -54, 6, -46, 23, 27, 45, 7]]], [[[-58, 3, 9, -25, -3, 8, 46, -22, 20, -100, 19, -4, 17, 36, -40, 13, -27, -16, -1, 14, -47, -51, 6, -26, -62, -26, -21, 11, 8, 10, -81, 4], [-79, 27, -22, 4, -1, -43, 56, -65, 24, -115, 26, -48, 51, -10, 8, -53, -32, -76, -34, 35, -22, -17, 41, -69, -76, -57, -6, 30, 12, 3, -31, -7], [-29, 25, 32, -10, -11, -42, 69, -18, 52, -28, 16, -9, 30, -9, -7, -30, -65, -63, -51, -17, 18, -2, -17, -8, -95, -11, -14, 24, 28, 14, -1, 26]], [[21, -19, -30, 14, -5, 31, 46, -49, 18, -55, 19, -43, 64, -51, -6, -30, -46, -19, -16, 71, -24, -41, 53, -58, 11, 0, -15, 3, -13, 6, -78, -52], [-45, 124, -59, 67, -35, 8, 53, -115, 67, -46, -30, -15, 117, -30, 20, -56, -37, -46, 8, -10, -3, -27, 57, -93, 30, 2, -2, 25, 26, 30, -49, -40], [-48, 127, -45, 80, -25, -59, 21, -83, 47, 23, -46, -11, 57, -34, -25, -42, -27, -29, 3, -48, 7, -19, -34, -25, -11, -23, -14, 29, 16, 16, -46, 16]], [[38, 24, -4, -34, -28, 77, 19, -17, 38, 1, -30, -55, 26, -15, 19, 41, -72, 18, -36, 14, -19, -33, 2, -32, 33, 37, -9, -3, -13, 3, -92, -49], [9, 90, -44, 45, 8, 59, 8, -96, 59, 8, -56, 12, 66, -5, 12, -26, -2, 6, -40, 11, 3, -37, 1, -47, 17, 27, -9, -11, 3, 39, -62, -29], [16, 52, -78, 20, -32, -29, -45, -92, 15, -4, -49, -9, 13, 22, -22, 18, 43, -11, -25, 22, -20, -27, 8, -4, -18, -27, -13, 5, 9, 11, -61, 40]]], [[[-30, 11, 12, 68, -19, 19, -8, 13, 14, 8, 28, -12, -8, -51, -15, 31, -27, -40, 21, 59, -13, -5, 1, -63, 27, 15, -26, -4, -22, 31, -50, -10], [8, -24, 13, 32, -11, 33, 27, 20, 41, 11, 30, 5, 29, -14, -8, -11, -45, -85, 35, 54, 29, 68, -27, -34, -5, 15, -29, 17, -45, 43, -31, 51], [105, 14, -47, 15, 5, 40, 85, 20, 104, 4, 45, -7, 19, -4, 52, 20, 8, -106, -12, 78, 31, 33, -55, 3, 1, 2, -30, 29, -44, -14, -23, 72]], [[-104, 7, 35, 63, 26, 19, 7, -14, 13, 24, 17, 28, -28, -11, -33, -41, -32, -54, 22, 67, 58, -64, -39, -55, 57, -4, -74, 19, -8, 6, 30, 86], [-91, -7, 38, 84, 26, 44, 36, -4, 16, 52, 51, -18, 25, 7, -67, -56, 13, -43, 96, 39, 99, -16, -31, -57, 2, 19, -83, 25, 6, 32, 21, 62], [-23, -4, -58, 44, 10, 28, 66, -1, 56, 45, 14, -41, 9, 22, -62, 6, 56, -85, 65, 57, 82, 5, -42, -18, 7, -3, -49, 5, 2, 1, 6, 65]], [[-98, -19, 85, 58, 71, 7, -31, 4, 53, -1, 21, 27, -51, 16, -57, -18, -61, -32, 16, 32, 81, -46, -35, -47, 37, -34, -31, -18, -12, -18, 25, 70], [-127, -3, 54, 63, 58, 20, 49, 11, 34, -7, 41, -49, 6, 17, -79, -17, 37, -30, 68, 34, 82, -50, 6, -68, 13, -15, -52, -4, 42, 9, 4, 55], [-88, -25, -70, 31, 48, 61, 34, -3, 24, -6, 35, -67, -12, 29, -79, 15, 95, -51, 43, 25, 57, -48, 90, -11, 20, -59, -21, -49, -6, -14, 3, 11]]], [[[-31, 27, 27, -60, 21, -9, -33, 37, -2, -34, 83, 12, -9, 46, -12, 64, 59, -8, -20, -37, -27, 17, 52, -3, -97, 21, -19, -8, -20, 55, -45, 20], [6, 34, 58, -18, 1, -8, -24, -10, 6, -47, 104, 2, 15, 66, 8, 36, 20, -4, -65, -27, -18, -25, 48, -37, -93, 23, -22, -35, 10, 21, 4, 31], [18, 16, 17, -7, 11, -31, 2, 28, 25, -32, 48, -5, 14, 50, -7, 34, 25, 13, -27, 2, 2, -61, 18, -25, -29, -42, 0, -10, 13, 0, 6, 28]], [[-29, 2, -34, -26, -4, -6, -59, -66, -10, -46, 76, -29, -72, 2, 26, 14, 103, 20, -35, -3, -12, -41, 27, 33, -26, 23, -34, 12, -65, 3, 1, 0], [-56, 17, 37, 7, -8, -15, -21, -108, -43, -47, 127, -29, -23, 17, 1, -6, 12, 3, -57, 12, -2, -20, -11, 23, -23, 58, -18, 6, -27, -5, 6, 24], [-40, 36, 58, -22, -3, 3, 32, -30, 8, -30, 70, -30, -3, 8, -23, -24, -22, 20, -35, 34, -17, -30, -21, 26, -10, 11, -11, -5, 13, -31, 11, -3]], [[-19, -44, -15, -7, 22, -32, -36, -87, 24, -34, 49, 10, -27, -28, -8, -17, 0, -31, -26, -13, 16, -49, 20, 14, 28, 10, -26, -12, 13, -4, 35, -37], [-56, -34, -27, 50, 34, -32, -16, -98, 12, -1, 83, -24, -19, -19, -54, -49, -40, -17, 0, -14, 14, -56, -1, 28, 95, 53, 0, -6, -35, -31, 7, -12], [-34, 36, 22, 52, 16, 45, 19, -36, 15, 7, 38, 2, 20, -27, -53, -22, 17, 9, 1, 0, -17, -28, 5, 29, 71, 26, -7, 18, 9, -5, 1, 21]]], [[[48, 10, -26, -31, -22, -44, 57, 21, -62, -56, -36, 18, 0, 5, 2, -18, 46, -30, -19, -11, 22, 10, 55, -11, -4, -51, -7, -30, -35, -56, 36, -35], [29, 43, 41, -77, -27, -30, 44, 3, -25, -81, -40, 53, 48, -13, -6, -11, 16, -25, -4, 15, -18, 15, 51, 34, 41, -33, -18, -54, -78, -70, 72, 34], [20, 54, 78, -44, 1, -4, 49, -10, 27, -19, 3, 36, 55, 5, -42, 1, -18, 29, 18, 21, -2, 13, 8, 66, 39, -51, -8, -26, -49, -40, 46, 98]], [[30, -18, -68, 10, -38, -7, -48, 5, -38, -44, -73, 32, 50, 4, 14, -20, 72, -15, 4, 2, -5, -53, 42, 11, -2, -22, 29, 32, -6, -67, 36, -59], [45, 20, 12, 11, -30, -21, -64, -9, 0, -45, -73, 46, 89, -21, 16, -30, 23, -4, 11, 40, -26, -28, 52, 39, 18, -16, -8, 19, -50, -52, 52, -30], [33, 22, 49, 19, -8, -2, -30, 41, 34, 1, -44, 25, 98, -23, -36, -8, -17, 12, 26, 38, -5, 10, 27, 34, 17, -34, -9, 18, -18, -37, 12, 42]], [[-22, -23, -36, -44, 6, -1, -60, -13, -25, -17, -31, 7, 27, 11, -8, 34, -34, 15, -7, -38, -40, 12, -12, -12, -13, 28, 7, 25, -20, -25, -3, -3], [20, -9, -50, -44, 7, -45, -127, -32, 5, -15, -30, -6, 48, 1, -31, 27, -57, -10, -20, -14, -70, -15, 11, 44, -18, 10, 2, 12, -64, -29, -29, -20], [21, -34, -45, -19, 10, -37, -46, 14, 42, 14, -43, -18, 71, -8, -63, 62, -81, -32, 19, -12, -36, 0, 12, 10, -3, 0, 25, -14, -31, -20, -70, 54]]], [[[-82, -90, 71, 18, -27, -12, 15, -11, -63, -81, 14, 58, -48, -20, -49, -22, 16, -3, 38, 15, -18, -56, -48, -69, -21, 127, -7, 42, 22, -94, 0, 19], [10, -108, -26, -44, -11, -39, -18, -9, -50, -43, -17, -34, -108, 1, -30, -8, -1, -43, 75, 44, -4, -67, -92, -66, 23, 28, 37, 26, 49, -40, 55, 8], [-24, -72, -18, 13, 16, 6, 59, 0, -29, -49, -86, 11, -40, -34, 6, -27, -34, -38, 25, -1, 2, -39, -83, -34, -26, 50, 27, 39, 35, -14, 87, 8]], [[-9, -92, -15, 68, -4, -36, -17, -22, -22, 116, -53, 11, 10, -31, -45, -8, -3, 2, 28, -11, 23, -28, -66, -42, -18, 73, -54, 12, 66, -32, 15, 59], [26, -96, -42, 18, 2, -81, -17, 15, -40, 99, -5, -37, -85, 26, -43, 56, 4, -51, 63, 21, 20, -72, -103, -59, -57, -68, -30, 40, 69, -13, 27, 9], [-21, -73, -28, 3, -43, -49, 7, 25, 11, 80, -42, -3, -40, -35, -27, 70, -26, -36, 80, 16, -8, -14, -40, -41, -21, -19, 14, -2, 23, -30, 34, 21]], [[-50, -34, 39, 4, 27, -32, -53, -34, -12, -57, -30, -37, 28, -51, -62, -24, 0, 25, -44, -36, 58, -62, -70, -21, 33, 82, -2, 4, 21, -17, -11, 82], [13, -63, -30, -48, 49, -57, -47, -18, -6, -67, -5, -64, -37, -27, -32, 21, -5, -31, 8, 1, 30, -78, -57, -44, 15, -15, -32, 55, 20, -16, 6, -23], [-24, -93, -99, -83, -18, -25, -26, -41, -20, -57, -39, -62, -49, -53, -40, 30, 44, -47, -5, -46, 12, -54, 13, -67, 14, -46, -9, 22, -21, -65, 28, 38]]], [[[19, 19, 88, -66, 65, 59, 32, -36, 44, 88, 9, -59, 37, -33, 52, 19, -127, 28, -21, -34, 30, -36, 37, 9, 19, -33, 22, -21, 23, 13, -31, -33], [-32, -24, 57, 8, 6, 37, 11, 9, 41, 24, -20, -37, -56, -5, 17, -3, -72, -7, -27, 5, 8, -20, 58, 37, -47, -9, 13, -36, -14, 45, -19, -5], [-38, -46, 35, 19, 4, 38, -31, 47, -8, -24, 23, 18, -63, 38, 0, -50, -92, 13, 4, 74, -22, 33, 43, 25, 14, -44, -13, -1, -14, 62, 4, -2]], [[-21, -72, 63, -90, 48, 61, 36, -32, 13, -31, -18, -37, 12, -45, 43, 18, -29, 22, 6, -6, 7, 0, 75, 36, -27, -14, 65, -48, -45, 17, -38, 22], [-47, -91, 20, -38, 34, 59, -47, -20, 1, -9, -65, -23, -81, 29, 51, 0, -15, -10, -21, 10, -43, 59, 74, 68, -58, -34, 42, -32, -83, 45, -46, 23], [12, -46, -12, 5, 35, 80, -38, 41, -13, 4, -49, -19, -60, 58, 20, -23, -6, -4, -14, 23, -56, 23, 56, 35, -40, -53, -16, -7, -25, 38, 5, -1]], [[-27, -74, -38, -46, 41, 61, -9, -51, 22, -11, 4, 16, -55, -59, 34, -45, 60, 72, -20, 53, -10, 43, 99, 38, 29, -42, 27, -22, -52, -18, -59, -1], [-31, -9, -68, -4, 42, 58, -30, -14, -23, -2, -41, 15, -45, 0, 32, -12, 76, 44, 3, 18, -46, 101, 109, 19, -38, -36, 22, -60, -27, 11, -73, 15], [21, -4, -73, 9, 41, 73, -15, -32, -8, 7, -34, -1, 16, 52, 11, -1, 85, 9, 25, 23, -55, -2, 107, 7, -20, -42, -22, -29, 19, 31, -68, -18]]], [[[-19, -52, 28, 1, 30, -18, -13, 11, -11, 8, 10, -3, -48, -22, -9, 0, 21, 4, 49, -14, -37, 24, -84, 5, 24, 39, 4, 15, -12, 3, -49, 62], [-46, -83, 34, -64, 13, -38, -11, -27, -7, -6, 6, -27, -65, -48, 10, 50, 10, 19, 18, -3, -79, 64, -77, -34, -35, 48, 26, -30, 0, -9, -49, 96], [-39, -37, 68, -32, 32, -19, -19, -9, 5, -2, -4, -31, 17, -77, 53, 0, 3, 35, 4, 40, -38, 57, -50, -31, -48, -53, 24, -59, 17, 1, -9, 43]], [[-36, -37, 10, 16, 18, -17, -10, 49, 0, -24, -50, -18, -127, -36, -65, -27, 58, 37, 24, -7, -63, 25, -51, -44, 17, -2, 45, 12, -22, -17, 10, -11], [-20, -82, -6, -46, 11, -15, 4, 12, 8, -16, -45, -52, -106, -37, -15, 30, 12, 27, 21, -14, -118, 44, -8, -97, -27, 37, 86, -23, 43, -34, 27, 74], [-7, -86, 39, -21, 21, 0, -4, -34, 6, -6, -21, -41, -47, -43, 31, 52, 22, 15, -31, 13, -71, -5, 4, -73, -59, -39, 64, -46, 62, -40, 71, 61]], [[-40, 3, 9, 17, -9, -26, 38, 0, 31, -10, -28, 12, -97, 28, -71, 9, 12, 6, -61, -49, -35, 29, -38, -37, 28, -2, 80, 10, -9, -48, 44, 20], [-34, -43, -11, -8, 2, -6, 1, -40, 19, -35, -26, -10, -75, -6, -9, 26, 1, 4, -56, -11, -66, 28, -9, -70, 3, -10, 54, -1, 11, -72, 49, 82], [-18, -52, 13, 4, -19, 3, 16, -84, 17, 33, -16, 0, -73, 9, 7, 41, 22, -3, -96, 18, -50, -27, 16, -61, 21, -65, 43, -19, 17, -68, 105, 83]]], [[[35, -34, -76, -46, 17, -3, 26, -32, -40, -10, 9, -31, 33, -58, 4, 31, 20, 23, 8, -45, 47, 36, -29, 39, -62, -39, -23, -30, 12, 11, 50, 9], [-5, -35, -49, -41, 47, 12, 17, -57, 37, -4, 19, -39, 31, -8, 63, -24, 7, -49, 21, 7, 37, 16, -44, 34, -13, -8, -71, -25, -6, -13, 27, -1], [-21, -21, -12, -7, 40, -15, -49, -16, 66, -13, 26, -8, 51, -35, 21, -43, -30, -47, 24, 26, -48, 16, -22, 12, 22, -10, -32, 1, -38, 4, -12, 1]], [[-27, -29, -25, -65, -3, 5, 27, -28, -38, 24, -2, -45, 76, -63, 6, 27, -35, -33, -8, -18, 108, -4, 15, 29, -76, -18, -7, -66, 40, -18, 35, -11], [-64, 1, -22, -96, 47, -15, 40, -15, 72, 8, 23, -42, 114, 8, 39, -76, -31, -86, -22, 41, 67, -6, -1, 66, -27, -61, -53, -92, 67, -20, -25, -24], [-83, 28, -49, -25, 68, -10, -15, 39, 84, -18, -14, -45, 113, 14, 2, -51, 1, -10, 29, 65, -25, 20, 13, 63, 4, -9, -43, -34, -7, 21, -53, -9]], [[-23, -31, 10, -94, -53, -65, 11, 2, -21, 62, 22, 18, 56, -20, -39, 36, -41, -39, -13, 29, 86, 1, 2, 21, -44, 16, -22, -62, 43, -55, -25, -12], [-14, 1, 41, -63, 3, -15, 47, 36, 96, 32, 16, 25, 127, 24, -40, -12, -3, -63, -34, 77, 2, 45, 31, 35, -6, -45, -5, -85, 65, -27, -86, 12], [17, -14, 14, 32, 24, -2, 1, 53, 12, -39, -45, -10, 69, 27, -33, 8, 2, 27, 25, 61, -43, 37, 56, 42, -6, 9, 19, -28, -38, 20, -59, 20]]], [[[62, 12, -87, -48, 12, -54, 3, 37, 71, -8, 2, -52, -60, -30, -33, 14, 80, 23, -42, -17, 69, 74, 9, -20, -57, -22, 5, -45, -6, 14, 8, -12], [70, -84, -114, 68, -50, -74, -21, -43, 21, 20, 42, 22, -20, -13, -54, -32, 9, 18, -40, 31, 49, -16, 17, -31, -25, 72, -7, -39, -2, -38, -59, -5], [51, -62, -2, 113, -13, 20, 23, -15, 18, -14, 64, 7, 7, 22, -74, -76, -101, -8, -54, 37, 17, -74, 2, -4, 41, 52, 3, 10, 68, -31, -88, -30]], [[11, -5, -11, -63, 7, -29, -30, -13, 25, 104, -94, -40, -76, -11, -34, 27, -36, 1, -4, -29, 23, 52, 66, -4, -3, -2, 4, -88, -74, -18, -24, -28], [-9, -72, -89, 16, -93, -73, -84, -21, 51, 108, 50, -2, -11, -30, -31, -87, 23, -13, -14, 38, 7, 55, 26, 37, -40, 115, -31, -93, -22, 3, -83, -1], [11, -51, -19, 68, -89, 5, -100, -21, -7, 18, 104, 2, 13, -27, 5, -80, -77, -6, -46, 41, 2, -14, -19, 88, -6, 36, -23, -69, 32, -6, -110, -26]], [[58, 24, -38, -101, 1, 4, 12, -45, -57, 1, -94, -5, -9, 33, 1, 28, 3, -7, -15, 28, -16, 34, 80, 23, 89, 78, -4, -21, 19, -83, 33, -24], [-22, -15, -110, -30, -89, -70, -30, 19, 15, 34, 11, -12, 6, -69, 32, -50, 30, -3, -25, 47, 10, 111, 56, 87, -13, 74, -26, -39, -44, -2, 0, -13], [-17, -4, -26, -1, -127, -6, 19, 66, -32, 22, 74, -9, 35, -64, 46, -44, -48, 14, -13, 25, 26, 58, 12, 125, -28, 30, -12, -22, 27, -21, -14, 16]]], [[[-27, 11, 80, -24, 29, 34, 68, -64, -30, 22, 48, 110, 17, 22, 61, -24, -8, -38, 6, -103, -3, -48, -28, 8, 50, 23, 13, -32, -66, 9, -28, 61], [-37, -7, -20, -62, 77, 34, -51, -49, -16, 28, -10, 119, 17, 17, 15, -69, -14, 31, -52, -93, -35, -14, 19, 30, -10, 4, -1, 11, -102, 63, -86, 70], [-31, -21, -24, -43, 19, 25, -2, 34, -41, 16, -28, 90, -1, 0, -39, -44, 37, 26, -63, -41, -38, 61, 5, 28, 2, 9, -14, 13, -93, 65, -81, 7]], [[-19, -19, 9, 40, 40, 2, -27, -98, -23, -16, 78, 63, -52, 23, 31, -84, -85, 47, -24, -127, 12, -5, 12, -4, 25, -17, -5, 15, -54, -2, -79, 44], [-2, -64, -73, 1, 74, -21, -57, -100, -2, -47, 56, 84, -33, 28, 27, -108, -56, 72, -34, -126, -32, 4, 75, 9, 34, -8, -11, 67, -84, 21, -91, 30], [1, -30, -71, -22, 27, -19, -23, -48, 5, -50, -25, 124, 9, -13, 9, -37, -22, 2, -66, -88, -45, 51, 45, 21, 34, 0, -19, 53, -91, 78, -15, 29]], [[-48, -12, -2, 45, -12, -32, 21, -90, -1, -1, 86, -24, -48, -8, 34, -26, -42, 42, -1, -30, -25, 32, 48, 14, 25, 62, -8, -22, 6, -17, -37, -22], [11, -69, -39, 6, 48, -48, 13, -49, 54, -51, 97, -8, -13, 23, 23, -88, -50, 60, 5, -84, -47, 13, 65, -14, 14, -19, -12, 20, -40, -6, -24, -54], [-6, -8, -33, -33, 4, -44, 17, -51, 52, -32, -32, 51, 12, -13, 13, -40, -33, -20, 0, -97, -21, 27, 8, -10, -8, -20, -10, 19, -69, 54, 21, 8]]], [[[14, -39, 117, 12, -24, -15, 6, 14, -11, -48, -18, 4, 1, 0, -16, 2, -45, 25, 2, -28, 14, -17, -32, -1, 14, 44, -3, 2, -20, 20, 17, 2], [9, -30, -6, 19, -13, -23, 5, 25, 1, -43, -50, 6, 24, -7, 38, 25, 41, 28, 17, -28, 13, 2, -16, -17, 24, 70, 8, 29, -19, 17, 16, -19], [0, -9, -72, 29, 1, -18, 50, 59, 25, -12, -3, -23, 48, 34, 54, 26, 105, 18, 43, -15, -15, 20, 11, 13, 25, 10, 14, 41, -42, -17, 14, -21]], [[9, -54, 114, -15, 30, -2, -16, -29, 38, -39, -7, 71, -5, 25, -9, -24, -37, 1, 8, -2, -15, -20, -26, -15, -20, -15, -24, 4, -13, 7, -23, -24], [9, -65, -2, -11, 12, -17, -48, -15, 40, -66, -29, 116, 14, 34, -16, 6, -6, 22, 30, -15, -41, -18, -13, -41, -48, 12, -13, 11, 16, 13, -15, -56], [7, -14, -71, 8, -7, -17, -18, 33, 43, -47, 2, 55, 39, 78, -15, 20, 60, 35, 52, 3, -37, -7, 29, -35, -3, -28, 1, 25, 8, 0, -27, -44]], [[28, -66, 31, -29, 10, 18, -20, -71, -15, 23, 5, 69, -15, 15, -32, 26, -36, -49, 9, -6, -4, 12, -55, -25, -13, 8, -3, -1, -17, -15, -19, 41], [20, -80, -25, -19, 30, 7, -52, -46, -5, 3, -7, 127, -8, 4, -62, 26, -38, -11, 17, 15, -19, 22, -53, -35, -28, 27, 6, 5, -22, -22, -51, 26], [-4, -45, 1, -25, 31, 17, -48, -20, 5, -31, 29, 56, 4, 50, -38, 19, -2, -2, 16, 28, -3, 2, -8, -27, 8, -11, 6, 6, -26, 9, -43, 40]]], [[[-18, 4, -121, 9, -98, 1, -29, -45, 17, 30, 4, 11, -10, -17, -22, 37, 54, 23, -18, 49, 14, 79, -18, -62, -32, 63, 37, -3, -4, -11, 29, -19], [14, -15, -55, 49, -127, 24, -24, -34, 34, 5, 12, -56, 1, -24, 8, 44, 19, -38, 82, 64, -2, 29, -4, -65, -70, 50, 51, 10, -4, 17, 61, 2], [26, -1, 12, 53, -70, -4, 26, -51, -8, 28, 25, -52, 2, -47, 37, 45, -92, -75, 40, 86, -22, 52, -8, -6, -60, -30, 9, -2, -17, 7, 67, 33]], [[9, -32, 14, 63, -60, -31, -46, 22, 41, -50, -2, -39, -31, -16, -15, 41, -49, 38, 13, 48, 3, 46, -4, -53, 26, -20, 68, 31, -61, -56, 34, -56], [40, -23, -17, 81, -75, 15, -43, -13, 72, -57, 18, -95, 21, 15, -33, 15, 24, 36, 63, 68, -26, 11, 28, -75, -9, -20, 87, 31, 8, -35, 39, -18], [4, -32, 8, 53, -65, -11, 37, -44, 31, -46, -1, -103, 18, -15, 0, 42, 10, -33, 22, 89, -40, 5, 21, -51, -34, -56, 42, 10, 18, -8, 20, 13]], [[31, 4, 87, 58, -7, -44, 45, 73, 43, -42, 5, -36, 23, 18, -4, -21, -117, 21, 13, 3, -32, 10, -88, -7, 48, 7, 26, 44, -19, -64, -46, -88], [16, -21, -4, 18, -51, -10, 0, 41, 75, -64, 4, -80, 45, 63, -17, -31, 36, 97, -5, 49, 0, -72, -15, -42, 70, -14, 44, 32, 18, -38, -26, -58], [-3, -65, -42, -3, -35, 7, 36, -15, -1, -64, 25, -37, 2, 36, 12, -20, 50, 49, -38, 23, 15, -52, 20, -26, 65, -21, 29, 1, 7, -5, -52, -7]]], [[[-100, -23, 38, 16, -24, 49, -28, -3, 91, 21, -13, -12, -63, 12, 15, -44, -91, -33, 26, -28, -41, 30, 0, 25, -36, -41, 61, -8, 28, 94, -12, -19], [-105, 64, -8, 39, -21, 31, 15, 5, 77, -1, -39, 10, -53, 23, -13, 11, -10, -50, -14, -52, -31, 35, 18, 1, -61, -54, 36, -2, 53, 83, 6, -31], [-9, 61, -37, -32, 13, -27, 10, 66, 33, -9, -5, 10, 12, 30, -54, 16, 16, -54, -53, -92, -11, 85, 6, 18, -2, -127, 12, -8, -5, 42, 21, 5]], [[-35, 14, 39, 68, 5, 19, 33, 26, 29, 17, -62, 1, -27, 1, 68, 5, -30, -45, 57, 12, -53, 47, 25, -66, -27, -55, 55, -39, 27, 91, -25, -45], [-84, 49, 13, 47, -3, 25, 25, -10, 5, -1, -68, 22, -11, 6, 44, 50, 0, -85, 28, -9, -38, 47, 2, -56, -12, -78, 66, -22, 58, 101, -25, -11], [-19, 38, -13, 14, -4, 3, -8, 27, -32, 1, -24, -27, 28, -21, 3, 65, -9, -78, 15, -28, -1, 44, -33, -15, -40, -61, 15, -33, 5, 50, 5, 18]], [[-48, 42, -37, 43, -9, 11, -45, 3, -33, -33, -7, -2, 19, -56, 18, -27, -18, -22, 91, -9, -62, 56, -28, -99, -41, -38, 31, -24, -3, 54, 5, -44], [-47, 57, -31, 18, -18, 5, -9, -44, -101, -56, -28, 10, 22, -53, 14, 11, -2, -75, 61, 13, -44, 12, -61, -54, -17, -83, 13, -41, -1, 52, -11, 13], [12, 48, -1, -39, 2, -35, -14, 4, -83, -45, -11, -31, 66, -53, -5, 6, 32, -72, 37, 34, -32, -9, -29, -7, -51, -35, -30, -37, -24, -4, -2, 39]]], [[[-14, 60, 61, -5, 14, 32, -50, 16, -44, 15, -58, -34, -44, 43, -1, -87, 2, 92, -3, 6, -11, -70, -27, 1, -30, -65, 8, -22, -27, 25, 17, -12], [-12, 58, 62, 15, 29, 28, -6, 64, -51, -36, -12, -6, 9, 45, 7, -31, 74, 59, -12, 14, -11, -39, -18, 15, 28, -62, 7, 10, -65, 76, -17, -3], [-104, 64, -43, 43, -24, -62, -72, 3, -103, -16, -48, -40, 54, -7, 55, -35, 27, 68, 11, -46, -9, 49, -77, 2, -44, 101, 43, 55, -33, 57, 11, 4]], [[13, 63, 67, -20, 53, 14, -6, -35, -29, -69, -5, 4, -34, 3, 20, -31, -54, 94, -54, 22, -36, -70, -14, 38, -43, -9, -44, 16, -22, -30, 1, 23], [7, 41, 99, -45, 24, 19, 47, 21, 12, -82, -13, 21, 12, 23, 6, 28, 6, 81, -36, -4, -14, -33, -37, 18, 17, -9, -23, 33, -51, 32, 6, -37], [-64, 31, 14, -27, -4, -15, -21, -10, -71, -42, -68, -28, 54, 16, -1, -39, 58, 23, -10, -53, -54, -20, -72, -16, -14, 56, -33, 75, -13, 48, 6, -44]], [[-48, 65, -53, -3, -8, -15, 22, -61, -21, -53, 47, 16, -7, -46, 51, 17, -33, 69, -82, -5, 4, -10, 12, 44, -55, -37, -63, -25, -44, -22, 27, 34], [9, 53, 28, -70, 7, 24, 63, -41, 22, -92, 32, 24, -9, -40, 43, 54, -57, 80, -78, -39, -37, 9, -72, 2, -12, -3, -44, 9, -11, -32, -14, -4], [-41, 57, -23, -63, 18, -25, -9, -83, -12, -54, -70, -23, -16, -5, -28, 24, -24, -1, -17, -87, -43, 1, -127, -23, -76, -3, -37, 40, 58, -20, -57, -58]]], [[[37, -78, -25, 4, 45, 39, 0, 65, 27, -25, 22, -20, -26, 13, -9, -31, -54, 25, -21, 31, -52, 78, 48, 24, 44, -29, -11, -43, -16, 29, -23, 22], [24, 23, -7, 17, -13, -18, 48, 42, 0, -25, 19, 14, -37, -45, -17, 16, -72, 49, -63, -19, -17, 97, 36, 42, 51, -12, 32, -6, -55, 5, -34, 18], [18, 54, -12, 37, -9, -32, 50, 18, -67, -87, 37, -25, -53, 21, -26, 13, -71, 16, -32, -34, 19, 49, -8, 94, 2, -23, 61, 13, -50, -13, -69, 3]], [[21, -57, -66, 29, -17, -7, 11, 32, 14, -22, 75, 17, -82, -51, -80, -44, -8, 76, -8, -16, -85, 21, 32, -6, 48, 22, 16, -6, -33, 8, 3, 28], [31, -29, -27, -27, -13, -24, 33, -14, 45, -31, 28, 3, -81, -48, -39, 58, -4, 52, -40, -21, -66, 94, 47, 50, 102, 34, 31, 2, -37, 0, -31, 16], [12, 18, -63, 26, -4, -10, -43, 21, -27, -15, -30, -46, -53, 19, -18, 60, -35, 19, -40, -47, -8, 80, -14, 51, 58, -38, 23, 22, -56, -11, -84, -23]], [[-1, -47, -58, 22, -7, 3, -17, 0, 58, 2, 38, -20, -36, -49, -75, -127, 37, 60, -41, -6, -53, -59, 14, -23, 18, 17, 30, 20, 18, -27, 56, 54], [15, -18, -55, -25, -12, 49, 15, -52, 14, -73, -7, -20, -50, -58, 5, -41, 19, -8, -84, 14, -83, 28, 19, -19, -4, 89, -1, 18, 12, -71, 30, 54], [-13, 54, -26, 8, 16, 28, -19, 1, -37, -28, -51, -36, -5, -33, -4, 19, -25, -8, -37, -3, -58, 93, -2, -14, 54, 14, 9, -16, 27, -26, -43, -17]]], [[[-65, -46, 39, 26, -22, 5, -36, -94, 29, 47, 6, -2, 40, 10, 2, -3, 17, -13, -19, -10, -30, -13, -36, -65, -57, -92, 28, 38, 47, -4, 18, 1], [-59, -55, 70, 34, -41, -60, -76, -66, -24, -1, -47, -53, 34, -43, -9, 4, -2, 0, -65, 36, -18, -5, -86, -37, 30, -46, 33, 15, 43, -3, -27, -42], [1, -9, 71, 38, -36, -31, -38, 18, -56, 6, -62, -57, 0, -63, 1, -10, -34, -18, -59, 44, 38, 41, -46, -19, 67, -78, 29, -28, -10, 5, -16, -5]], [[-28, -6, -13, -7, 0, -15, -6, -89, -9, 13, 12, 15, 33, 6, 4, 21, -8, -22, -16, -5, -27, -5, -37, -31, -41, -44, 13, 16, 52, 44, -15, -22], [-29, -34, -19, -10, -7, -35, -17, -25, -23, -11, -25, -39, 15, -25, 25, 62, -15, -39, -57, 3, -12, 9, -36, -25, 73, -2, 9, 9, 10, 67, -89, -48], [0, -43, -30, -28, -25, -51, -18, 15, -73, 1, -26, -69, -12, -17, 35, 45, -29, -25, -91, -11, 37, 13, -11, 2, 95, -39, 0, -21, -15, 61, -97, -38]], [[40, 27, -3, -55, 10, -24, 27, -36, -5, -4, 21, 47, 28, -15, 22, -45, -29, 14, 40, -1, -17, 22, -11, -5, 0, 12, -6, -4, 45, 35, -5, -6], [27, 16, -33, -42, -15, -22, 29, 35, 2, 19, 21, 13, 14, 2, 65, -2, 24, 14, 4, -9, -9, 15, 22, 47, 71, -4, -11, -3, -15, 73, -127, -47], [50, 9, -38, -52, -27, -55, 1, 26, 10, 11, 27, -5, 30, 19, 58, 20, 46, -2, -7, -7, 4, 37, 34, 60, 51, 12, 0, -2, -21, 66, -120, -4]]], [[[-8, 26, 73, 16, 107, -45, -7, 23, -1, 92, -39, 96, -9, -27, 57, 10, -39, 4, 36, -29, 46, 66, 13, 9, -63, -14, -5, -24, -125, 2, -16, 120], [-7, -33, 29, 31, 102, -40, 12, 9, 25, 107, -65, 36, 15, 14, 80, 70, -60, -11, -25, -23, 55, 67, 49, 29, 1, -27, 57, -75, -87, -36, 26, 66], [6, -22, 14, -26, 88, -61, 24, -52, -37, 60, -13, 15, -51, 63, 24, 33, 8, -50, 4, 19, 24, 69, 54, 13, 10, -47, 71, -97, -85, -50, 34, 31]], [[9, 8, 52, -17, 77, -5, 44, 16, -49, 62, -67, 110, -52, -24, 6, 15, -95, -61, 19, -67, 51, 18, 1, -27, -58, -13, -23, 35, -24, -43, 5, 71], [18, -24, 12, -28, 48, 27, 59, -30, 14, 51, -113, 111, -68, -30, -9, 52, -18, -55, -87, -52, 78, -8, 8, -51, -55, 3, 27, -13, -14, -36, 22, 58], [-19, 9, -66, -58, 31, 9, 12, -36, -29, 20, -57, 69, -26, 66, 27, 15, 64, -38, -43, -51, 52, -18, -1, -41, -46, 36, 44, -32, -48, -51, 2, 58]], [[29, -14, 67, -30, -19, 26, 79, 17, 20, 1, -7, 67, -43, -68, 29, -15, -24, -20, 17, -22, 11, -26, 34, 18, -51, 29, -58, -12, 93, 18, 23, -18], [-16, 55, 76, -29, -46, 33, 58, -43, 52, -15, -70, 57, -63, -75, -63, -27, 48, 39, -32, -94, 61, -9, 75, -23, -97, -36, -35, -5, 27, 1, 30, 9], [-76, 79, 24, -59, 0, -20, -16, 0, 81, -4, -58, 32, 7, 21, -11, -87, 127, 72, 31, -11, 21, 11, -32, -46, -47, 42, -19, 7, 22, -14, 8, 24]]], [[[14, 7, -46, -35, -36, -10, 9, -3, 22, -40, 2, -22, -1, -3, 1, 13, -13, -32, -16, 10, 37, 3, 11, -20, 12, -28, 63, 32, 12, -13, -5, 5], [-34, -2, 26, -54, 17, 28, -4, 6, 4, -37, 44, 0, 15, 17, 21, 19, 15, -54, -15, 13, 39, 16, 1, -21, 16, -18, 112, 44, -10, -4, -36, 7], [-56, 0, 60, -17, 15, 11, -2, -31, -12, -27, 26, -8, 16, 19, 23, -7, 2, -21, -31, 29, 10, 9, 8, -20, 5, -11, 61, 16, 21, 9, -22, -14]], [[5, -1, -17, -56, 10, 13, -35, -7, 19, 21, 17, 4, 11, -2, -8, -21, 30, 14, -36, 9, 31, 55, -3, -21, 31, -24, 77, 17, -25, -21, -10, 26], [25, -24, 22, -60, 54, 38, -22, -12, 1, 16, 55, 21, 32, 1, -4, -21, 37, 8, -10, 12, 17, 62, -8, 8, 14, -7, 127, 10, -34, 0, 4, 49], [7, -11, 29, -24, 33, 11, -12, -46, 8, -5, 44, -1, 5, 16, -16, -24, -4, 17, 16, 3, -6, 26, -7, 11, -13, -1, 84, -13, -14, 8, 13, 18]], [[29, -26, 4, 3, 19, 3, -25, -13, -11, 21, 30, -3, 29, -4, -26, -8, 23, 45, 0, 2, 15, 42, -28, 0, 19, 20, 62, -17, -2, 13, 15, 26], [41, -44, -8, -21, 16, 2, -11, -12, -12, 70, 66, 21, 18, 6, -15, -19, 37, 32, 17, 7, 30, 80, -52, -2, 5, 2, 67, -18, -13, 2, 26, 47], [33, -20, -33, -3, 11, 12, 6, -23, -7, 40, 62, 14, 20, 30, -24, -32, -5, 2, 36, 14, 9, 20, -28, 3, -37, 0, 5, -8, -4, 14, 45, 26]]], [[[-44, -5, 45, -53, -27, 14, 45, -32, -35, 27, -9, -28, -66, -18, -13, 18, 4, -9, -43, -34, 14, -1, 6, 16, -18, -59, -19, -32, 31, -22, 58, 8], [-10, -15, -12, -61, -9, 16, 25, -34, -22, 38, -29, -41, -55, -19, -43, 10, 36, -7, -37, -35, 17, -38, 14, 51, 4, -20, -42, -26, 39, -20, 26, 19], [34, -32, -24, -61, 50, -10, 18, -15, -9, 29, -29, -13, -14, -4, -48, 0, 72, 10, -56, -20, -17, -20, 16, 45, 19, -40, -40, -19, 25, -33, 42, 2]], [[9, -5, 18, -9, -15, 15, 10, -8, -8, -10, -26, -41, -127, -35, 1, -23, -34, -42, -21, -60, 64, -4, -3, 47, 7, -20, -2, -16, -14, -28, 23, 40], [4, -29, 2, -67, -7, 16, -5, 23, 11, -8, -26, -33, -117, -43, -8, -31, 5, -11, -36, -57, 67, -33, 5, 66, 10, 28, -30, -18, 14, -33, -14, 27], [12, -22, 12, -71, 24, 18, 10, 6, 36, 9, -36, -10, -42, -38, -12, -29, 5, 24, -12, -18, 29, -31, 17, 30, 37, -18, -28, -26, 12, -26, -25, -9]], [[-3, 32, -56, 18, -19, -8, 11, -7, 57, -22, -5, -26, 1, -10, -16, -61, -70, -41, -24, -14, 83, 31, -34, 5, 1, -43, 2, 5, -49, 24, -11, 55], [28, -4, -27, -56, -32, 1, 13, -18, 26, -27, -25, -3, 9, -29, -21, -51, -30, -7, -14, -27, 105, -9, 38, 13, -33, 5, -8, -6, -8, -20, -47, 60], [8, -31, 2, -43, -18, 22, 0, -37, 14, -17, -12, 21, 2, -47, -4, -82, -11, 9, 4, -14, 70, -9, 59, -10, -14, -25, 1, 0, 15, -25, -51, 18]]], [[[9, 4, 47, -11, -3, 60, -15, -29, -5, -81, 28, -31, 16, 13, -20, 22, -91, 23, 15, -38, -15, 12, -56, 11, 20, 38, 44, -23, -15, 5, -21, 13], [-34, -16, 52, -46, -21, 9, -2, -31, 0, -127, 48, -6, 3, 12, 8, 12, -93, -12, -43, 14, -8, 24, -93, 23, -16, 30, -2, -16, -28, 10, -19, -7], [5, -30, 25, -32, -19, -30, -39, -28, -6, -81, 54, 12, -1, -76, 15, -13, 19, -11, 9, 63, -14, -6, -47, 29, -70, 19, -46, -18, 4, 36, -18, 31]], [[-2, -35, 16, -17, -48, 75, 29, -17, -4, -76, 61, -13, -38, -17, -5, 13, -27, -31, 27, -48, 17, 30, -32, -8, 22, -8, 74, -53, 14, 1, -1, 16], [1, -8, -18, -52, -45, 56, 30, -65, -1, -106, 68, -18, -57, -9, 18, 38, -97, -55, -40, -20, 25, 54, -80, 22, -23, -2, 34, -21, -13, -25, 1, -16], [21, 6, 6, -10, -57, 32, -7, -60, 11, -87, 36, 8, -54, -41, 35, 41, -51, -48, -33, 17, 14, 27, -52, 46, -70, 14, -71, -4, 2, 33, -6, 14]], [[23, 9, -35, 0, -28, 48, 79, -26, -49, -46, 37, 8, -34, -9, 31, -35, 54, -34, 0, -55, 13, 56, 47, 0, 54, 3, 47, -45, -21, 16, 19, 43], [-5, 52, -78, -39, -8, 85, 62, -65, -15, -61, 73, -20, -60, -26, 6, -20, 18, -29, -18, -14, 26, 104, 21, 31, 23, -35, 34, -13, -19, -1, 45, -19], [-16, 38, -43, -32, -36, 37, -19, -42, 4, 3, 0, -23, -46, -29, 8, -28, -4, -26, -19, 46, 37, 59, 7, 42, 19, -35, -46, 23, 9, 6, 23, -19]]], [[[-12, 1, 32, 8, -28, -55, -23, 29, 7, -34, 0, 40, 6, -15, -10, 5, 23, -31, 7, 63, 27, -3, -3, -35, 40, 42, 16, 25, 38, 1, -11, -9], [-5, 14, 20, -15, -35, -41, -15, 0, -1, -79, 9, 26, 9, -47, -66, -11, 21, 2, -18, 72, 59, -10, 40, -45, 16, 45, 0, 43, 9, -8, -36, 7], [-6, -13, 8, -11, -27, -6, -4, -22, -26, -75, 8, 21, 23, -21, -24, -15, 16, 30, -6, 68, 40, 12, 25, -53, 15, -13, -29, 36, 0, -16, -40, 13]], [[-17, -17, 5, -12, -55, -50, 10, -14, -9, -10, 1, 12, -43, -4, -39, 23, -3, -9, -21, 23, 73, 22, 67, -29, 26, 37, 6, -1, 38, -16, -4, -60], [-46, -2, 46, -25, -91, -21, -16, -15, -37, -40, -6, 11, -50, -11, -95, -2, 2, -41, -38, 62, 91, 21, 65, -28, 34, 4, 4, 7, 35, -24, -17, -7], [-25, 10, 1, -20, -59, 5, 23, -16, -22, -42, 9, 45, -32, 6, -51, 2, 43, -25, -39, 30, 49, 12, 25, 2, 7, -1, 0, -10, 61, -32, -19, 36]], [[-8, -2, -34, -9, -29, 32, 2, -24, -4, 12, -1, 4, -18, -25, 10, -6, -28, 15, -71, -8, 37, 34, 5, 4, -7, 1, 2, -5, -23, -17, 1, 9], [-34, 17, 17, -9, -64, 31, -3, -25, -65, -3, 8, 9, 17, -7, -27, -59, -57, -40, -127, 20, 19, 39, 13, -33, -12, -9, -2, -19, 0, -29, 21, 40], [6, 8, -27, 9, -35, 26, 5, -34, -53, 22, 13, 53, 13, -16, -18, -39, -37, -22, -115, 0, 39, 27, -10, 6, 3, 8, 2, -32, 2, -13, -7, 57]]], [[[21, 2, -111, -54, 18, -92, -2, 7, -17, 37, 20, 32, -21, -88, 18, 21, 75, 70, -76, 43, 22, 59, 9, 22, 0, -43, -37, -21, -23, -8, -7, -28], [-18, -20, -106, -23, 7, -88, -45, -33, 5, -9, 5, 64, -68, -86, -47, -35, 105, 52, 4, -29, 24, 24, 41, -29, -48, -32, -37, 7, -11, -22, -17, -31], [5, 7, -4, -33, 26, -44, -7, 13, 18, -76, 33, 66, -17, -33, -78, -81, 65, -26, 26, -17, 16, 25, 39, -55, -33, 108, -7, 1, 33, -9, -8, -14]], [[24, 0, -18, -93, 2, -43, -16, 21, -2, 20, -15, -12, -92, -70, -10, 51, -26, 51, -39, 1, 46, 2, 5, 34, 14, -19, -26, 1, 2, -14, -36, -9], [-7, -27, -27, -40, 34, -89, -51, 13, 17, 8, 12, 32, -127, -75, -59, -38, 18, 49, 8, -63, 58, -23, 27, 13, -15, -55, -41, 31, 13, 0, 13, 3], [36, 1, -42, -10, 24, -67, -39, 8, 11, -9, 44, 69, -118, -42, -64, -99, 21, 27, 38, -57, 41, -43, 4, -30, -30, 6, 10, 53, 37, 32, 35, 28]], [[23, 17, 65, -62, 2, -25, 0, 32, 21, -23, -42, 16, -33, -42, 6, -42, -58, 3, -38, 5, 38, 12, -26, 8, 51, -17, -25, -15, 17, -22, -32, 34], [-29, 8, 49, 20, 7, -70, -40, 49, 19, 34, -3, 13, -64, -65, -2, -46, -45, 42, 33, -31, 37, 4, 5, 3, -16, -76, -51, 38, 2, -10, 17, 16], [10, 6, 6, 58, -2, -26, -27, 2, 48, 43, 21, 8, -96, -42, -13, -67, -7, 76, 52, -34, 11, -62, 17, 22, -29, -52, -1, 18, 14, 29, 8, 28]]], [[[-61, -22, 94, 37, -38, 35, -26, 7, 50, 37, -38, -100, 109, -51, 21, -110, -31, 52, -9, -83, 49, -3, -42, 20, -17, 104, 4, 41, 61, 50, 39, 14], [-50, -8, -97, -30, -38, -1, -60, 27, 67, 77, -3, -119, 112, -34, -4, -47, -109, 25, -13, -82, 34, -3, 68, 6, -83, 99, 5, 24, 92, 25, 2, 16], [1, 39, -63, -45, -7, -55, -10, 29, 14, 79, -12, -34, 50, 7, 31, 44, -40, 20, -23, -82, 0, 2, 62, -16, -38, 8, 19, 42, -13, 17, 77, 67]], [[-49, 49, 76, -58, -64, -43, 17, -9, 53, 21, 53, -11, 102, -12, -46, -76, -48, -23, -27, -44, -18, 52, -7, 17, 2, 58, 9, 0, 3, 49, -23, 6], [-66, 88, -63, -80, -85, -34, -17, 34, 127, 42, -7, -17, 86, -6, -17, -24, -16, -17, -60, -77, -39, 18, 38, 21, -39, 34, 29, 21, 65, 64, -46, 13], [-9, 32, -97, -37, -56, -44, 18, 36, 63, 31, -7, 58, 33, -40, -62, 20, 65, -11, -28, -53, -3, 16, 58, 29, -26, -17, -1, 8, 50, 51, 58, 0]], [[-19, 4, 4, -37, -34, 42, -26, -3, 50, -19, 15, 22, 69, 42, -39, 18, -11, -9, 19, -19, -39, 28, 12, -22, -57, 114, 29, -33, -48, 54, -43, -19], [-17, -1, -14, -19, -48, 4, -79, 65, 70, -38, -26, 39, -5, 21, -5, -7, -33, -17, -53, -43, -49, 49, 36, -24, -65, 38, 24, 15, 14, 98, 0, -37], [23, -25, 14, -30, -127, -8, 2, -38, 49, -20, -13, 65, -7, -45, -34, 38, -14, 26, -61, -72, -24, 24, 32, -2, -47, 43, -27, -28, 14, 43, 34, -70]]], [[[47, -46, -17, 58, 30, -71, 2, -26, -76, -33, 92, -64, -9, 37, -29, -24, 60, -6, 20, 29, 18, 47, 42, -71, -17, 14, -16, 7, -39, 40, -84, 40], [33, 2, 56, 76, 48, -64, -20, -65, -114, -82, 65, -69, 7, 3, -31, -41, -12, 6, 74, 48, -28, 45, 34, -49, -10, 57, 42, 19, -43, 4, -64, 67], [-3, 42, 61, 73, 26, -36, -7, -6, -78, -54, 58, -27, -17, -30, 9, -49, -83, 28, 22, 47, -14, 59, 25, -6, -4, -4, 51, 2, -21, 11, -36, 47]], [[42, -37, -43, 56, 40, -51, 42, -21, -47, 54, 127, -42, 23, 77, -55, 63, 100, 18, -2, 63, -10, -4, -12, -64, -32, -19, -64, 32, -65, -49, -37, 39], [47, -35, 40, 51, 66, -18, 39, -31, -72, 75, 87, -17, 21, 17, -44, 35, 24, 12, 36, 41, -15, -12, -2, -82, -41, 49, -19, 19, -29, -43, -10, 82], [31, -24, 28, 54, 52, -31, 66, -5, -56, 66, 43, 4, -35, 9, -16, 53, -52, 45, -18, 44, -7, 9, -20, -48, -65, 2, 33, 3, 18, -42, -1, 31]], [[-44, 7, 36, 23, -20, -28, 56, -13, -10, 60, 25, 24, -38, 68, -43, -18, 55, 46, -52, 52, -42, -9, -46, -31, -30, -9, 22, 23, -45, -34, 24, 40], [5, -37, 60, 8, 44, -36, 22, -37, -41, 111, 32, 40, -35, 40, -50, 1, 75, -32, -42, 65, -51, -21, -11, -63, 3, 8, -8, -2, -15, -74, 3, 37], [52, -78, 21, -26, 47, -8, -8, -39, -32, 92, 1, 36, -79, 0, -13, 15, 23, -15, -95, 84, -5, 23, 2, -25, -18, -63, 28, 12, 13, -53, 31, 29]]], [[[72, 112, 55, -15, 16, 50, 29, 8, 83, -43, -19, -31, 55, -15, 16, 35, -48, -69, -6, 60, -13, -7, 2, -55, -51, 22, -17, 11, 38, -36, -66, -78], [39, 96, -24, 7, 22, 33, 22, -24, 86, -45, 24, 1, 32, -56, 79, -2, -18, -22, 38, 30, 14, 0, -36, -65, 30, -5, -6, 33, 47, -48, -65, -7], [12, -12, 22, 16, 22, 19, 39, -58, 71, -40, -5, -5, -69, -13, 37, -30, -43, 25, 3, -18, 42, -23, -12, -36, 70, -17, 7, -16, 20, -21, -36, -4]], [[16, 127, 17, -25, -12, 38, -9, -17, 52, -49, 17, 8, 63, -21, -6, 25, -19, -71, 20, 62, -15, -3, 7, -23, -3, 30, -14, 37, -4, -41, -8, -42], [36, 92, -37, -42, -37, 25, -12, -38, 19, -58, 26, -9, 40, -41, 54, -32, 26, -39, 24, 12, 26, -17, -11, -37, -34, -52, -45, 51, 25, -36, -34, -10], [13, -39, 16, -24, -29, -7, -44, -60, 19, -20, -18, 3, -39, -36, 49, -41, 46, -16, 42, -38, 50, 21, -31, -24, -7, 7, -35, 20, 56, 5, -19, 3]], [[-17, 46, 42, -7, -17, 56, -50, -7, 6, -28, 28, -25, 44, -33, -25, -13, -53, -67, 62, 28, 10, -63, -47, -4, -9, 3, -32, 42, 24, 15, 50, -44], [-16, 38, -2, -62, -40, 34, -37, 7, 10, -23, 0, -48, 87, -8, 31, -77, 23, -23, 55, -2, 31, -91, -25, -36, -38, -39, -42, 64, 53, 8, 56, -38], [-7, -44, -42, -27, -41, 8, -30, -18, 5, -48, -24, -53, -5, 1, 18, -21, 59, -20, 51, -64, 27, -40, -10, -61, -63, -52, -43, 38, 58, -9, -5, -2]]], [[[39, -1, -12, -21, 17, 44, 49, 26, 68, 9, -89, 28, -68, 14, -23, 91, -35, 34, -17, 51, -6, -25, -26, -49, 5, -28, -10, 5, 66, 38, 9, 32], [60, 27, -27, -6, -12, 27, 37, 45, 72, -31, -59, -15, -36, 74, 15, 121, 25, 64, -51, 35, 5, -32, 64, -26, 59, 5, 12, -29, 22, 25, -10, 26], [47, 40, 0, 5, -1, 10, -60, 50, 22, -26, -5, 3, -3, 115, -15, 48, 20, 53, -65, -7, -14, -1, 47, 1, 70, -10, -11, -16, -38, 25, 15, -11]], [[59, 1, 20, -21, -12, 10, 26, -13, 74, 58, -26, -13, 28, 92, -4, 71, 65, 45, -62, 20, -21, 39, 23, -14, -22, -44, 30, -44, 46, 48, 43, 64], [64, 6, 16, -9, -24, 0, 0, -23, 14, 56, -13, -34, 29, 105, 19, 111, 90, 35, -32, -11, -7, 88, 66, 30, -10, -14, 26, -81, -9, 2, 30, 46], [46, 24, -6, 7, 1, -35, -11, -14, -25, 15, 13, -18, 27, 106, -18, 68, -24, -9, 4, -29, 4, 68, 48, 44, -19, -30, 16, -48, -21, -11, 24, 1]], [[-20, 13, 20, -7, 17, -14, -13, -36, -58, -40, 7, -11, 8, 57, 64, 67, 75, -35, -73, 0, 6, -4, 41, -9, 6, -21, 16, -27, -51, 19, 11, 18], [25, 37, 16, 36, 33, -40, -25, -66, -114, -29, 0, -28, 4, 43, 51, 25, 30, -32, -49, 10, 43, 10, 61, 4, 17, 19, 20, -58, -77, -12, 75, 1], [-10, 36, -13, 70, 22, -56, 13, -87, -95, 22, 27, 4, -11, 8, -13, -13, -127, -7, 9, 1, 51, 18, -5, 20, 25, -12, 32, -22, -56, -19, 39, 12]]], [[[-79, 20, 99, 6, -14, 5, -11, 3, -3, -2, 24, 9, -3, 17, -7, 12, 33, 37, 34, 27, 3, 26, -52, -22, -19, -26, -23, -10, -8, 24, 65, -18], [-51, -2, 124, 8, -25, -9, -48, 28, -8, 49, 16, -13, 7, -6, -14, -16, 71, -11, 100, -5, -25, 34, -14, -59, -4, -22, -58, 17, 23, 9, 60, -49], [-4, -9, 34, -29, 0, 11, 17, 3, 5, 55, 4, 24, -1, -13, -23, 20, 98, -22, 42, 0, -4, 44, -12, -6, -14, 4, -23, -17, 4, -8, 64, 34]], [[-47, 27, 58, 4, 35, -32, 39, 8, -58, -56, -9, -27, 1, 43, -5, 61, 83, -4, 14, 20, -27, -17, -76, -28, -16, -11, -41, 53, 10, -6, 55, -3], [-20, 13, 127, -15, 38, -50, -37, 26, -90, 18, -25, -24, -14, 23, 9, 53, 101, -60, 39, 23, -31, 3, 31, -65, -11, -13, -56, 41, 38, -16, 62, -14], [1, -25, 28, -60, 23, -26, -17, 19, -49, 48, -19, 22, 12, -8, 16, 50, 79, -40, 4, 11, -17, 12, 39, -39, 5, -20, -8, 2, 9, 2, 73, 38]], [[-47, -3, 32, -5, 53, -24, 2, 46, -35, -52, 3, 10, 18, 41, 22, 1, 107, 3, -34, 11, -8, 6, -47, -20, -26, -27, -40, 28, 5, 24, 14, -10], [-27, 12, 80, -10, 54, -64, -27, 18, -43, 13, -18, 2, -33, 22, 22, 22, 43, -4, -21, -11, -8, 35, 6, -14, -32, -30, -36, -4, 0, -15, 56, -3], [-4, -17, 49, -59, 13, -30, -19, 26, -8, 59, -36, 15, 17, 10, -3, 25, -39, -24, -28, 8, -20, 59, 27, 2, -51, -87, -8, -19, -4, -7, 55, 24]]], [[[-3, 5, 48, 30, 15, 42, -47, 2, 41, -5, 62, -23, 26, 19, -15, -81, -112, 15, -47, 62, -21, -11, 21, 13, -10, 60, 53, 0, -17, 3, 60, -32], [-41, 16, 5, -18, 37, 14, 41, 55, 20, -21, 78, -47, 125, 27, 19, -68, 12, -39, -43, 47, -54, 17, 34, 32, -35, 34, 40, 0, -44, -19, 29, -116], [-38, -36, -80, -20, -1, -36, 7, 19, 52, -41, -2, 19, 27, 4, 13, -68, 127, -36, -53, 29, -48, 19, 32, -33, 5, -3, 47, 25, -52, -8, 51, -78]], [[-34, -26, 19, 85, 25, -15, 61, -30, 15, -24, 75, 29, 30, 82, 23, -7, -46, -6, -123, 60, -36, -43, -36, -20, 48, -39, -1, -38, -7, -44, 60, -38], [-30, -45, 62, -14, 31, -44, 110, -2, -25, -11, 56, 65, 103, 28, 13, -4, 50, -31, -54, 89, -32, -46, 12, -54, 72, -60, 19, -30, -48, -68, 38, -76], [10, -56, -38, -53, -30, -8, 125, -51, -17, -22, 19, 80, 1, -21, 22, -70, 41, -41, -69, 1, -39, -95, 20, -56, 81, -38, 32, -16, -18, -17, 44, -44]], [[60, 11, -53, 63, 6, -13, 42, 21, 14, -29, 20, 38, 16, 85, -2, 11, -2, -21, -112, 75, 9, 16, -73, 20, 97, -83, -39, -52, -12, -8, 11, 10], [40, -26, 45, -18, 42, -63, 120, 13, -23, 63, 29, 46, 47, 21, 8, 17, 58, -21, -53, 60, -22, -37, 47, -36, 55, -78, -24, -35, -70, 5, 41, 12], [-29, -35, 11, -64, -5, -42, 85, -46, -28, 34, 40, 57, 20, -43, 51, -40, -18, 44, -58, 22, -11, -10, 15, -69, -12, -52, -7, -25, -62, 25, 10, 30]]], [[[43, -51, -68, -26, 38, -39, -62, 19, 38, -44, 16, 24, -47, 5, -14, -96, 118, -121, -10, 65, -55, 81, -17, -108, 49, 32, 14, -20, 36, 37, -41, 19], [13, -94, -21, -72, 51, 62, -1, -26, 57, -32, -71, -2, -34, 20, -12, -28, 24, -38, -31, -36, -65, 101, 2, -43, -16, 16, -10, -36, -25, 29, -30, 48], [3, -39, -93, -61, 14, 70, -17, 22, 75, -5, -45, -84, -4, 45, 10, 61, 102, 27, 22, -85, -121, 42, 59, 26, 41, -19, -1, -37, -59, -20, -24, 24]], [[8, 38, -120, 10, -25, -28, -41, -49, 8, -17, -84, 50, -71, -65, 8, -64, -12, -35, -85, 32, -19, 65, 16, -107, -14, 92, -12, -61, -15, 78, -2, 3], [-34, 15, -3, -23, 49, -9, -14, -27, 1, -8, -127, 4, -23, -45, -13, -43, -2, -19, -5, -47, -41, 106, 27, -80, -71, 1, -12, -50, -62, 8, -8, 23], [-22, 14, -50, -66, 34, 15, -69, -4, 60, 11, -49, -32, -30, 70, 21, -17, 82, -9, 36, -99, -69, 59, 25, 27, -48, -27, 15, -25, -111, -19, -35, 16]], [[27, 89, -51, 73, -25, -24, -14, -34, -6, 34, -56, 57, -70, -91, -18, -17, -116, -20, -70, 20, 15, 47, -38, -82, 3, 123, -31, -39, -26, 64, -19, -24], [-28, 82, 116, 39, 24, -38, 2, 54, 22, -2, -73, 46, -38, -81, 2, -41, -119, -22, 1, 3, 22, 100, 6, -90, -54, 9, 9, -24, -59, -8, 21, 7], [-36, 83, 58, -19, 90, -37, 2, 31, 65, -13, 11, -6, -12, 35, -24, -90, -34, -44, 4, 5, 3, 28, 2, -11, 3, 3, 81, 20, -62, 16, -8, 10]]], [[[-18, -19, 67, -114, 9, -21, -82, 15, -24, -44, 22, 35, -18, 33, 14, -89, 4, -15, 25, 38, 0, 22, -53, 64, 33, 47, 45, -32, 6, 31, 8, -3], [60, -65, 57, -32, 21, 9, 25, 61, -15, -18, 27, -31, -16, -37, 64, 2, -76, 1, 39, 7, 27, 21, -42, 54, 19, 51, 21, -12, -49, -7, -1, 6], [66, -99, -6, 22, 14, 74, 72, -22, 22, 17, -25, -44, 3, -24, 60, 114, -48, -14, 12, -37, 32, 6, -5, 0, 73, 5, -10, -12, -64, -22, 38, 18]], [[71, 32, 14, -70, 15, -23, -1, -9, 36, -54, 40, -61, 34, 37, 64, -100, -15, -50, 36, 115, -38, 31, -62, 77, -18, 45, 52, 42, 91, 94, 63, 11], [56, 13, 35, -44, 6, -12, 55, 29, 7, -39, 26, -36, 29, -4, 57, -1, -69, -11, 48, 112, 15, -2, -107, 92, 4, -6, 16, -40, 12, 10, 23, 11], [73, 21, 18, -19, 22, 23, 118, -15, -8, 24, 0, -53, -33, -33, 40, 31, 1, 43, -25, -45, 58, 12, -71, 74, 25, -72, -4, -108, 23, -22, -8, 39]], [[25, -69, -12, -72, 11, -26, -68, -18, 93, -112, -17, -59, 45, 25, 15, -27, 11, -14, 14, 69, 7, -5, -27, 60, -84, 57, 98, 48, 69, 51, 28, -49], [-17, -35, 5, -33, 2, -33, -1, -38, 18, -14, 25, -37, 42, -15, 41, 32, -48, -38, 8, 127, 3, -20, -38, 66, -38, 32, 16, -44, 31, 12, 26, -47], [55, -28, -10, -25, 3, 44, 86, -56, -2, 61, 31, -10, -28, -41, 23, -42, -75, 23, -43, 44, 65, 19, -18, 72, 65, -44, 19, -93, 27, -2, -7, 17]]], [[[-21, 6, -69, 36, 21, 24, -1, -16, -41, -57, -14, -62, 20, 23, 18, -64, 13, 31, -29, 9, -11, 21, -17, -33, 35, -36, -9, -18, -12, -18, 0, 10], [-15, 17, -18, 36, 25, -5, 16, -32, -24, -60, -33, -61, 14, -13, -8, -51, -31, 13, -19, -23, 8, 43, 27, -78, -15, 7, -23, -27, -32, -52, -21, -20], [-9, 1, 29, 30, 5, -21, 17, -30, -19, -17, -19, -28, 10, -10, -4, -37, -66, -20, 15, -16, 23, 48, 46, -34, 18, 1, -10, -12, -15, -44, -9, 10]], [[4, -7, -73, 52, 13, 26, -5, -25, -33, -36, -8, -48, 27, 13, -20, -73, 77, -7, 15, 20, -21, 17, -12, -27, 25, -33, -3, -8, 4, -30, 14, -36], [-2, -18, -28, 45, -9, 11, -2, -48, -36, -17, -20, -30, 11, -6, -49, -63, -23, -21, 6, -47, 6, 60, 10, -68, -17, -15, -42, -41, 0, -78, 11, -50], [4, -13, 48, 44, -28, -40, -8, -15, -18, 3, -20, -22, -8, -29, -5, -57, -88, -39, 22, -46, 25, 60, 8, -41, -41, -26, -47, -24, -5, -75, 13, -21]], [[23, 22, -16, 8, -4, 9, -1, -19, -32, 26, 23, -31, 14, -17, -24, -13, 127, -30, 6, 29, -30, 12, -19, 16, -19, -22, -3, -36, 24, -16, 38, -24], [-22, 3, 8, 19, -48, 24, 5, -26, -12, 41, 32, -13, 11, -19, -26, -34, 40, -51, 23, -15, 9, 40, -29, -3, -23, -18, -13, -34, 7, -46, 31, -33], [5, -19, 68, 17, -27, 5, -2, -2, 7, 28, 17, -7, 0, -24, 19, -34, -38, -45, 6, -18, 27, 60, -5, -14, -48, -58, -13, -21, 32, -38, 1, -27]]], [[[25, 4, -21, -18, 2, 15, 65, -75, 6, 86, 9, 39, 6, -12, 49, 62, 80, 59, 1, -27, -30, -14, 4, -3, -69, 45, -30, 56, -17, -11, -42, 30], [11, 15, -47, 0, -9, 27, 59, -79, -41, 56, 19, 63, 8, 12, 90, 12, 9, 58, -38, -22, 1, 2, 11, -27, -34, 29, 45, 72, -54, 6, -2, 54], [-6, 52, 7, -4, 59, 36, 51, -36, 19, 8, -5, -18, 17, 11, 69, -3, -38, 33, -12, -5, -17, 29, 4, -30, -67, 24, 56, 9, -66, -10, 34, 24]], [[35, 12, 89, -2, 58, 10, -44, -10, 17, 56, 63, 41, -33, 36, 56, 43, 28, -15, -39, -39, -26, -58, 11, -42, 26, 17, 16, 105, 13, -19, 56, -15], [38, 14, 42, -19, 47, 52, -10, -13, -24, 59, 73, 23, 2, 33, 71, 60, 29, 12, -28, -4, -29, -20, 22, -28, 42, -44, 57, 127, -13, -4, 44, -12], [-1, 28, 73, -43, 70, 62, -35, -9, -16, 13, 20, 6, 13, 53, 44, 31, 17, -16, 12, -2, -53, -2, 33, -13, 42, 8, 46, 68, -4, -2, 38, -19]], [[6, 54, 71, -6, 56, 49, -48, -25, 58, -17, 34, -10, -1, 22, 26, -58, -89, -19, -11, -30, -22, -75, 19, -22, 28, -60, 3, 44, 93, -17, 52, 19], [-6, 75, -11, -28, 42, 72, 7, -10, -12, -9, 64, 3, -37, 8, 32, -12, 19, 22, -24, -20, 9, -45, 11, -30, 37, -42, 9, 69, -13, -27, 32, 1], [-24, 65, 32, -31, 53, 46, -35, 6, -15, -34, 22, -36, -39, 52, -5, -86, 61, -3, -11, 1, -18, -34, 67, -7, 21, -32, 10, 16, -22, -3, 23, -4]]], [[[42, -31, -36, -63, 37, -57, 10, -37, 9, 47, 11, -53, 15, 25, 5, -6, -32, 39, 49, 12, -18, 5, 6, -55, -38, 38, 28, 28, -57, -10, 6, 44], [21, -20, 2, -79, 34, -21, -25, -7, 55, 17, -49, -88, 38, 44, -41, -24, -30, 85, 17, 26, 10, 68, -39, -13, -32, 41, 89, 41, -77, 40, -7, 16], [2, 10, 10, -37, -12, 28, 39, -33, 16, -12, -27, -41, 25, 33, -36, -59, 14, 56, -17, 56, 40, 64, -48, 27, -64, 5, 28, 21, -11, 51, 21, -93]], [[33, -28, -4, -19, -8, -75, 12, 18, -14, 28, -1, -70, 37, -6, -37, 11, -11, 89, 93, -37, 44, 27, -4, -16, -25, -53, 85, 39, -62, -40, 26, 50], [20, -53, 26, -71, 11, -77, -45, 13, 5, 1, -43, -92, 55, 43, -14, 2, -21, 107, 59, -74, 40, 70, 18, 14, -48, -19, 127, 22, -66, -33, 3, 26], [10, -51, 9, -54, 21, -30, -5, -33, 26, 11, -50, -14, 25, 127, 13, -30, 18, 100, 12, 12, 9, 47, 34, 26, -44, -35, 58, -21, -15, 25, -11, -23]], [[20, -49, -4, -4, -42, -31, 32, -7, -11, -17, -16, -29, 23, -16, -13, 6, 86, 57, 13, -33, 14, 9, 21, 31, -86, -36, 79, 18, -20, -21, 32, 22], [17, -48, 21, -5, -48, -5, -11, -28, -13, -68, -32, -52, 5, -4, 21, -23, 8, 66, 21, -60, -7, 40, 22, 67, -97, -30, 99, 23, -35, -56, -10, 52], [7, -2, 18, -5, -18, 51, 4, -68, -3, -47, 11, 20, -13, 68, 23, -14, -34, 83, -14, 2, -25, 32, 2, 86, -76, -44, 57, -14, 9, -32, -26, 28]]], [[[-46, -43, 9, -19, -2, -26, -67, -17, 52, 31, -54, -28, -28, -65, -4, -86, 10, -11, -69, 18, 19, 16, 14, -14, -38, 46, -17, -31, -11, 33, 72, -25], [-39, -17, 1, 63, -47, -20, -51, -55, -60, 63, -20, 1, -29, -15, 66, -14, 4, -42, -88, 2, 3, 18, -66, -21, -54, -79, -47, -13, -29, 17, 42, 42], [-4, -13, -63, 34, -33, 34, -34, 18, -92, -4, -5, -19, -52, 47, 38, 14, 20, -24, -49, -23, -11, -36, -52, -7, 27, -74, -15, -79, -1, -5, 30, 77]], [[-32, -33, 73, 30, 20, -78, -20, 23, 12, -19, -34, 7, -16, -69, 52, -22, -17, -15, -21, 3, 23, -4, 12, 13, -63, 29, -54, -14, -60, 21, 2, -39], [-78, -53, 55, 90, -18, -52, -61, 24, -31, -24, -6, 17, 1, -24, 127, -33, -13, -46, -25, -40, 28, 0, -40, 16, -107, -16, -88, -2, -92, 44, 8, -21], [-50, -34, -27, 67, -10, -9, -22, 30, -6, -37, -5, -17, 3, 73, 89, 15, 21, -48, -19, -36, 8, -45, -44, 7, -12, -41, -54, -22, -71, 16, -9, 8]], [[23, -29, 61, -28, 51, -95, -22, 5, -8, -63, 47, 28, 6, -44, 4, 3, -29, -25, -1, 3, 25, -7, 20, 6, -14, 31, -28, -9, -66, -16, -40, -26], [-27, -78, 50, 5, 33, -56, -44, 39, 19, -59, 21, 23, -17, -24, 64, -22, -18, -39, 31, -41, 49, -27, -2, -38, -43, 39, -38, -16, -81, 6, -49, -43], [-43, -30, -72, -31, 20, -22, 11, 15, 36, -56, -3, 14, -13, 31, 29, -25, 37, -36, -13, -10, 37, -75, -5, -22, 10, -15, -32, -12, -63, 2, -22, -36]]], [[[-127, -42, 18, -10, 18, 7, 101, 15, 84, 9, -13, -77, 20, 11, -89, -52, -13, 70, 29, 34, -7, -25, 1, -45, -29, 62, 34, 0, -82, -76, 8, 96], [-43, -9, -52, -50, -1, -6, -23, -54, 27, -17, -17, -54, 17, 24, -116, -116, -6, 40, -7, 14, -18, 55, -82, -100, 10, 44, 81, 66, -6, -54, -35, 74], [8, -47, -93, -41, -30, -1, -17, -118, 38, 76, -61, 45, 68, 26, -106, -79, 32, -6, 18, -26, 15, 16, 7, -61, -57, 88, 69, 30, -78, -88, -21, 57]], [[-31, -71, -6, 20, -46, 15, 111, -29, 35, -23, -9, -29, 14, -14, -63, 15, -17, 73, 63, -91, -81, -80, 35, -61, -66, 54, 6, 49, -29, -93, -44, 83], [12, 8, 1, 39, -59, -17, 16, -47, 32, -60, -27, -2, 27, 40, -60, -122, -35, 42, 3, -78, -71, 10, -85, -38, -7, 23, 53, 101, 35, -98, -56, 82], [35, 13, -32, -12, -44, 6, -26, -87, -26, 3, -15, 20, 28, -28, -55, -47, 33, 29, 7, -95, 2, -20, -35, -21, -55, 66, 1, 31, -59, -108, -32, 72]], [[20, -19, -36, 50, -28, -53, 119, 6, 44, -13, 29, -34, -38, -18, 32, 60, 111, 46, 61, -51, -85, -10, 44, -21, -83, 65, -7, 55, -76, -30, -99, 38], [27, 39, 89, 93, -63, -55, 74, 35, 94, -60, -3, -17, -5, -31, 24, -116, 22, 89, 16, -12, -58, 67, -47, 13, 18, 54, 31, 55, -48, -53, -96, -15], [24, -21, 86, 35, -55, -57, -19, 14, -13, 0, 34, 35, -23, -75, 14, -26, 88, 57, 58, -45, 46, 59, -26, 6, -32, 104, -27, -3, -98, -47, -66, -34]]], [[[-91, -37, -109, -51, 7, 66, 20, -83, 11, 28, 4, -48, 25, -11, -28, -10, -8, -21, -16, -86, -55, -11, 10, -24, 4, 0, 9, -39, 38, -14, -107, 26], [-32, -26, -36, -62, 4, 1, 50, -127, 58, 54, -12, -64, 27, -40, -60, -14, -74, 6, -22, -36, -38, -8, -35, -11, 32, 3, 12, -60, 58, -47, -110, 37], [-32, -3, 1, -101, -18, -45, 73, -69, 20, 68, 14, -6, 9, -25, -21, -31, -98, -12, 2, -12, -11, -4, -90, -11, 17, -35, 37, -59, 70, -41, -58, -1]], [[-28, 10, -64, 0, -15, 4, -47, -59, -38, -48, 8, -79, -11, -23, -34, -71, 14, -24, 38, -10, -30, -53, -81, -31, 65, -16, -23, -33, -1, 1, -52, 79], [-7, -33, 8, -42, -15, -32, -7, -79, -25, -7, -23, -72, 13, -52, -52, -46, -15, -15, 42, -3, 20, -42, -88, -42, 54, -3, -6, -54, 36, -3, -66, 126], [6, -33, 34, -58, -7, -41, 37, -45, 2, -23, -13, -28, 10, -87, -1, -51, -36, 28, 45, 12, 21, 2, -57, -5, 25, -38, 10, -58, 58, -1, -4, 91]], [[17, -7, 16, 5, 41, -24, 29, 8, -23, -74, -1, -38, 30, 43, -37, -75, 23, -19, 47, 22, 28, -43, -79, -53, -8, -9, -9, -2, 23, 40, -10, 43], [-7, -28, 24, -7, 9, -42, 2, -32, -25, -44, -2, -25, 32, 15, -8, -89, 74, -25, 73, -9, 59, -57, -51, -67, -12, -30, -27, 0, 49, 57, 16, 126], [-20, -26, -21, 14, 1, -46, -33, 10, -3, -29, -21, 7, 20, -22, 36, -75, 31, 31, 46, 15, 21, -16, -25, -4, -42, -71, -7, -29, 32, 42, 61, 98]]], [[[-48, -13, 77, -23, 107, 29, 33, -20, -34, -59, 20, -3, -36, -9, 29, -17, -90, 12, -4, -15, 40, 29, -9, -22, 59, 44, 31, 5, -46, -9, -51, -16], [-78, -23, 16, -25, 123, 7, 45, -15, -44, -49, -9, -42, 3, -3, 7, -3, -18, -27, -5, -30, 64, 28, 18, -65, 11, 60, 61, 0, -26, 10, -37, -16], [-32, 13, -70, -32, 84, 14, 50, 5, 31, -34, -32, -33, -29, 3, -1, 5, 95, -46, -4, -13, 63, 3, 10, -23, -8, -24, 46, 36, 11, 10, -51, -29]], [[18, -64, 14, 14, 64, 40, 22, -10, -19, 11, 23, -37, -29, 5, 30, -22, -127, 43, -39, -82, 0, 0, -32, -52, -5, 2, 5, -21, -34, 2, -3, -2], [-27, -50, -27, -2, 46, 7, 28, -21, -23, -48, 6, -37, -43, -42, -15, -35, -46, -16, -12, -79, 17, 7, -31, -84, -33, 19, 36, -51, 17, -16, 84, 10], [-20, 4, -63, -15, 56, -28, 50, -1, 22, -53, 5, -48, -50, -40, -42, -9, 2, -29, -12, -58, 13, 24, -13, -23, -23, -31, 44, -20, 26, -12, 23, 24]], [[22, -63, -24, 16, -14, 15, -12, 31, -11, 26, -6, -42, -18, 18, 52, -31, -33, 51, -33, -7, -33, -40, -4, -21, -14, -19, -26, -7, -1, 16, 22, -14], [-2, -22, -53, -29, 10, 4, -52, 11, -4, -8, -26, -38, -61, -31, 7, -74, -37, -2, -53, -41, -35, -44, -14, -64, -34, -40, -15, -28, 21, -28, 60, 38], [27, 22, -49, -54, 18, -27, -27, 30, -10, -35, -5, -41, -31, -47, -8, 16, -66, 10, -18, -6, -24, 4, -19, -17, 4, -23, 31, -30, 19, -8, -6, 29]]], [[[32, 54, -54, -82, 38, -82, 3, -52, 5, 85, -24, 57, -3, -52, 49, 54, 91, 46, -83, -66, 7, 40, 68, -29, 23, -47, -32, -15, 20, -17, -79, -62], [16, 24, -33, 45, 22, -76, 8, -46, 38, 45, 20, 63, -4, -74, 35, -55, 6, 35, -45, -44, -6, 18, 48, -15, 42, -37, -19, -23, 55, -11, 16, 1], [-46, -7, -18, 48, -26, -15, -22, -38, 48, 47, -12, 21, 5, -85, -5, -42, -9, -1, 15, 23, 5, 46, 33, -23, 30, 27, -10, -35, 51, -6, 99, 2]], [[42, 0, 21, -127, 10, -70, 4, -27, 9, 48, -59, 25, 6, -38, 70, 12, -56, 65, -62, -43, 12, 63, 39, -26, -10, -21, 4, -81, -12, -75, -101, -19], [5, -20, 43, 21, 61, -64, 0, 11, 22, -4, -12, 48, 46, -32, 61, -60, -93, 32, -58, -18, 15, 6, 51, -56, 21, -5, 21, -46, -4, -36, 6, -2], [-30, 34, 120, 39, -9, -45, -56, 22, 55, 13, -11, 25, -3, -106, -39, -75, -63, 17, -38, 44, -17, -31, 50, -56, 37, 7, 31, -17, 22, 2, 42, 4]], [[1, -58, 119, -107, 3, -57, -10, 7, -12, 38, -57, 21, 74, 13, 55, 44, 0, -9, 18, -41, 13, 33, 46, -39, -18, -83, 1, -74, 36, -82, -12, -13], [-50, -41, 105, -59, 63, -84, 12, 75, -20, 25, -28, 14, 50, -19, 37, -28, -44, -3, -5, -24, 9, 8, 63, -48, -19, -7, 27, -39, -25, -44, -5, -89], [-73, 60, 127, -59, 2, -50, -66, 58, 12, 20, -14, 38, 9, -45, -26, -30, -54, -9, -18, 63, -33, -30, 55, -58, 18, -21, 49, -10, -15, -28, -24, -14]]], [[[2, -23, 3, 27, 57, 2, 28, 21, 46, 8, -23, 54, 13, 13, 23, -3, -9, 67, -46, -49, 21, 16, 18, 23, 8, -35, 2, -37, -13, 11, -33, -43], [-79, 1, 25, 25, 87, -19, 25, 31, 79, -31, -19, -15, 2, 40, -16, -60, -47, 39, 15, -111, 18, 36, 45, 1, -28, -13, 29, -37, -21, 9, -3, 4], [-19, 32, -18, -6, 87, -36, 55, 29, 75, -37, -13, -50, 15, 33, 8, -25, -1, 7, -17, -84, -15, 21, 10, -7, -6, -7, -4, -24, -21, -8, 5, 38]], [[-39, -20, -17, -2, 65, -31, 54, -10, 44, -37, -34, 66, 14, -7, 69, 38, -84, 28, -41, -45, 4, 34, 29, -32, -10, -28, 8, -71, -53, -2, -49, -52], [-93, -32, -2, 51, 127, -13, 41, 12, 63, -66, -14, 30, -3, 40, 18, -10, -80, 13, -24, -86, -12, 27, 46, -18, -14, 30, 63, -33, -52, -19, -35, -15], [-54, -30, -36, 44, 98, -7, 43, 10, 49, -90, -11, 21, -17, 65, 27, 32, -2, 6, -27, -78, -28, 7, 21, 0, -14, -9, 50, -23, -35, -35, -23, 17]], [[-29, -16, 10, -5, 73, -7, 44, -8, -5, -3, -14, 23, 7, -27, 40, -2, -5, -41, -16, -17, -12, 27, 60, -15, 45, -30, -3, -30, -4, -12, -27, -46], [-25, -33, -15, 35, 82, 4, 9, 17, 18, -45, -2, 66, -2, 10, 15, -15, -80, -46, -8, -42, -18, 9, 39, 6, 47, 9, 31, -17, -26, -12, 0, -25], [22, -4, -58, 57, 70, 19, -12, 10, 1, -67, 9, 82, -10, 38, 14, 1, -58, -3, 6, -35, -18, 3, -20, -7, 42, 13, 13, -11, -14, -30, -22, -7]]], [[[-16, 34, 34, 31, 1, 3, 27, 50, 52, -46, -14, 41, -24, -25, -24, -12, 2, 1, -81, -42, -37, 19, 29, -2, -9, -42, 19, -37, -23, 35, -7, -30], [18, 29, -59, 54, -18, -40, -19, 45, 34, -82, 13, 12, -5, -19, -36, 9, 8, 42, -61, -1, -25, 23, 42, -8, 12, 9, 19, -31, -6, 32, -21, -39], [-1, 27, -23, 5, 20, -40, -11, 58, -8, -100, 10, -1, 17, 33, -13, -10, 38, 82, -17, 19, -7, 5, -10, -11, 44, -18, 2, 30, -11, 19, -71, -44]], [[22, 49, 92, -14, 1, 15, 21, -41, 41, -17, -31, -19, -41, -20, -8, 22, 3, 21, -34, -7, -34, 11, 35, 7, -2, -64, 81, -47, 2, 46, 0, -28], [46, 55, -6, 8, -30, -18, -8, -19, 35, -50, 26, -41, -73, -1, -6, 32, 10, 23, -47, 18, -13, 7, 29, -18, 23, -21, 72, -29, -45, 88, -46, -11], [27, 71, -56, -2, -9, -32, -15, 33, 4, -45, 42, -3, -24, 54, -1, -25, 15, 41, -12, 39, -19, -14, 3, -20, 32, 2, 54, 11, -57, 75, -83, -48]], [[7, 59, 88, -25, 3, 52, 51, -127, 6, 61, -40, -27, -29, -38, 7, 39, -17, 51, -1, 20, -54, 7, 22, -17, -13, -75, 60, -20, 50, 34, 4, -3], [30, 89, 35, -10, -4, 46, 27, -76, 9, 53, 6, -52, -67, -14, 22, 18, -1, -3, -9, 14, -31, 35, 21, -25, -15, -20, 62, -13, -18, 69, -37, -7], [-5, 72, -24, -4, -14, -7, -41, -12, 47, 42, 28, 6, -24, 16, 7, -48, 7, 23, 8, 54, -15, 33, -39, -28, 2, 7, 48, 5, -41, 60, -35, -11]]], [[[13, -39, -65, 7, -25, -79, 6, -40, -56, -72, -32, 37, -31, -47, -11, 26, 36, 1, 20, 2, -48, -19, -5, -6, 12, 49, 15, -22, 3, -5, -36, -4], [62, -93, -34, 27, -48, -6, -9, -12, -55, -91, 35, 62, -20, -10, -49, -21, -43, 40, 32, 18, -67, -34, -11, -5, 6, 43, -41, -46, -3, 15, -88, -12], [33, -59, 23, 2, -68, 30, 6, 15, 6, -51, 46, 22, -53, -1, -23, -9, -94, 6, 11, 60, -34, -13, -3, 0, -42, 12, -40, -75, 3, 1, -34, 15]], [[27, -34, -24, 53, -51, 28, -51, -49, -86, 42, -14, 29, -15, -19, -43, 36, 17, 8, -20, 10, -62, -47, -82, 39, -9, -35, -24, -13, -34, -49, -43, 72], [47, -80, -23, 94, -74, 89, -38, -51, -127, -22, 49, 54, -44, 14, -73, 17, 1, 36, -16, -11, -108, -99, -61, 35, -28, -50, -10, -77, 25, -27, -99, 88], [-1, -18, -7, 26, -42, 53, -4, -48, -43, -18, 11, 11, -31, 29, -35, 15, -33, 32, 15, 15, -89, -69, -1, -3, -26, -26, 11, -74, 19, 2, -39, 46]], [[-7, -54, -6, 22, -48, 17, -5, 9, 21, 97, -32, -16, 6, 0, -45, 5, -68, 23, -52, -19, -77, -31, -23, 78, -91, -41, -36, -6, -52, -47, 17, 106], [-1, -70, -29, 84, -53, 79, 26, 27, -55, 10, 2, 16, -14, 40, -51, -11, -29, 10, -72, -41, -93, -80, -16, 83, -73, -33, 4, -21, -33, -23, -20, 118], [7, -17, -31, 29, 4, 23, -3, 6, -31, -26, -13, -31, 10, -6, -7, -6, -9, 21, -38, -8, -89, -24, 0, 26, -31, -4, 24, -28, -21, -3, 20, 38]]], [[[-12, -6, -47, -6, 0, 46, 56, -57, -13, 7, -31, -37, -23, -17, 24, 13, 42, -13, 0, -7, -39, -20, -36, 23, -6, 19, 0, 4, 30, -30, 76, 89], [25, 34, -30, -41, 3, 26, -3, -31, 16, 75, -77, 7, -9, 8, 39, 45, -16, 42, -52, -44, -34, 37, -28, 44, 8, -13, 19, 16, -24, -69, -12, -23], [35, 39, 40, -68, 23, -35, 10, 4, -59, 82, -31, 21, -4, 27, -6, 34, -63, -12, -24, -56, -46, 32, -32, 13, -13, 63, 27, 52, -10, -65, -15, -59]], [[1, 11, -79, -40, -11, -12, 5, -4, -15, -46, 7, -51, 12, -14, 18, -32, 91, 1, -36, -4, -46, -8, -5, 3, -39, -20, 9, -18, 35, -33, 44, 32], [9, 19, -38, -56, -20, -13, -6, 18, 11, -22, -33, 4, 4, 16, 19, 25, 3, 35, -19, -57, 9, 27, -3, 32, -31, -45, -2, -19, 12, -52, -27, -42], [32, 13, 74, -35, 2, -21, -60, 3, -17, 15, 11, 17, 10, 28, 13, 39, -38, 9, 23, -42, 2, 32, -45, 24, -28, -16, -32, 20, -9, -65, -17, -24]], [[-18, 18, -76, -23, -11, -18, -63, 20, -23, -41, 39, -19, 35, 31, 16, -48, 121, -3, 2, 33, -32, -18, 9, 19, -20, -62, 5, -52, -9, -21, 13, 1], [5, 11, 28, -29, -36, -39, -22, 53, 1, -45, 13, 18, 23, 25, 20, 20, 58, 14, 22, -28, 14, 17, -17, 17, -19, -16, -21, -40, 16, -13, -3, -28], [4, -34, 127, -8, -6, -52, -15, 1, 1, -46, 17, 35, 20, 24, 2, -19, -22, 9, 35, -29, -2, 44, -16, 10, -32, -20, -30, 8, -17, -42, -13, 16]]], [[[-48, 33, 27, 22, 7, 3, -25, -33, -60, 39, -17, 59, -2, -85, 52, 17, 88, 0, -22, -18, 11, 75, 18, -33, 2, 70, 5, -18, 25, -14, -18, -36], [-16, 15, 107, 31, 45, -46, 0, 12, -53, -12, -3, 30, 27, 8, -3, 4, -17, -25, 2, -25, -18, 72, 42, -33, 14, -5, 10, -3, 14, -9, -29, -58], [-1, 25, 74, -43, 24, -13, -8, 69, 6, -57, 9, 32, 16, 45, -17, 13, -10, -15, -6, 22, -18, 21, 93, -54, 40, -1, 1, 6, 38, -29, -28, -32]], [[-7, -3, -49, -6, 13, 37, 15, -53, -10, 36, -57, 11, -12, -24, 50, 26, -11, 30, -54, -28, 14, 70, 14, -29, -13, 34, -32, -12, -19, 13, 25, -18], [-30, 20, 30, 29, 72, -15, 39, 18, -24, 14, -8, 26, 19, -16, 24, 5, -68, 6, -35, -20, 10, 44, -7, -45, -9, -7, -3, -10, -46, 12, -4, -36], [-17, 14, 58, -3, 22, -36, 34, 47, -17, -6, 19, -2, -5, 41, -19, -21, -38, -6, -4, 0, 3, 45, 20, -50, 3, 24, 0, -2, -17, 1, -3, -42]], [[82, -6, -127, -21, -11, 25, -21, -30, 5, 38, -28, -3, 7, -9, 33, 17, 46, 11, -9, 10, 0, 49, 52, 27, -10, -33, -36, 5, -17, 18, 24, -16], [50, -7, -57, -17, 52, 7, 0, -16, 18, 5, -19, 25, 17, -12, 41, -20, -45, 26, -28, 40, 9, 39, 11, -1, 8, 14, -21, 9, -6, 5, 41, -17], [-16, -31, 25, -29, 57, -33, 40, 24, 11, 12, -10, -2, -15, 10, -20, -70, -14, 20, 16, 25, 19, 12, -13, -54, -2, 39, 1, -10, 7, 22, 60, -18]]], [[[-44, -45, -59, -51, 59, 7, -28, 26, -19, -3, -11, 48, 31, 12, -6, 4, 51, -4, -21, 3, -5, -39, 51, -11, 45, -8, -8, -22, 13, 52, -82, 35], [-38, -29, -26, -14, 23, -19, 30, -20, -58, -46, 4, 45, 11, -58, -13, -40, -23, -41, -14, 20, 42, 46, 42, -11, -13, 13, -15, -31, -7, 54, -40, 19], [29, 6, 39, -18, 29, 1, 87, -24, -1, -54, 27, 19, -23, -64, 0, -11, -127, -44, -31, -14, 69, 54, -11, 6, -17, -2, 0, -19, 24, 0, -6, 58]], [[-29, -4, -69, -43, 58, 8, 21, 1, 21, -18, -7, 32, 42, 35, 18, -1, 47, 6, -33, 4, 21, -4, 30, 15, -12, 18, 1, -35, -16, 42, -58, 32], [-25, -16, -61, -24, 37, -20, 87, -41, 11, -17, 6, 31, 19, -40, 50, -11, -17, 9, -37, -38, 68, 39, 51, 63, -92, 27, 3, -48, -47, 41, -19, 22], [12, -10, 16, -44, 10, -2, 75, -25, 34, -4, 32, -8, 3, -32, 21, 23, -64, -1, -22, -57, 73, 15, -3, 61, -47, 18, 29, -31, -54, -20, -15, 27]], [[0, 9, -38, -31, 32, -7, -5, 30, 3, -9, -13, -7, 18, 16, 24, -32, 37, 40, -4, 16, 17, 20, 25, 21, -48, 18, -11, -16, -5, 12, -8, 9], [-16, 12, -17, -53, 6, -24, 59, 29, 28, -8, -32, 3, -24, -48, 54, -2, -12, 55, -35, -22, 37, 18, 18, 32, -46, 20, -5, -32, -36, -6, 7, 2], [-12, -12, 66, -71, 1, -8, 34, 70, 66, -7, -36, -26, 13, -3, 19, 27, -20, 50, 7, -22, 21, -13, 9, 43, 39, -16, 19, -12, -42, -47, -15, 10]]], [[[-14, -36, 103, -15, -47, -8, -53, -14, 63, -45, 19, -31, 12, -44, -36, -50, -5, 15, 12, 42, 8, 36, -2, -3, 10, -35, -4, -27, -20, -8, 37, 17], [-80, 7, 56, -16, -72, -3, 5, -9, 82, -74, 6, -57, 24, -69, -54, -47, 105, 46, 11, 78, -8, 45, 42, -7, 50, -74, 8, -41, -31, -12, 65, -46], [-35, 29, -41, -10, -79, -10, 38, 16, 33, -21, 19, -33, 54, -50, -37, -15, 127, 32, -7, -12, -32, 23, 18, 29, 1, -38, 9, -24, 11, -23, 18, -23]], [[-48, -8, 116, 4, -53, -2, -59, -30, -10, -70, 53, -71, -29, 23, -72, -56, -69, -17, 34, 43, -9, 13, 11, -49, 50, -48, -17, -9, -27, 46, 23, -21], [-98, 48, 59, -19, -70, -21, -25, -26, -3, -103, 36, -75, -19, -8, -61, -45, 62, -1, 36, 65, -29, 17, 7, -33, 85, -102, -4, -66, -26, 55, 30, -70], [-52, 32, -65, 9, -72, -22, -8, -37, -2, -78, 11, -25, -18, -6, 7, -26, 99, 8, 14, 2, -30, -31, 16, 14, 17, -58, 8, -65, -28, 4, -22, -28]], [[-6, 42, 22, 30, -15, 26, -3, 28, -34, -26, 45, -60, -32, 20, -47, -52, -46, 45, 33, 17, -38, 45, 30, -36, 25, -1, -41, -18, -46, 84, -4, 39], [-10, 88, 28, 31, -17, -22, -10, 29, -30, -74, 32, -49, -37, 3, 15, -62, 34, 0, 71, 29, -24, 44, 27, 0, 61, -48, -40, -33, -49, 88, 3, -22], [10, 58, -25, 28, -20, -53, 13, -9, -8, -21, 33, 11, -24, 21, 65, -70, 8, 2, 41, -23, -11, -25, 0, 13, 36, 17, 18, -31, -4, 39, -47, 27]]], [[[-6, 13, -57, -4, -43, 50, -78, 17, 46, 28, -36, 10, -35, -14, 45, 40, -41, -60, 11, 5, -14, 41, 43, -98, 17, 9, -49, 32, -111, -30, -87, -4], [2, 39, -17, 28, 32, 83, -87, 11, 70, 10, -27, 15, -16, -43, 29, 40, -74, 0, -53, -12, -25, 9, 35, -80, 24, 18, 54, 43, -87, -9, -45, -77], [-31, 39, -1, 60, 16, 11, -72, 23, 102, -40, -7, 70, 50, -57, -3, -20, -16, 8, 38, 68, -44, 25, -31, -57, 17, 41, 34, 30, -82, 16, -83, -71]], [[37, 22, -86, -33, -32, 37, 7, -18, 0, -8, -44, 45, -79, -36, 50, 9, -11, -76, 33, 16, -61, -8, 44, -68, -34, 40, 36, 57, -75, -24, 0, 52], [59, 54, -40, -13, -1, 79, -11, -47, 30, -15, -47, 47, -85, -47, 85, 59, -40, -11, -46, -25, -93, -31, 14, -55, -27, 25, 78, 75, -50, -82, 29, -37], [15, 21, 17, 12, -5, 17, -4, -85, 41, -58, -1, 4, -39, -69, 24, 2, -6, -12, -40, -10, -75, -66, 8, -52, -1, -3, 70, -3, -9, -61, -15, -80]], [[36, 72, -15, 53, -15, -24, 15, -33, -25, 9, -9, 20, -44, -38, 35, -26, -5, -61, 71, 5, -51, 2, 38, 24, 0, 52, 24, -13, -38, 1, 78, 100], [67, 59, -45, -13, -50, 34, -2, -66, -8, 9, 12, 23, -70, -97, 62, 5, -24, -22, -7, 15, -127, -19, 15, -13, 5, 53, 17, 43, -41, -51, 79, 22], [33, -2, -1, -29, -49, 44, -3, -78, 31, -39, 39, -5, -57, -83, 36, -24, 35, 52, -48, -17, -66, -42, -8, -15, 9, -4, 43, -14, -4, -26, 54, -19]]], [[[18, 31, -17, -21, 12, 20, -70, 43, -60, -48, 22, -22, -15, 51, 39, -44, 46, 19, 53, 51, 5, 27, 28, 39, 39, 65, 12, -8, -46, 24, -12, -7], [10, -11, -29, -34, 62, 48, -3, 43, -14, -49, 4, -16, -7, 34, 50, 16, 79, -48, -6, 7, 62, 67, 70, 59, 14, 2, -48, -6, 9, -8, -46, -45], [45, 25, -55, 10, 7, 47, 29, -68, -1, 17, -38, 42, -23, -36, 46, 62, -41, -54, -4, -25, 45, 90, 25, 82, -27, 28, -23, -10, 72, 7, -2, 9]], [[23, 11, -44, 32, 34, 32, -19, 5, -1, -74, 0, -54, -23, 88, 42, -54, 74, 4, -18, 73, -12, 33, 13, 47, 38, 39, 7, -34, 25, 4, -23, -88], [22, 51, -67, -6, 95, 20, -9, -6, 38, -19, -24, 21, -42, 22, 7, 10, 59, -55, -66, 23, 7, 73, 3, 68, -11, -24, -27, 16, 53, -30, -44, -74], [54, 34, -26, -34, 13, 0, -40, -33, 55, 8, -63, 80, -51, -36, 22, 6, -56, -25, -54, -30, -40, 84, -38, 22, -12, 28, 2, -23, 44, -56, 6, -42]], [[-10, -9, -24, 37, 16, -5, -6, -5, 16, -59, 18, 10, -19, 16, 10, -38, 55, -27, -60, 88, -28, 7, -48, 4, 33, -38, 21, -53, 30, 7, 8, -41], [4, 40, -20, -6, 54, 3, 28, -33, 19, 51, -43, 61, -50, -6, -3, 13, -3, 3, -88, 37, -21, 51, -92, -8, 20, -5, -3, 15, 6, -35, -17, -13], [27, -8, 4, -25, -4, -2, -20, -55, -2, 28, -32, 35, -57, -37, -3, -19, -127, 3, -37, -31, -28, 8, -54, -21, -63, 31, -18, 7, 10, -67, 18, -20]]], [[[58, -50, 98, -6, -30, -9, -20, 60, -22, -22, 9, -27, 6, -12, -20, -23, 124, -35, 26, -16, -56, -65, 55, -55, -2, 67, -55, 1, 13, 60, 32, -53], [23, -80, -49, 24, 8, -48, -68, -33, -21, 5, -12, 9, 11, -45, 25, -28, 30, -51, 49, -21, 14, 0, 50, -10, -3, 4, -14, -1, 6, 1, 48, 25], [35, -72, -60, 21, 31, 18, -28, -111, 37, 38, 21, 19, -14, -35, 82, -10, -61, 11, 8, -17, 65, 36, 42, 44, 35, -94, 9, -64, 7, -23, 17, 59]], [[53, -28, 94, -20, 2, 10, -20, 57, -32, -73, 30, -38, -7, 43, -33, 11, 63, -13, 7, 3, -10, -48, 7, -75, -12, 21, -35, 30, 4, 99, -12, 9], [50, -51, -74, -9, -1, -20, -40, -4, -1, -34, 3, -33, 1, 22, 32, 20, 62, -70, 23, -34, 51, 8, 21, -27, 6, -9, 8, 25, 47, 15, -11, 40], [40, -48, -65, 41, -11, 12, -3, -49, 48, 0, 24, -17, -13, -11, 68, 41, 5, -60, -10, -19, 29, 52, 52, 49, 43, -70, 33, 11, 33, -32, -17, 33]], [[48, -3, 30, -24, -16, 37, 12, 50, -32, -79, 45, -17, 14, 51, -36, -46, -11, -28, 27, 42, -14, -38, 3, -33, 1, 25, -15, 16, -38, 74, 19, 34], [41, -72, -127, -22, -10, 32, -12, -7, -6, -78, 48, -32, -9, 60, 15, -54, 24, -88, -3, -19, 31, -19, 2, 12, -13, -29, -1, 9, 11, 27, -35, 34], [40, -53, -104, -21, 0, 48, 22, -23, 49, -12, 2, 6, 13, 33, -6, 2, 6, -113, -37, 4, 4, 40, 62, 44, -25, -23, 22, 9, 33, -9, -78, -7]]], [[[33, -10, -106, 62, -53, -45, 25, -5, 0, -3, 62, -24, 10, 18, -20, 43, 37, 40, 15, 4, 25, -7, 14, -18, -1, -10, -31, 11, 23, 31, -10, 43], [51, -21, -27, 22, -107, -91, -40, 43, -11, -60, 89, -48, 17, 18, -40, -33, -22, 64, 26, 15, 9, -7, -29, 15, 6, 19, -32, 7, 45, 33, 20, 4], [53, -7, 15, 19, -78, -98, 10, 32, -30, -46, 66, -7, 2, -41, -11, -25, -90, 40, 38, 57, 9, 9, -15, -7, 6, 27, -34, -2, 25, 23, -2, 19]], [[-30, -2, -66, 25, -124, -59, -7, -8, -28, -53, 70, 8, -36, 39, -9, 12, 92, 45, -31, 27, 14, -5, 19, -14, -2, -57, -24, 11, 20, 54, -5, 10], [25, -14, 22, -32, -127, -63, -39, 52, 1, -29, 89, 36, -12, 10, -44, -20, 19, 29, -6, 63, 1, -39, -10, 29, -17, -21, -35, 34, 43, 53, 25, 11], [40, -34, 69, -35, -89, -32, -3, 39, -25, -23, 66, 22, -5, -25, -16, -10, -59, -3, -9, 98, -6, -26, -6, 34, 3, -27, -20, 23, 10, 28, -3, -5]], [[-16, 7, 35, -33, -60, 13, 12, -12, -39, 10, 37, 17, -16, 32, 3, -17, 60, -20, -11, 23, -20, 14, 0, 19, 13, -32, 26, 7, 38, 33, 32, -11], [-6, -36, 27, -52, -66, -15, -22, 30, -10, 63, 30, 56, -36, 5, -37, -23, 31, -46, 20, 53, -31, 0, -15, 24, -8, -33, -1, 36, -10, 64, 26, -7], [39, -21, 26, -76, -11, 7, -7, 9, 0, 58, 19, 35, 16, 15, -4, -26, 44, -63, 0, 52, -30, 7, 9, 6, 13, -22, -33, 23, 10, 31, 19, -2]]], [[[-66, 27, -74, 32, -54, -30, 3, -53, 3, -75, -16, -13, -38, -86, -43, -2, -3, 16, 9, -73, -41, 22, -44, -21, -71, -55, -12, -57, 46, -43, 5, 47], [-78, 42, -60, 50, -14, 3, -25, -62, -29, -51, -6, -31, -40, -55, 11, -22, -10, -42, 1, -54, -21, 6, -79, 25, -25, -5, -7, -17, 2, -55, 1, 37], [-45, 82, 44, 33, 41, -17, -43, 18, 21, -48, -2, -28, 18, 29, 5, -40, 78, -42, -7, -58, -33, -6, -59, 30, 6, -26, 28, -22, 6, -8, 5, 14]], [[-59, 14, -71, -32, -31, -11, 39, -2, 8, -30, -29, -39, -50, -55, 10, -10, -65, 43, -38, -52, -58, 23, -28, 89, -71, -7, -12, -54, 13, -83, -37, 47], [-38, 12, -39, 3, -12, 61, -32, 13, -8, 1, -19, -35, -30, -8, 16, 4, -50, -25, 7, -24, -46, 19, -73, 96, -13, 1, 17, -34, -20, -57, -52, 9], [-19, 43, 50, 42, 29, 19, -56, 61, -18, -11, 13, 6, -24, -12, -8, 43, 46, -44, 9, 26, -38, 34, -75, 42, 13, -30, 57, -8, -30, 5, -24, -33]], [[-14, -33, -24, -54, -9, 27, 70, -2, 27, 42, -7, 1, -34, -24, 33, -61, -83, 103, -80, -30, -18, 42, -68, 127, -7, 22, -44, -58, 10, -84, -22, 46], [1, -41, -6, -16, -2, 77, -17, 9, 9, 41, 2, 8, 12, 15, -10, -56, -47, 31, -40, -13, -14, 28, -76, 104, 45, 8, 7, -38, -11, -40, -33, -1], [20, 3, 70, 22, 15, 58, 12, 30, -64, 7, 36, 21, 11, 0, -3, 19, 18, -18, -8, 47, 3, 45, -37, 55, 53, -20, 37, -14, 0, 12, -22, -48]]], [[[30, -12, 0, -13, -19, 25, 49, 8, 7, -15, -43, -17, 6, -67, 48, 46, -18, -41, 11, -46, -18, -10, 70, 21, 17, 8, -42, 4, -25, -6, -17, -76], [14, 0, -32, 4, -7, 44, 58, -6, 23, -14, 8, -39, 43, -51, 55, 24, -24, -36, 10, -61, 19, -23, 42, 52, 30, -14, -26, 7, -44, -11, -25, 1], [-1, 33, 19, 37, -26, 44, 5, -64, 21, 20, -10, -9, -6, -26, 2, 48, -36, -30, -4, 4, 21, -20, 6, -2, -46, 6, -13, -34, 37, -10, -1, 7]], [[-38, -22, 44, 22, 18, 21, 29, 66, 24, -2, -58, 25, 34, -48, 91, 26, 28, 3, -29, -52, -29, 0, 21, 24, 74, -15, -42, -28, -24, 33, -16, -89], [-13, -25, -19, 5, 2, 9, 59, 66, 102, -10, -9, -36, 66, -24, 89, 6, 24, -5, -39, -62, 2, -26, 23, 56, 78, -21, -73, -35, -27, 14, -7, -18], [9, 4, -53, 34, -1, 32, 43, 15, 68, -42, -21, -19, 19, -15, 17, -4, -2, -8, -15, -22, 8, -48, 22, 30, 7, 7, -49, -44, -28, 4, 15, -5]], [[-42, -25, 33, 39, 42, 16, 43, -21, 34, -35, -47, 57, -18, 14, 14, 18, 8, -27, 22, 20, -49, 25, 11, 11, 7, 12, -28, 16, 56, 10, -12, -69], [-36, -77, 23, -11, 1, 12, 32, 8, 120, -13, 13, 44, 32, 33, 40, 32, 50, 17, -39, 12, -48, 19, -10, -2, 23, 21, -62, -30, 28, 14, -15, -27], [19, -72, -23, -6, 15, 19, 53, 30, 127, -37, 35, 19, 40, 52, 3, 10, 48, 47, -37, 12, -18, 1, 5, 1, 4, -10, -40, -20, -27, 38, 5, -8]]], [[[-5, 69, 59, -61, 18, 79, -2, -17, 19, 6, -15, 43, 16, -44, -6, -12, 100, -47, -25, -1, 26, -29, 39, -4, 27, 1, 14, -73, -46, 2, -35, -9], [-7, 101, 32, -61, 26, 99, 25, -32, -17, 24, -45, 52, -27, -19, -31, -44, 20, -76, -39, -34, 87, -23, 43, -61, 23, -32, 67, -43, -77, 3, -11, -54], [6, 96, 45, -63, 39, 33, 32, -34, 7, 40, -13, 21, -55, 39, -34, 3, -5, -64, -62, -35, 64, -18, -16, -28, 74, -35, 45, 1, -12, -3, -16, -34]], [[-71, 81, 5, -62, 3, 108, -54, 15, -7, -38, -52, 44, -37, -32, -22, -10, 54, -32, -75, 50, 52, -92, 31, -62, 1, 19, 41, -44, -70, -23, 14, -2], [-76, 127, -23, -29, -1, 111, -19, -16, -23, -45, -111, 34, -71, -45, -72, -41, -22, -71, -73, 11, 86, -89, 49, -108, 24, 22, 114, -44, -65, -3, 49, 8], [-24, 66, 15, -19, -14, 13, 20, -15, -19, -23, -80, 12, -40, -34, -55, 1, -37, -55, -44, -31, 46, -27, -16, -55, 24, -12, 96, 7, -10, 12, 1, 1]], [[-53, 20, 10, -33, 22, 79, -56, 25, 11, -30, -37, 16, -46, -12, -9, -44, 0, 22, -29, 45, 18, -29, 43, -62, -4, 56, -28, -17, 26, -19, 48, -32], [-77, 92, -43, -32, 17, 47, -46, -11, -15, -36, -71, -2, -41, -41, -47, -101, -33, -6, -61, 16, 26, -50, 69, -60, 20, 59, 40, -13, -5, -5, 63, -18], [4, 60, -56, -2, -5, -21, 38, -7, -10, -52, -55, 0, 4, 10, -33, -49, -26, -13, -38, 17, -13, -35, -11, -6, 22, 7, 57, 13, 25, 18, 0, 19]]], [[[2, 10, 33, 47, -6, 29, -55, -32, 89, -21, -15, 19, 17, 0, -41, 46, -24, 18, -124, 22, -52, -81, -8, -24, 34, 76, 56, -28, -13, -29, -15, 23], [-44, 26, -54, 59, -38, 2, -46, -54, 78, -82, -5, 7, 40, -10, -37, 62, 19, 36, -82, 26, -51, -41, 11, -10, 1, 24, 30, 20, 20, -37, 5, 12], [2, 41, -63, -25, -44, -14, -51, -23, 17, -76, -30, 18, 17, -19, 14, 14, -6, 97, -11, 7, -23, -7, -25, 56, -60, -27, 26, 37, 70, -16, 36, 75]], [[-5, 50, -26, 26, -8, -1, -24, -13, 102, -59, 26, 20, 51, -5, 29, 6, -108, -20, -43, 51, -74, -37, 3, 92, 29, 35, 9, -10, -68, -38, 22, 0], [-25, 49, -59, 82, -14, 5, -24, -5, 37, -108, 1, -1, 45, -31, -10, 66, 4, 14, 32, 7, -54, -73, -24, 63, -56, -25, 34, 6, -40, -47, 52, -50], [16, 71, -64, 8, 26, -27, -45, 41, -31, -59, -25, 34, 54, 1, 30, -3, 38, 40, 50, 5, -6, -43, -14, 63, -98, 13, 48, 37, -25, -42, 60, 69]], [[-22, 85, 66, -8, -6, 9, 5, 33, -1, 17, 19, -18, 76, -30, 81, -11, -117, -17, 65, 30, -30, 57, -68, 127, 49, -30, 15, -22, -63, 2, -35, -92], [-65, 86, 71, 50, -7, -14, -20, 81, -19, -18, -11, -22, 52, -4, 86, 12, -14, 5, 57, 49, -4, -5, -31, 112, -19, -64, 22, -17, -32, -34, 6, -46], [9, 43, 7, -5, 53, -52, -1, 38, -42, 34, -20, -17, 11, 30, 66, -32, 13, -42, 55, 21, 18, -23, -40, 78, -59, -6, 22, 24, -27, 3, 46, 29]]], [[[30, -3, -6, 47, -16, -17, -52, 10, 48, -35, -35, -22, 35, -35, -2, -26, -22, 12, 35, -35, -27, -8, -45, 76, 13, 8, -10, -13, -4, 40, -69, -10], [80, -14, 11, -26, -78, 28, -119, 60, 119, 38, -22, -10, -33, -28, -13, 65, -5, -2, 7, -33, -22, -15, -1, 38, 0, -33, -43, 39, -37, 13, -33, -86], [92, 21, 15, 1, -29, 11, -72, 34, 94, 70, -1, -16, -31, -12, 19, 23, -52, 2, -28, -57, -18, 39, 28, -43, -32, -15, -26, -39, 31, 39, -4, -110]], [[-42, -21, -17, 58, -38, -14, 13, -4, 44, -38, -47, -23, -11, -2, -20, -1, 5, 5, 32, -77, -31, -59, -62, 41, -6, 29, -18, 9, 84, 11, -26, -2], [-31, -27, -41, 21, -127, 2, -96, 33, 69, -12, -45, -45, -47, 24, -39, 83, -24, 40, 5, -19, -50, -9, -80, -23, 17, 1, -69, 109, -9, -18, -8, -70], [-26, -10, -71, 12, -74, -1, -61, -41, 48, 36, -82, -21, -59, 48, -8, 25, -19, -32, 5, -32, -29, 21, 9, -58, -38, 15, -46, 39, 37, 16, 48, -85]], [[-66, -83, 4, 46, 1, -36, -1, -44, 63, -87, 14, -59, -7, -23, -44, -29, -39, 0, 34, -60, 2, -91, -47, 25, 72, 24, -27, 43, 96, -57, 22, 37], [-98, -98, 27, 5, -75, -47, -66, -35, 59, -61, 9, -107, -53, 20, -91, 71, -27, 7, 23, 44, 5, -14, -113, -33, 37, 10, -39, 93, 4, -89, 30, 16], [-36, -97, -60, -11, -34, -24, -51, -98, 30, 10, -21, -60, -30, 42, -25, 37, 30, 21, 26, -6, 0, -40, -51, -59, -42, 22, -58, 34, 17, -59, 33, -27]]], [[[-56, -48, -72, 38, -26, -35, -127, -16, 31, -46, 14, 41, 0, -16, -19, -49, -62, 36, -32, 69, 11, 30, 1, 3, 21, 41, 41, -55, 3, -43, 20, -33], [-5, -29, -14, 75, -47, -32, -50, 5, 18, 20, -13, 66, 9, -11, 20, -40, -44, -4, -54, 81, 29, 9, -19, 18, -13, 56, 27, -76, 20, -8, -12, -2], [18, -18, 33, 19, -40, -33, -35, 1, 19, 46, 6, 53, -8, -14, 13, 7, -81, -40, -23, 46, -3, 18, -21, 3, -27, -11, 10, -87, 4, 1, -13, 13]], [[-8, 5, -28, 40, -38, -30, -67, -28, -19, 1, -27, 38, -1, -15, 16, -13, 36, 0, -29, 75, 8, 34, -24, -19, 29, 84, 21, -60, 29, 17, -1, -29], [7, 8, 17, 62, -38, -33, 8, -19, -20, 32, -39, 78, 26, -24, 17, 17, 17, -2, -31, 111, 17, 41, -32, -14, 40, 63, 5, -123, 22, 41, -1, -12], [22, 15, 13, 39, -17, -5, 80, -11, -1, 24, -45, 75, -7, -52, 17, 46, -44, -15, -29, 79, -7, 38, -23, 1, 13, 3, -13, -100, 21, 3, 5, 64]], [[-24, 11, -26, 67, -33, 7, -22, -52, -51, 11, -2, 13, 3, 6, 19, 13, 57, -48, 6, 29, 9, -4, -25, -8, -16, 75, -22, -39, -8, 35, 5, -29], [-47, 8, 7, 73, -69, 3, 19, 7, -89, 25, -42, 32, 24, 3, 18, 22, 32, -10, -28, 53, -10, 29, -3, -11, -5, 68, -21, -87, -31, 70, 18, -18], [-37, 5, -19, 17, -18, 12, 58, 11, -43, 23, -38, 53, 43, -13, -1, 1, -3, -7, -62, 45, -28, 26, 21, 18, 18, 8, -26, -40, -55, 15, 19, 63]]], [[[-67, 71, 2, -11, 29, 125, -104, 32, 51, 27, 60, -45, 82, 75, 20, -27, -38, -52, 2, 19, 68, 3, 75, 66, -20, -24, -12, -22, 56, 53, 44, -42], [-14, 125, 25, 2, 9, 52, -52, 40, -10, 37, 49, -13, 127, 38, 14, 9, -34, -78, 11, 71, 33, -5, 33, 86, -76, -13, -41, -27, 4, 66, 8, -42], [28, 113, 14, -35, 31, -29, -115, 127, -3, 56, -10, -14, 94, 60, -3, 10, -80, -69, -24, 26, 17, -37, -25, 63, -77, -43, -23, 10, 2, 2, -39, -71]], [[11, 92, 4, 20, -21, 28, 38, 12, 21, 32, 15, 2, 74, 108, -17, -2, 29, -12, -6, 53, 4, -51, 75, 32, -43, 3, -42, -23, 41, 27, 11, -5], [17, 118, 41, 3, -19, -3, 99, 19, -52, 80, 66, 13, 113, 94, -22, 31, 54, -64, 35, 50, -13, -37, 120, 35, -40, 2, 5, -72, 32, 50, -24, -63], [23, 49, 48, 1, -4, -72, 25, 57, -40, 33, 29, 1, 37, 51, -24, 25, 7, -16, 7, 29, 27, -22, 66, 42, -56, -8, -15, -31, 31, -17, -33, -92]], [[103, 19, 50, 4, -21, -6, 62, -42, 20, -21, -27, 42, 52, 77, -46, -19, 66, -48, -20, 70, 49, -44, 63, -37, -12, -32, -19, 21, -79, -18, -36, -76], [98, 31, 104, -33, -42, -17, 96, -14, -37, 25, 39, -32, 75, 73, -48, 7, 68, -23, 67, 47, 76, -45, 112, 28, -41, -21, -38, -1, -56, 13, -25, -46], [43, -3, 96, -31, -23, -55, 46, 8, 35, 27, 30, -68, 17, -42, -5, 10, 2, -26, 60, 43, 47, -5, 62, 82, -49, -10, -23, 36, -52, -37, -40, -35]]], [[[14, 86, -6, -70, -32, -95, -1, -39, 57, -1, -9, -1, -12, -19, 15, 14, 0, 6, -14, 42, 20, 60, 19, 59, -3, 18, -6, -35, -56, -16, -6, -82], [3, 62, -7, -80, -27, -95, 1, -4, 14, -18, -20, -36, 16, 40, -14, 6, -29, -5, -41, -27, 51, 38, 33, 93, -22, 41, -16, -27, -24, 10, -34, -57], [-37, 50, -5, -106, 62, -71, -8, 26, 42, -55, -41, -5, -13, 51, -28, -11, 19, 12, -1, -24, 44, -24, -1, 89, -59, -24, 20, 44, 24, 29, -22, -4]], [[-36, 29, 68, 18, -37, -39, -14, 31, 12, 22, -29, -39, -44, -54, -1, -28, -54, 15, -11, -51, 1, 59, -5, 72, 14, 54, 19, -68, -46, -5, -2, -45], [-19, 15, 46, -11, -56, -41, -38, -16, -10, 34, -74, -48, 20, 41, -1, -36, -85, -3, -47, -67, 1, 55, 35, 127, 6, 68, -5, -66, -10, -40, -23, -67], [11, 66, -2, -61, 25, -46, -26, -44, -15, -3, -62, 33, -4, 22, -40, -31, -73, 15, -59, -15, 1, 24, -12, 103, -45, 5, -1, 23, -6, -25, -37, -21]], [[-31, 1, 46, 33, -46, -26, 1, 52, -30, -3, -15, -27, -65, -28, -6, -8, -69, 55, 37, -99, 19, -10, -23, 56, 36, -19, 7, -17, -30, 26, 4, 27], [11, -14, 22, 43, -54, 7, -77, -12, -10, 37, -69, -43, -5, 28, 13, -80, -55, 38, -17, -101, 3, 10, 1, 82, 35, 59, -5, -36, 22, -18, 17, -28], [44, 31, -38, 5, -23, 29, -22, -62, -15, 54, -11, 7, 18, -10, -22, -64, -90, 0, -7, 16, -5, 63, -31, 66, 19, 39, -7, 10, 54, -27, 45, -70]]], [[[36, 33, -41, 6, -18, -42, -10, -117, -56, -4, -10, 1, -57, 9, 3, 26, -70, 6, -60, -14, 21, -4, -100, 10, -25, -30, -6, 2, 8, -21, 40, 31], [38, 25, 20, -15, 36, 4, -38, -85, -58, -11, 11, -11, -20, 3, -56, 18, -26, 27, -41, 9, 18, 2, 15, -24, 46, -14, -32, 46, -38, -22, -10, 6], [38, 45, -17, -9, 11, 0, -44, -72, -20, -5, 10, -1, 8, -20, -35, 32, 17, 10, -20, 16, 13, -51, 48, -31, -6, -47, 15, 7, -30, -46, -18, 50]], [[-2, 36, -31, -15, 28, 11, -1, -62, 25, -35, -17, 15, 40, -7, -32, -13, -89, 70, -85, -38, 33, -12, -36, -8, 20, -60, 32, 15, 28, -57, 0, -14], [57, 69, -22, -46, 41, 33, -35, -26, 6, -59, 44, 4, 72, 16, -92, -12, -23, 63, -42, -31, 3, -55, 20, -16, 42, 9, -36, 41, -10, -5, -24, -49], [53, 76, -45, -9, 24, 1, -61, -51, 38, -66, 36, -16, 55, -3, -52, -7, 24, 38, -1, 13, -7, -74, 24, -18, 43, -24, -2, 28, 2, -24, -28, -10]], [[-35, 17, -11, -89, 2, 6, 28, -26, 21, -30, -14, 38, 2, -4, -40, 3, -127, 78, -55, -61, 8, -35, -14, -28, 18, -43, 15, -34, 8, -54, -98, -40], [22, 32, 9, -75, -17, 34, -32, 12, -11, -15, 24, -23, 38, 21, -59, -60, -17, 43, 5, -10, -17, -89, 18, -21, 25, 34, -36, -4, -31, 2, -102, -41], [52, 31, 2, 0, 1, 28, -28, 6, 34, -74, 18, -71, 2, 8, -6, -25, 16, 13, 52, 28, -23, -83, 45, -10, 32, -17, -23, -8, 16, 23, -72, -30]]]]> : tensor<64x3x3x32xi8>, "sym_name" = "__constant_64x3x3x32xi8", "sym_visibility" = "private", "type" = memref<64x3x3x32xi8>}> : () -> ()
  "memref.global"() <{"alignment" = 64 : i64, "constant", "initial_value" = dense<[-117, 33, 1320, -1086, -363, -2567, -162, 1169, 6058, -1220, -1044, -330, -1365, -368, 632, 363, 274, -731, 1141, 1571, -1968, 1722, 1234, -1831, 163, 466, -2742, -75, 830, -3342, 1670, 2106]> : tensor<32xi32>, "sym_name" = "__constant_32xi32_1", "sym_visibility" = "private", "type" = memref<32xi32>}> : () -> ()
  "memref.global"() <{"alignment" = 64 : i64, "constant", "initial_value" = dense<[[[[75, -7, -43, -27, 45, 83, 127, 60, 30, 4, 40, -108, 15, -85, -59, 6]]], [[[-43, 80, 82, -127, -5, 8, -76, 72, 14, -9, 43, -39, 46, 30, -39, 114]]], [[[127, -16, 23, -20, 9, 5, 25, -47, 27, -34, -19, 12, 5, 27, -16, 18]]], [[[127, 89, 9, -43, -51, 25, -21, 54, 112, -41, 6, 46, 55, 46, 23, 32]]], [[[14, -40, -34, -27, -16, 127, 17, 43, 44, -38, 2, -59, -28, 2, -23, -59]]], [[[3, 8, 62, -47, 114, 89, 7, -27, -24, -35, 42, 23, 14, 11, 70, -127]]], [[[8, 42, 71, -43, 33, 73, -30, -66, 4, -1, 83, -127, 122, -30, 33, -49]]], [[[-27, -36, 32, -61, 35, 87, -71, -16, -43, 19, 127, 93, 24, 0, 65, -35]]], [[[-22, 99, 62, -54, -111, 69, -25, 21, -10, 74, -76, -4, -122, 58, 127, -75]]], [[[60, -21, 17, -34, 8, -95, 45, -95, -127, 100, 65, 91, 37, 16, 76, 30]]], [[[-84, -120, -80, -42, -44, -72, 25, -29, 78, -122, -25, -78, 54, -94, -127, -80]]], [[[-127, 18, 31, -52, -36, -24, 79, -2, -11, 53, -25, 61, -73, -2, 69, -83]]], [[[24, 32, 13, -29, -27, 49, -68, 15, -4, -127, -9, 20, 30, 27, -14, 6]]], [[[-45, 27, 11, 24, 55, -53, 127, 4, -61, 65, -37, 18, -50, -50, 29, -83]]], [[[-42, -7, 7, 109, -34, -15, -107, -60, -127, 86, 112, -24, 22, -27, 36, 43]]], [[[23, 27, 41, 59, 27, -41, 61, -19, 30, 21, 36, 0, 127, -4, 19, 0]]], [[[13, 25, 17, 26, 7, -63, 58, -12, 86, 127, 95, -48, -18, 13, -12, 87]]], [[[127, -10, 10, 66, -38, -82, -52, 32, 35, 51, -13, 121, 4, -14, -100, 56]]], [[[39, 5, 16, 127, 28, 34, 17, 29, 27, 2, -46, 9, -19, 14, 3, 15]]], [[[-126, 33, -82, -63, -7, 12, 118, 127, 66, -72, 50, -52, 21, -15, -54, -7]]], [[[-67, 17, 30, 127, 13, -58, -42, 5, 90, -37, -7, -70, 18, 35, -17, 69]]], [[[-32, 45, -32, 52, 110, 45, 127, -2, 102, 98, -112, 60, -38, -16, 43, 34]]], [[[-47, -41, -72, 22, -24, 54, 127, 12, 13, 109, 9, -61, -11, -24, -68, -60]]], [[[74, 18, 22, 81, -47, 60, -52, 57, 12, -108, -74, 127, 37, 16, -13, -8]]], [[[25, 43, -35, -67, 58, -8, 127, 69, 12, 30, 59, -28, 95, 9, 63, 67]]], [[[108, 74, 95, 33, -13, 27, -69, -59, -30, -48, 36, -21, 127, -11, 5, 11]]], [[[-88, -52, 48, 66, 81, 5, 13, -65, -127, 79, -6, -75, -13, 61, 17, -40]]], [[[53, -14, -15, -99, 41, -28, 29, 127, -83, -82, 8, 53, 117, -16, 102, -25]]], [[[3, -27, 16, 23, 33, 127, -80, 4, 35, -17, 19, -42, -39, -1, 4, 61]]], [[[58, -4, -50, -28, -89, -38, -27, -29, -80, 74, -12, 10, -127, -8, 4, 122]]], [[[21, 54, -38, -35, -52, -113, -115, 52, 113, -106, -92, 77, -127, 112, 91, 45]]], [[[-17, 39, 58, -20, -79, 49, -31, -17, -127, 6, -1, -57, 26, 26, 44, 8]]]]> : tensor<32x1x1x16xi8>, "sym_name" = "__constant_32x1x1x16xi8", "sym_visibility" = "private", "type" = memref<32x1x1x16xi8>}> : () -> ()
  "memref.global"() <{"alignment" = 64 : i64, "constant", "initial_value" = dense<[9237, -2805, 7816, -6433, 4053, -2872, 20467, -272, 28414, -15653, 2245, 13857, 5291, 10979, -11540, -6841, 28261, 5415, 2091, 18040, -13951, 10849, 11347, 916, -1403, 6593, -6975, -6591, 18740, -2009, 11821, 6893]> : tensor<32xi32>, "sym_name" = "__constant_32xi32_0", "sym_visibility" = "private", "type" = memref<32xi32>}> : () -> ()
  "memref.global"() <{"alignment" = 64 : i64, "constant", "initial_value" = dense<[[[[-72, -32, 44, -2, -22, -42, 15, 54, 5, 5, -9, 5, 4, -71, 37, 26, -32, -25, -18, -30, -33, -53, -66, -31, -61, 48, 55, -33, -12, -22, -25, -69], [25, -19, 85, 19, -55, -43, 39, -41, -34, 4, -29, 1, 5, 3, -39, -30, 23, -48, -31, -29, -12, -51, -38, 13, -34, -12, 53, 6, -15, -17, -31, 2], [21, 19, 36, 73, 2, -17, -23, -85, -82, 13, -22, -38, 19, 25, -57, -64, -4, 47, -4, -24, -39, 5, 27, 20, -14, -22, -33, 15, 29, 0, -21, 69]], [[-55, -56, 30, -94, -8, -41, -19, 127, 16, -40, -5, -13, -12, -34, 70, 40, -19, -31, -11, 6, 9, 9, -65, 1, -65, 46, 27, -54, -3, 65, -9, -75], [60, -49, 58, -36, -66, 26, 31, -4, 11, 10, 1, -23, 2, 15, -21, -27, 17, -76, -5, 4, -41, 10, -27, 1, 9, -29, 42, -14, -21, 76, -11, 16], [51, 27, 10, 39, -91, 19, 5, -66, -5, 76, -1, 16, 17, 57, -94, -28, -1, 19, 15, 15, 1, 27, 6, 11, 94, -46, 1, 8, 31, 51, -12, 39]], [[-33, -40, -18, -36, 64, -49, -10, 52, -37, -61, 13, -20, -37, -32, 58, -5, -35, -27, -1, -1, 2, 13, -59, -5, -2, 11, 49, -60, -32, 33, -47, -33], [66, -54, 33, 6, 52, -50, 8, -36, -43, -31, 22, 22, 3, 31, -12, -38, 1, -66, -9, 43, -52, 24, -79, -17, 10, 4, -15, -40, -24, 2, -3, 15], [52, -26, 4, 47, -42, -19, 28, -59, -13, 54, 19, 37, 40, 60, -116, 4, 27, 23, -16, 31, -6, 45, 15, 6, 42, -15, -4, -9, 25, 30, 48, -5]]], [[[33, 60, 32, 5, 13, -49, -3, -76, -3, -47, -42, 19, 68, 48, -43, -13, 25, -16, -18, -7, -31, -5, 17, -25, -30, -14, -31, 82, -12, -2, -34, -23], [-17, 47, 15, 36, 14, -94, -28, 17, 27, -5, 13, -3, 29, -5, 35, 30, -60, 10, -25, 48, -40, -8, 44, -51, -11, 33, 26, -17, 20, 26, 41, 5], [-21, -44, -7, 13, 8, -62, -34, 32, 30, 33, -18, 23, -30, 5, 81, 6, -42, -8, 5, -50, -15, -10, 23, 17, -17, 42, 25, -25, -56, -9, -3, 76]], [[-18, 63, 12, 8, 52, 22, 25, -70, 0, -15, -19, -7, 74, 35, -72, -8, 43, -7, -27, -2, 16, 17, 2, 3, -52, 0, -81, 86, 8, -19, 33, -55], [3, 29, 31, 35, 44, -16, 36, 36, -2, -9, 24, -54, 33, 4, 24, 41, -35, -12, -4, 1, -21, -13, -13, 16, 34, 38, 71, -44, 13, 48, -3, 31], [-84, -123, -11, 0, -47, -12, 0, 59, 20, -5, -19, 19, -82, -21, 127, -20, -98, 18, -6, -39, -52, -21, -10, 5, 41, 17, 97, -86, -44, 13, -55, 57]], [[51, 29, 22, 13, 16, 1, 20, -27, 3, 4, 12, -2, 27, 27, -45, -24, 38, -39, 12, -2, 29, 7, -3, 3, -5, 8, -66, 48, 20, -16, 39, -45], [38, 30, 62, 23, -2, 49, 50, 23, -36, -3, 3, -36, 41, 23, 32, 3, 41, -56, 20, 3, 39, -13, -42, 36, 22, 35, -2, -12, 0, -5, 14, -23], [-58, -76, 33, -4, -12, 22, 37, -16, 14, 25, -30, -23, -47, -32, 55, -23, -53, -11, 2, -13, -15, -49, -8, -12, -1, -10, 115, -65, -22, 13, -68, -14]]], [[[74, -46, 53, -82, -102, 101, 43, 12, -112, -11, -17, 29, -25, -42, -86, -36, 34, -44, 43, -79, 40, -42, -44, -29, -31, -86, 43, -50, -95, -35, 16, -112], [84, -51, 50, -53, -25, 83, -14, 0, 12, -18, -7, 39, 39, -6, 5, 13, 30, -9, 58, -4, 43, -39, -39, -24, 24, -76, 74, -5, -117, 42, -22, -20], [63, 39, 9, -6, 3, 33, -29, -68, 10, -29, -1, 24, 38, -4, -21, -20, -12, -33, 19, 14, 21, -41, 5, 44, -36, -32, -10, 36, -45, 38, -5, 4]], [[42, 1, 62, -22, -71, 76, 72, 44, -56, 5, -32, 69, -40, -15, -7, 24, 56, -38, 53, -46, 30, -12, -67, 52, -21, -2, 71, -27, -60, 20, -12, -110], [51, -34, 62, -56, -69, 113, 45, 27, -33, -15, -5, 111, 17, -40, 4, 28, 59, -14, 64, -84, 118, -47, -88, 24, 20, -37, 118, -34, -127, 37, 6, -47], [10, -26, 23, -51, -71, 97, 15, -6, -51, 0, -18, 69, 9, -44, 4, -40, 44, -75, 52, -39, 83, 24, -43, 22, 4, -34, 108, -6, -97, 45, 40, -38]], [[36, -7, 47, -52, -31, 78, -15, -15, 5, -6, 14, -12, -24, 7, -62, 15, -14, -75, -9, -35, -35, -3, -35, 6, -21, -21, 9, 20, -1, 8, -33, -55], [22, 2, 14, -40, -79, 65, -8, -6, 29, 29, -11, -16, 9, -12, -52, 38, 14, 32, -22, -29, 33, -52, -58, 11, 29, -25, 46, 6, -65, 29, 3, -29], [2, -18, -30, -46, -111, 45, 1, -41, 69, 19, -14, 4, 24, -16, -42, -33, 35, -80, 29, 10, -5, -24, -17, 34, 12, -39, 86, -20, -9, -18, 27, -79]]], [[[-69, 22, 74, -35, -41, 62, 1, 10, -18, 5, 58, -51, -23, 83, 24, 5, 44, 41, -17, 127, 64, 6, 23, 25, -123, 37, -26, 13, 38, 22, 18, -83], [-62, 21, 9, -43, 2, -4, -2, 19, -36, -32, 6, -67, 2, 66, 23, -17, 43, -39, -28, 51, 42, -21, -55, -14, -37, 20, -12, -3, 67, -5, 9, -109], [-30, -23, 19, -35, -1, 35, -37, 52, -2, -1, 0, 3, 7, 31, -3, -19, 32, -31, -59, 11, -1, 25, 73, 19, 45, -6, 3, -23, 37, -52, 19, -54]], [[-54, 31, 22, 43, -14, 39, -52, -12, -5, 1, 49, 14, 64, 38, 13, 2, 35, 55, 11, 62, 6, 16, -16, 37, -104, 33, -20, 37, 2, -9, 34, -8], [-22, 8, -28, -2, 19, 8, -21, 45, -26, -42, 29, 28, 88, 5, 34, -20, 36, 10, -1, 26, -11, -36, -53, 3, -16, 1, 19, 2, 13, -43, -5, 21], [-12, 12, 2, -33, 20, -10, -26, 42, -46, -29, -15, 64, 47, 32, -32, -89, 47, -62, -24, -67, 5, -44, 21, 50, 49, -19, 42, 20, 6, -34, -20, 8]], [[49, 36, -75, 91, 10, 26, -8, 4, -15, 5, 19, -39, 113, 20, -42, -36, 4, -50, -6, -11, -3, 40, 20, 27, -70, -38, 29, 54, -36, 44, 12, 26], [32, 32, -73, 53, 39, 9, -39, 11, -29, -60, 40, -29, 89, -8, 1, -34, -16, -62, -4, -36, -8, 13, -35, 33, 10, -25, 2, 10, -6, -22, -9, 53], [42, 35, 17, 37, 44, -21, -67, -1, -30, 20, -19, -8, 62, 36, -38, -76, 6, -82, -4, -63, 9, -3, -64, 17, 39, -27, 24, 38, 28, -21, -4, 42]]], [[[-9, 9, 26, -62, -11, 55, 51, -38, -77, -37, -37, 78, 17, 16, 1, -37, 78, -15, -12, 5, 80, -14, -46, 100, -15, 40, 66, -2, -73, -1, -5, -26], [9, -40, 5, -24, 40, -46, 88, 31, -14, 58, -45, -49, -47, -14, 77, 54, -49, -4, 75, 44, 11, -21, 33, 6, 18, 46, 29, -36, -32, 85, -40, 22], [-43, 1, -50, 1, 17, -29, -10, 42, 84, -53, 19, -58, -5, 16, 3, 18, -3, 7, -103, 22, -56, -3, 79, -31, -66, 19, -32, -1, 29, -31, -59, -27]], [[25, 40, 80, 6, -14, 41, -1, -17, -71, -38, -25, 73, 2, 42, 4, 8, 91, 45, 37, -40, 97, -120, -26, 14, -70, 39, 60, -1, -47, 105, -40, -92], [-106, -74, -37, -15, 6, 3, -31, 115, -11, -9, 30, -72, -46, -9, 106, 127, -35, -75, 34, 51, 11, -39, -39, -41, -57, 49, 26, -42, -43, 105, -39, -91], [23, 4, 15, 75, 96, -60, -3, 40, 37, -27, 1, -69, 9, 37, -9, -13, -14, 18, -28, 23, -88, 60, 41, -52, -44, 12, -69, 0, 65, 1, -29, 24]], [[20, 27, -61, 42, -23, -33, -25, 2, -21, 2, -18, 31, -15, 48, -1, 21, -14, -43, -13, -40, 50, -29, -18, -27, 17, -5, 46, 25, -31, 13, -51, -12], [-25, -4, -17, 26, 36, -46, -45, 23, -2, -13, -55, -32, -4, 53, 21, 23, -35, -67, -15, 3, 8, 42, -18, -28, 17, -18, -18, -6, -19, 20, -79, 11], [36, -3, -32, 10, 5, -64, -5, -45, -44, -9, -51, 24, -27, 33, -29, -47, -11, -18, -4, -61, -42, 38, -46, -22, 56, -11, -47, 0, 0, -47, -38, 67]]], [[[14, -34, 87, -31, -67, -11, 12, 17, -52, -53, 92, 75, -5, 24, 62, -10, -30, -20, 2, 24, 12, -32, -127, 19, -6, 52, -10, -39, -16, -7, 111, -50], [-1, -1, 41, -26, -79, 25, -24, 6, -25, 8, 24, 44, 36, 11, 14, 12, 66, -63, -17, 46, 15, -19, -19, 18, -20, 11, -70, 17, 21, -52, 59, -35], [52, 40, 11, 6, -50, 33, -40, -91, -39, -6, 11, 78, 9, 55, -56, -63, 96, -41, -35, -53, 8, 95, 21, 5, -64, -8, -54, 38, 4, -58, -23, -47]], [[-47, -37, 7, -45, -94, 45, 59, 72, -16, -35, 87, -20, 5, -38, 86, -15, -50, -3, 44, -34, -13, -12, -58, 96, 68, 56, 38, -37, -18, -15, 2, -15], [21, 6, -27, 7, -7, -15, 29, 66, 35, 12, 59, -21, 51, -16, 41, 43, 69, -43, 5, -17, -17, 16, -36, 94, -5, 29, -15, 8, 39, -31, -6, 24], [82, 45, 9, 27, 0, -52, -11, -111, 38, -18, -6, -25, 12, 62, -105, -56, 58, 5, -63, -38, 7, 51, 10, -11, -72, 13, -59, 59, 56, -19, -32, 80]], [[-77, -50, -38, -83, -31, 73, 46, 70, -7, -48, 83, -20, -80, -5, 80, -9, -26, -36, 33, -11, 11, 0, 21, 55, 49, 18, -15, -51, -34, 10, 5, 15], [45, -15, 19, -37, 112, -8, -8, 5, -18, -4, 21, -57, -41, 10, 32, -45, 5, 25, -14, 1, -39, -6, 75, 41, -28, 20, -27, -9, 39, 42, -5, 34], [23, -11, -12, -20, 112, -70, 5, -28, 55, -8, 68, -78, -36, 6, -14, -58, -47, 51, -63, 31, -35, -9, 58, -29, -35, 9, -21, -15, 33, 64, 32, 79]]], [[[-26, 0, -13, -34, -26, -25, 30, -79, -46, -97, -25, -33, -37, -39, -84, 21, -67, -8, 9, -65, -103, -32, -15, 30, -70, -52, -1, 2, -83, -34, -87, -30], [32, -30, -9, -12, -76, -22, 28, -79, -31, -32, -20, -56, -18, -89, -25, -32, -88, -96, -22, -40, -69, -37, -24, 55, -39, -51, 40, -25, -127, -13, -69, 62], [30, -36, -23, -7, -97, -49, 8, -115, -28, -3, -27, 12, -4, -64, -28, -3, -107, -39, -20, 31, -85, -3, -17, 1, -26, -69, 7, -20, -86, -5, -17, 11]], [[-11, 35, -16, 46, -8, 52, 16, -27, 1, -45, 41, 58, 38, 55, -63, 23, 36, 6, 0, -4, -11, -13, 12, -1, -14, -16, 28, 32, -23, 19, 15, -84], [0, 26, 28, 51, -5, 34, -16, -17, 24, -4, 62, 29, 10, 14, -3, -39, -13, -1, -9, -52, -7, -16, -28, 16, 1, -2, 32, 17, -35, 73, 2, 26], [17, -18, -15, 14, 16, -18, 2, -18, 36, -42, 38, 68, -4, -31, -16, -64, -85, 6, -18, 30, -77, 14, 8, -39, -8, -1, 9, -11, -37, 64, -17, 15]], [[28, 5, -8, 41, -27, 17, -20, -29, -25, -16, 12, 32, 40, 13, -72, -44, 25, -19, 10, 7, 20, 18, -6, 11, -23, -25, -9, 5, -17, -27, 23, -41], [26, 9, 19, 61, -19, 31, -9, -15, 31, 60, 17, 25, 51, 45, -34, -22, -1, -18, 10, 5, 58, 18, -7, 33, -24, -52, 2, 0, -24, 11, 42, 21], [-10, -19, 13, 41, 20, -52, -18, -32, 19, -27, 66, -32, 8, -1, -24, 2, -33, -1, 2, 18, -52, 59, 81, -7, -11, -44, -7, -25, -7, -15, -31, 66]]], [[[-9, -22, 30, -31, -24, -4, 28, -32, 16, -6, 33, 14, 3, -36, 21, 15, 17, 7, -3, 31, -16, 51, 33, 34, -9, 54, 44, -51, 28, 37, 23, 33], [-70, -69, 22, -7, 11, -5, -1, 3, -8, 17, 58, -3, -3, -21, 22, 20, 6, -3, -18, 50, -27, 53, 46, -15, -3, 52, -7, -91, 14, -18, 13, 12], [-49, -73, 47, -33, 12, 37, 3, -4, -43, 44, 34, -18, -17, -30, 20, -32, 2, 13, 21, 22, 0, 30, 21, -42, 12, 14, 19, -44, 18, -23, 31, -10]], [[11, -50, 49, -7, -71, 43, 0, 34, 32, -9, 5, 69, -46, -16, 40, 23, 19, 52, -3, -13, 33, 8, 7, 16, 44, 29, -4, -88, 23, 18, 15, -32], [-8, -105, 50, -8, -13, -16, 3, 3, 17, 5, 2, 18, -68, -6, 10, 3, 26, 37, -40, 41, 11, 48, 24, 1, 20, 26, -13, -117, -7, -3, -19, 1], [-48, -127, 24, -59, 9, -4, 3, 22, -9, 55, -13, -4, -35, -36, 17, 12, -34, 17, 0, 23, -9, 38, 17, -32, 6, 14, 19, -70, -1, -8, -31, 30]], [[29, -49, 31, 2, 8, 39, 9, 45, 16, 25, -15, 41, -48, -7, 26, -9, 0, 11, 33, -20, 25, 17, 10, -6, 18, 5, 6, -76, 8, 7, 3, -18], [35, -68, 41, -15, 4, 23, 14, -19, 15, 8, 12, -12, -53, 32, 19, 9, 48, 28, 0, -4, -6, 32, 19, 2, -6, 14, -23, -68, 0, -32, -8, -2], [-7, -88, 28, -64, -12, 28, -3, -37, 34, 59, 14, -38, -63, -4, 10, 9, -16, 40, -5, -15, 11, 19, 1, 5, -19, -15, 25, -61, -7, 2, -37, 18]]], [[[39, 31, 44, 60, 32, 16, -66, -52, -17, 89, -25, -59, 29, 65, -43, -42, 24, -66, -47, -71, 35, 71, 57, -29, 74, -43, -7, 18, 49, 31, 58, -118], [30, 35, 42, -3, 9, 6, -61, -52, -22, -28, -17, -38, 21, 31, -18, -8, 53, -62, -29, 26, -4, 87, 65, -26, -3, -30, -58, 38, 27, 34, 45, -90], [42, 22, 49, -51, 30, -9, -68, -18, -31, 6, 22, -10, 35, 47, -41, -44, 13, -27, -39, 44, -40, 93, 6, 18, -59, -30, -67, 7, 32, -17, 57, -87]], [[35, 1, 73, 12, -6, 36, -46, -22, -43, -2, -55, -6, -4, 10, -59, -30, 23, -28, -48, -19, -33, -83, -68, 24, 33, -55, 127, -3, 9, 32, -11, -85], [-55, 6, 38, -21, -24, 11, -65, -39, -54, -52, -65, -38, -45, -6, -41, 45, 39, -72, -75, 12, -36, -17, -21, -37, -19, -21, 45, 5, -2, 33, -43, -88], [-65, -26, -28, -26, 12, -88, -25, 7, 22, -21, 19, -55, -13, 10, -36, -46, -75, 45, -36, 43, -51, 80, 7, -50, -72, -27, -55, -25, 32, -19, -6, -38]], [[-8, -13, -81, -9, -31, 90, -32, 13, -45, 10, -25, 2, -38, -52, -2, -56, 30, 4, -35, 24, -1, -73, -81, -13, 18, 8, 83, -35, -42, 62, -7, -73], [-57, -51, -61, -29, -49, 28, -51, 13, -37, -7, -21, -6, -85, -30, -26, 25, 10, -34, -44, 14, 17, -40, -37, 11, 27, -26, 63, -35, -11, 37, -49, -45], [-118, -51, -79, -34, -51, -68, -27, 27, 22, 28, 22, -86, -8, -1, -8, -79, -62, 24, -3, -34, -45, 33, 4, -75, -25, 4, -58, -23, 16, 16, 21, 2]]], [[[82, 39, 3, 60, -38, -4, 1, -67, 3, 103, 25, 17, -60, 57, -66, -62, 17, 48, 41, 25, -92, 67, 71, -43, 40, -37, -50, 64, 61, 72, -27, 104], [84, 88, 19, 48, 66, -20, -105, -111, -56, 38, 74, -12, -7, 2, -4, -104, 19, 32, -4, 84, -74, 54, 41, -52, 33, -3, -71, 49, 35, 13, -34, 26], [-36, 4, 30, 30, -23, 2, -15, -36, -54, 26, 62, -58, 16, 16, 70, 8, -17, 3, -35, 108, -10, -2, -71, -3, 15, 46, -31, -2, -12, -21, 64, -95]], [[62, 35, -8, 64, -41, 27, 48, -5, 34, 39, -48, 127, -36, -5, -55, 45, 34, 21, 37, -38, 15, -23, -5, -32, 29, -39, 53, 68, 21, 112, 17, 102], [69, 92, 21, 71, 54, -32, -68, -118, 19, 41, -18, 91, 14, 36, -55, -6, 12, 91, -75, -3, 1, -11, 32, -19, 34, -44, -4, 66, 35, 20, -47, 96], [-43, 18, 5, 0, 40, 37, -15, -17, 39, 0, -5, 14, 12, -28, 61, 49, -1, 59, -31, 72, 52, -39, 1, 64, 6, 58, -12, 2, -7, 13, 31, 25]], [[68, -9, -37, 47, -21, 27, -10, 11, -3, -114, -36, 96, -23, -63, -46, -8, -18, -63, -18, -9, 7, -17, -46, -39, 5, 4, 33, 12, -33, 49, -28, 71], [123, 35, 2, 45, -14, -26, -17, -60, -19, -12, 5, -36, 35, 20, -68, 68, 35, -41, -23, -32, 38, 47, -12, 48, 1, 0, -50, 27, -14, 3, -32, 22], [23, -14, 3, -45, -22, 5, -15, -14, -3, -19, -17, -87, 20, -40, 51, 34, -5, -55, -54, 0, 51, -26, -35, 36, 5, 10, -52, -18, -38, -44, 8, 2]]], [[[-30, -12, -12, -39, 14, 4, 0, -16, -12, -13, 0, -14, 8, -40, 6, 8, -41, -25, -25, -26, -39, -34, -1, 6, 37, 15, -25, -7, -43, 48, 8, 38], [-32, -50, -47, -40, 29, -33, -4, 31, -49, -26, -2, -11, -4, -25, 45, 55, -69, -2, -11, -13, -37, -10, -14, -17, 60, 17, 20, -49, -50, 65, 34, -22], [5, -27, -1, -14, -44, 2, -2, 16, -17, -67, -15, -17, -37, -15, 14, -25, -32, 2, -55, -25, -29, -25, -19, -15, 31, -4, -45, -3, -49, -8, 40, 7]], [[-114, -78, -47, 57, 24, -4, -6, 28, 50, -39, 22, -42, -44, -67, 22, -48, -50, 69, -38, 85, -3, 22, 62, -20, -30, 1, 21, -123, 49, -33, -4, -7], [-41, -125, -19, 27, -29, 2, 45, 29, 28, 36, 47, 51, -35, -58, 79, 45, -30, 57, 10, 4, 72, 23, 19, 13, -67, 25, 85, -127, -11, 18, -16, -88], [40, -67, -1, -14, -86, 69, 73, -23, -9, 10, -31, 40, -29, -45, -13, -33, 45, 12, -7, -82, 46, -34, -18, 17, -56, -7, 85, -27, -23, -12, -24, -17]], [[21, 40, -16, 27, -33, 8, -7, -43, 32, 68, 14, -52, 59, 9, -18, -41, 37, 33, -32, 37, 20, 21, -29, 36, 33, 4, -73, 45, 43, 49, -26, -2], [64, 58, 54, 33, 17, 15, 22, -7, -17, -35, 66, -41, 33, 23, 26, -31, 54, -92, -16, 52, 31, 8, -51, 53, 47, 21, -31, 56, 41, 30, -57, -28], [79, 49, 30, 8, 47, 18, 13, -22, -8, 6, 26, -22, 53, 14, -55, -62, 58, -22, -15, 26, 26, -9, 58, -3, 65, -13, -19, 25, 40, -43, -12, -31]]], [[[-32, -23, 1, -33, 42, -74, -66, -5, 70, 71, 5, -43, -33, -1, -42, 14, 4, -14, -66, 100, -13, -26, -62, -34, -108, -89, -42, -59, 11, 98, 4, 4], [-33, -19, -78, -51, -79, 30, -79, 2, -14, -12, -58, -22, 30, 12, -26, 43, -5, -14, -92, -13, -63, 18, 1, -62, -81, -122, -71, -46, -17, 114, -40, 67], [-70, -46, -16, -46, -37, 67, 18, 38, -56, 38, -6, 76, 23, -16, 14, -23, 68, 36, -14, -54, 21, -41, 1, 15, -126, -25, -6, 2, 42, 15, -3, -22]], [[9, 7, 87, -8, 94, -65, -52, -59, 62, -44, -70, 14, 8, 54, -90, -98, 5, 26, -26, 62, -41, -44, -35, 62, -95, -57, 8, -11, 14, 67, 15, 77], [15, 11, -3, 25, 87, 25, -53, -62, -5, 12, -73, 85, 25, 47, -127, 9, 87, -43, -78, -38, -88, -45, -31, 63, -36, -57, -10, 1, 74, 87, -59, 73], [-24, 15, 12, -10, -11, 42, -1, -49, 25, 26, 43, 31, 48, 42, -45, -38, 85, -21, -50, -30, 53, -53, -4, 65, -74, 1, 38, 16, 25, -78, -55, -25]], [[-37, -15, 53, -14, 31, 42, -17, -2, -10, -28, -43, 0, -10, -27, -10, -65, 25, 7, 21, -37, 7, -82, -76, 50, -39, 2, 50, -36, 1, 84, 18, 55], [15, -44, 25, -15, 67, 31, -12, -27, -23, -22, 30, -3, 48, -23, 3, 5, 47, -58, -19, -41, -20, 23, -15, 64, -119, 7, -43, -44, 51, 47, -10, 74], [31, -57, -14, -28, -11, 7, -2, 3, 48, 6, 54, 6, 49, 29, 10, -11, -3, -46, -57, 39, 57, -5, 29, 49, -87, 7, -51, -23, 20, -45, -80, 33]]], [[[21, -8, -22, 6, -18, -29, 8, -7, 9, 9, 1, 24, -19, 9, -8, -33, 0, 19, -13, -2, -4, 24, 9, 14, 18, 8, -3, -1, 23, -32, -46, 41], [18, 43, -16, 12, -21, 13, 10, -9, -40, 1, -1, 8, 35, 29, -31, -6, 31, 5, 7, 19, 35, -9, 19, -3, 10, 24, -46, 44, 59, -12, 3, -47], [34, 15, 15, 7, -4, 4, 25, 30, -9, 19, -3, -55, 9, 7, -10, 29, 1, 15, 28, 18, 5, 7, 20, 9, -33, 1, -19, -4, 31, 21, 3, -3]], [[-4, 11, 9, -9, -21, -9, -5, 0, -42, 18, -14, 58, 18, -7, 8, -2, 42, 19, 12, -31, -12, -2, 3, 8, -16, 7, -14, 0, -18, -7, -6, -12], [-59, -29, -16, 10, -5, 27, -33, 12, -21, 24, 54, 22, -1, 4, 7, 32, 22, 6, -9, -7, 16, 36, -6, 23, 24, 9, -29, -26, -2, 16, 19, -28], [-20, -18, -14, 12, 13, -10, 13, 0, -7, 9, 44, -16, -7, 8, 2, 14, -3, 35, 20, 2, -23, 7, 22, 31, -2, -4, -52, 1, -26, -10, -34, 6]], [[-45, -33, 14, -39, 18, -51, 12, 3, -4, -7, 12, -18, -48, -31, 17, -9, -68, 4, 1, -27, -26, 37, 27, -28, -25, 2, -16, -47, -46, 23, 8, -23], [-24, -102, -22, -25, 30, -12, -11, 43, 35, -10, -16, 25, -82, -77, 44, 11, -77, -12, 35, -29, 2, 66, -8, -23, 16, -6, 118, -127, -92, 59, -37, 71], [-35, -79, -9, -28, -29, -15, -41, -17, 50, -8, -26, 64, -78, -45, 2, 28, -42, -17, -8, -38, -2, -7, -11, 5, 30, -28, 8, -30, -72, -43, -32, 13]]], [[[71, -7, -26, 35, 1, 11, 22, 21, 12, 51, -38, -40, -21, -30, -16, -8, -21, -46, 31, -15, -15, -19, 14, 4, 11, -29, 59, -7, -3, 35, 6, 43], [56, -22, 35, 17, -6, -15, -32, -44, -11, 64, -12, -55, -15, -22, -25, -7, -42, -10, -21, -47, -28, 10, 30, 14, -2, -47, 45, -30, -7, 38, -24, 20], [-4, -31, 66, 3, -9, -40, -31, -52, -11, 79, -13, -38, -7, -15, -85, -57, -74, 32, 22, -54, -48, 25, 36, -35, 13, -76, -20, -18, 0, 28, -31, 28]], [[71, -44, 12, 8, 8, -18, 27, 1, -64, 51, 60, -44, -51, -30, -23, 32, -62, -40, 9, -18, 4, 33, 35, 24, 19, -5, 47, -51, 23, 20, -25, 52], [-43, -70, -38, 18, 6, 6, -27, -7, 10, 71, 74, -81, -35, -45, -10, 21, -86, 5, -48, 26, -58, 41, 53, 8, -8, -41, -2, -71, 38, 31, -39, 37], [-88, -59, -22, 1, 18, 10, 10, 41, 54, 61, 63, -66, -30, -32, -24, 15, -93, 43, -2, 10, -39, 82, 57, -43, -12, 4, -37, -43, 32, 34, 30, -33]], [[-94, -40, 40, -18, 7, 57, 31, 73, -19, -8, 52, -3, -24, -30, 29, 127, -19, -73, 3, 18, -5, -39, -7, 24, -67, -6, 24, -57, 24, -44, -25, -27], [-85, -37, -53, -30, -69, 55, 35, 39, 28, -10, 37, -11, -20, -24, 39, 99, -4, -20, -18, 6, 22, 2, 39, -8, -86, 20, -12, -22, 22, -20, 3, -62], [-59, -7, -62, -21, 6, 44, 26, 10, 9, -18, -1, -13, 2, -16, 29, 26, -7, -22, 5, 53, 11, -4, 33, -11, -34, 29, -25, -2, -14, -12, 0, -35]]], [[[-27, -29, -58, 2, 70, -50, -51, 52, 38, -5, -30, 64, -5, -43, 23, -65, -47, -44, -27, 7, 51, 28, -10, -92, 32, 32, 0, -39, 4, 76, 14, 24], [-85, -2, 12, 6, -1, -51, 10, 52, 33, -8, -3, -25, 61, -14, 24, -10, 5, 31, -45, 58, 62, 42, -11, -75, 28, 41, -32, 17, 25, -47, 25, -33], [16, 42, 34, 67, -44, 91, 4, -46, -30, -31, 1, 0, 102, 0, -59, 94, 63, -24, -17, -12, 60, 21, -4, 12, 16, -5, 2, 33, -4, -8, 81, -21]], [[55, -42, -19, -15, 110, -36, 42, 41, 3, -6, 10, -5, -38, -69, 77, -49, -75, 14, 29, -32, -26, -62, 13, -30, 12, 43, 86, -56, -23, 127, -8, 46], [-5, -19, -45, 69, 43, 1, 9, 2, 45, 19, 16, 5, 35, 6, 50, -32, -28, 0, 14, 4, 47, 6, 34, -42, 38, 30, -3, -16, 29, 9, -15, 62], [19, 14, 18, 64, -34, 62, -26, -70, -42, -3, 33, 16, 29, 30, -70, 36, 78, -61, 13, -24, 83, 3, 28, 53, -19, -12, 0, 13, -23, -70, -19, -4]], [[-37, -15, -59, -22, 20, 14, 38, 37, 22, -31, 7, -12, -53, -1, 44, -11, 1, -61, 15, 12, -24, 27, 37, 22, 34, 5, -9, -26, 3, 12, -16, -4], [7, -15, -53, 65, -19, 5, 24, 4, 23, 6, 27, -51, -20, 14, -9, -31, -2, -46, 35, 23, -16, 41, 61, 20, 1, -22, -3, -18, 31, 47, -30, 40], [26, -7, -5, 36, -65, 22, -10, -47, -22, 76, 58, 16, 6, 24, -42, 59, -14, -59, 50, 11, 33, 3, 59, 28, 44, -47, -4, -1, -3, -7, -26, 8]]], [[[22, 14, -15, -49, -6, 31, -52, -25, -6, 6, -56, -34, 33, 28, -22, -54, 12, -43, 7, 36, -1, -21, -67, -27, -7, 22, -31, 0, -6, 40, 51, -28], [34, 23, -3, 27, 9, -2, -2, 41, 6, 4, -39, -59, 70, 36, -10, -47, 8, 32, 32, 3, 27, -15, -57, -32, 15, 23, 31, 12, 18, 44, 81, 0], [51, 15, 0, -12, -4, -2, 22, 19, 5, -1, -40, -11, 33, 32, -29, 9, 23, -4, -6, -63, -4, -28, 23, -17, -4, 1, -5, 12, -19, 45, 30, -19]], [[11, 16, -8, 11, -49, 0, -39, -30, 2, 25, -35, 6, 48, 44, -51, -38, -4, -20, -34, 29, 2, 44, 7, -72, 4, -41, -71, 8, 40, 53, -11, 5], [-5, 15, 7, 45, -3, -3, -7, 23, 14, 12, 11, 13, 56, 33, -6, -51, -2, 68, 38, -1, -1, -37, -29, -42, 4, -17, 13, 4, 34, 51, -22, 27], [22, 1, 2, 20, -10, -25, 38, 1, 29, -12, -16, 30, 11, 14, 18, -8, 13, -37, -4, -82, -20, 5, -7, -76, -9, -4, -33, 20, 12, 61, -5, 31]], [[-39, 9, -35, 9, -71, -40, -25, -29, 7, -13, -19, 74, 77, 44, -13, 39, 0, 31, -47, 50, -25, -6, -14, -85, 12, 2, -18, 10, 35, -14, 8, 60], [-65, 13, -19, 35, -5, -30, -37, 10, 41, -7, -5, 101, 53, 45, 27, -28, -22, 87, 23, -10, -7, -38, -71, -87, 53, 23, 87, 2, -9, 33, -18, 86], [-24, 10, -15, 38, -17, -27, 7, -10, 27, -29, -39, 101, 1, 16, 24, -35, -8, 3, 35, -59, 5, -42, -49, -100, 31, 46, 46, 15, -24, 40, -22, 127]]], [[[-70, 13, -31, 26, 121, -34, -34, -25, 28, 21, 42, -11, 4, -25, 54, -16, -47, 26, 29, -4, -73, 19, 9, -54, 1, 8, -62, 12, -6, -19, -20, -7], [-58, -14, -54, 61, 57, -71, -3, 1, 2, 12, 20, -44, -15, -55, 24, 7, -127, 32, -7, 6, -119, 40, 15, -69, 4, 4, 12, -60, 5, -4, -23, 6], [-64, -64, -87, 21, 53, -100, -32, 6, 19, 0, 7, -51, -24, -35, 26, -40, -114, 34, -43, 72, -69, 13, 32, -51, -29, -29, -35, -47, 14, -49, 4, 15]], [[-61, -31, -40, 23, 100, -59, -55, -13, 30, 7, 32, -27, -28, -81, 36, -78, -108, 50, -12, 22, -76, 28, 97, -100, -21, -54, -77, -28, -3, -8, 0, 8], [-72, -26, -76, 16, 44, -62, -38, -24, 37, 28, 18, -4, -25, -97, 30, 5, -82, 74, -39, 31, -91, 43, 70, -86, -10, -30, -40, -38, 54, -2, -12, 4], [-57, -14, -49, 11, 12, -68, -19, 36, 27, -14, 43, -3, -8, -16, -13, 15, -44, 109, -40, 40, -47, 41, 95, -37, -16, -24, -48, -14, 50, 0, -14, -3]], [[-32, -23, -33, 25, 13, -53, -46, -23, 32, -19, 24, 6, -27, -54, 28, -62, -48, 44, -35, 24, -77, 2, 64, -86, -37, -29, -37, -22, 8, 11, -5, 22], [8, -34, -54, -4, -18, -7, -39, -49, 31, 30, 10, -5, 1, -41, -28, 3, -68, 37, -36, 0, -66, 22, 30, -29, -35, -26, -43, -6, 42, 26, -37, 36], [-15, 9, -37, -20, -41, 8, -17, -1, 36, 14, 43, -12, 6, -18, -74, -11, -13, 7, -35, 2, -2, 15, 41, 32, -22, -40, -78, -7, 35, 12, -36, -54]]], [[[47, 16, -48, 18, -91, 0, -9, -15, 29, -18, -22, 20, 40, 33, -34, -52, 59, -13, -28, -17, 3, -69, 89, -39, 74, -23, -56, 15, 25, -3, -73, 94], [-23, 7, -15, -15, -6, -11, 28, 19, 6, -23, 13, 43, 18, 26, 8, 25, 46, 54, 60, -22, 64, 14, 25, -30, 8, 22, -26, -19, 7, 19, -53, -25], [-29, -53, -3, -66, 13, -1, 30, 44, 8, -101, -10, 27, -21, -25, 64, -4, -9, -21, 36, -79, 61, -17, 19, -3, -24, 64, -21, -30, -46, 0, -38, -20]], [[17, 35, -18, 2, -57, -4, 0, -22, 6, 61, 4, 8, 39, 19, -71, -43, 84, 26, -55, 32, 48, -34, 109, -26, 4, 22, -37, 8, 49, 60, 40, -18], [-26, -23, -1, 0, -84, -32, -46, -9, -6, -30, 48, -12, 9, 33, 30, 16, -26, 24, 27, 21, 34, 16, 66, 19, -36, 4, -3, -51, -2, 59, -95, -68], [-22, -40, 30, -47, -58, 16, 10, 32, -41, -127, 42, -7, 15, -47, 74, -13, 15, -47, 51, -26, -3, 25, 78, 30, -14, 13, 18, -23, 0, 13, -61, -14]], [[-1, 17, -29, 33, -22, 26, 2, 8, 19, 17, -60, 62, -42, -38, -26, -19, 47, -24, -28, 11, 66, -58, 110, 2, -10, 46, -20, 23, -16, 49, -8, -1], [-19, -16, 8, 5, -22, 3, -45, -6, -18, 60, 0, -32, -68, -10, -1, 15, 14, -27, -9, -24, -15, -5, 43, -15, -60, -12, 33, -9, -34, 76, -68, -9], [37, -5, 52, -44, 18, 36, -35, 28, -70, -23, -10, -78, -2, -37, 25, -53, 9, -87, -19, 6, -48, 15, 36, -8, -15, 3, 0, 6, -63, -40, -24, 2]]], [[[-40, 35, -22, 39, 17, 17, 28, 0, 26, -42, 42, -11, 71, 12, 8, -52, 52, 2, -21, -35, 81, 11, -15, 22, -11, 30, -21, 33, 71, 2, 2, -53], [-6, 19, 61, 12, -3, -3, -10, 62, 84, -42, 10, 4, 57, 5, -5, -7, 19, -8, -6, -38, 82, 15, -46, 11, 17, -6, -12, 25, 17, 30, 11, -63], [77, 21, 33, 3, -29, 44, 20, 10, 29, 11, -2, -44, 43, 12, -29, -24, 24, -20, -5, 13, 13, 2, -35, 44, -17, -8, -29, 18, -10, 49, 16, -6]], [[-40, 24, 12, 39, 52, 9, 39, 12, -10, -42, 19, -53, 43, -4, 58, -36, 35, -81, 5, -27, 56, -39, -71, -6, 15, 41, 21, 37, 10, 7, -64, 1], [-26, 21, 50, -32, 14, 1, 3, 50, 45, -127, -26, -18, -24, -32, 20, -6, 3, -3, -24, 3, 7, -11, -109, -11, 63, 11, 0, 38, 21, 31, -72, 8], [20, 12, 22, 17, -24, -7, 21, 19, -1, -107, -27, -23, -3, -22, -2, -46, -17, -43, -8, 19, -49, 12, -14, -5, 15, 17, -23, 13, 0, 41, -10, -19]], [[-82, -5, 30, -59, 20, -12, -13, 20, -50, -105, 20, -22, -74, -38, 82, -11, 4, -49, 16, 77, 27, -31, -69, -37, -36, 38, 59, 1, -49, 11, -48, -58], [-31, 13, 41, -3, 13, 7, 19, 26, -22, -100, -21, -11, -72, -24, 48, 27, -2, 17, 6, 60, -12, -4, -69, -72, 8, 21, 46, 19, 17, 9, -74, -33], [-82, 24, 37, 21, -36, -6, 22, -9, -10, -83, -30, -5, -21, -41, 58, 3, -31, -37, 4, 47, -43, -19, -57, -63, 23, 41, 32, 13, -17, 36, -53, -56]]], [[[-71, -21, -80, -8, 75, -45, -13, 61, 95, -23, 24, -23, -15, 0, 68, 29, -47, 23, -5, 124, 25, -27, 64, -11, -23, 64, -38, -30, 61, -13, 41, -1], [-46, -33, -21, -114, 7, 60, 30, 66, 39, -52, 9, 54, -44, -20, 90, 127, 8, 12, 7, 12, 117, -15, 35, 2, -7, 76, -54, -53, -57, -7, 6, -58], [91, -21, -1, -46, -83, 105, 6, 43, -47, -16, -29, 113, 6, 35, -6, 15, 76, -77, 2, -35, 92, -61, -72, 6, -28, 19, 36, 5, -63, -25, 4, -67]], [[1, 11, -24, 40, 48, -81, -24, 11, 59, -8, 3, -65, 78, 50, -17, 29, -45, -7, 37, 6, -80, -14, 41, -34, -60, -22, 15, -5, 11, -19, 54, 5], [-7, -47, -18, -103, 21, -84, -48, 40, -18, -13, -74, -7, -57, 17, 21, 104, -38, -43, 53, -15, -22, 1, 23, -65, -17, -6, 6, -43, -20, -38, -6, 8], [32, 9, -11, -22, -35, 20, -44, -23, 2, -2, -36, 28, -50, 28, -55, -4, 85, -108, 23, -64, 12, -38, -58, -10, -78, -15, -65, 24, -28, -59, 54, 0]], [[23, 1, -6, 12, 28, -20, -10, 14, -31, -12, -74, -21, -2, 40, -63, -27, -13, -63, 10, -114, -47, -52, -12, 35, -18, -30, 30, 7, -50, 39, -15, -16], [11, -30, 27, -4, 12, -58, -68, -25, -23, 47, -55, -8, -40, 0, -43, 38, -67, -11, -36, -72, -54, -25, -23, 16, -54, -63, 54, -37, -21, 0, -61, -8], [-5, -13, -25, 70, 47, -72, -25, 3, 54, 36, -6, -23, -45, 44, -32, 25, -24, 15, 2, 31, -25, 2, -4, 22, -56, -25, -66, 7, -17, 4, 27, -8]]], [[[19, 11, 50, 38, 4, 8, -12, -17, 18, -24, 0, -48, 44, 31, 2, -58, -18, -36, -23, -14, -9, -1, -33, -2, -5, -14, 19, 2, 8, -30, -16, -22], [-17, 5, -65, 48, -17, -28, -20, 7, 70, 1, 18, -26, 26, 62, 21, -9, 44, -2, 27, 38, 25, 58, -47, -5, 43, 5, -49, -15, 44, -6, -50, 21], [5, -17, -35, -16, -17, -10, -6, 16, 28, -84, 6, 2, 10, -9, 9, -6, 4, -7, -5, 17, -24, -18, -44, 30, -27, 22, 52, -2, -41, -6, -39, -11]], [[55, 24, 34, 40, -28, 33, 38, -10, -36, 1, 21, 20, 26, 59, 35, 4, 61, 12, -14, -63, 66, -41, -58, 52, 33, 15, 17, 27, 57, -34, 5, 26], [-4, 46, -16, 34, 7, -31, 40, 31, 85, 20, -19, -35, 40, 34, -22, -9, 37, 19, 18, -32, 17, 45, -12, -52, 11, 25, -61, 39, 82, 10, -34, 56], [20, 23, -29, -31, 56, 23, -25, 2, 46, -71, 9, 17, 28, 60, 33, -11, 52, -48, 7, 31, -6, 59, 8, 9, -66, 1, -46, 19, 58, 9, -23, 18]], [[18, -9, 29, -20, -77, 11, 50, -21, -52, -15, 43, 88, -6, 6, -28, 3, 73, -9, 26, -13, 45, -44, -38, 68, -48, 18, 12, -16, 8, -5, -13, 34], [7, -19, 42, 14, 18, -18, 51, 13, 5, -36, 25, -14, 1, 1, 7, -14, 37, 2, 16, -29, 26, -22, 29, 21, -28, 21, -1, 9, 75, -33, 50, 33], [-18, 7, 31, -13, 127, -19, -3, -19, 12, -14, 57, -41, 37, -16, -12, -41, -31, 6, -1, 53, -12, 15, 18, -17, 28, 0, -45, -4, 60, -13, 18, -29]]], [[[-52, -8, -96, 38, 32, -11, -37, 87, 37, 1, 91, 10, 0, -8, 8, 35, -4, 51, 2, 8, 88, 49, -17, -36, -66, -18, 26, -20, 38, 8, -44, -27], [6, -43, -14, -35, -32, -22, -4, 40, 7, -38, 38, 69, -46, -30, 34, 73, 38, 83, 52, -6, 64, 38, -24, 32, -42, -13, 45, -4, 3, -30, 0, -13], [27, 0, 43, -54, -4, -32, 13, 17, -12, -40, 30, 30, -59, -25, -23, -115, -16, 42, 42, -23, 23, 26, 54, 4, 0, -6, -16, -2, -11, 27, 28, -35]], [[-79, -3, -31, 36, 121, -80, -19, -39, 21, 51, 30, -54, -8, -23, 4, -15, -40, 48, -42, 25, -24, 47, 61, -111, -19, -92, -54, 14, 85, -22, -5, 59], [30, 7, 18, -77, 42, 4, -42, -94, -8, 34, -27, 50, -54, -10, -66, 6, 100, -2, -37, -25, 38, 64, -37, 39, 14, -96, 21, 20, -52, -50, 5, 23], [33, -9, 32, -68, 13, 11, -11, -53, -19, 58, 0, 15, -32, -38, -16, -55, -9, -22, 13, 5, 28, 6, -4, 19, 58, -23, 20, -5, -48, -8, 38, -81]], [[33, 24, 51, -28, 83, -49, -28, -90, 15, -44, -80, -60, -8, -4, -65, -11, 19, 61, -67, 17, -103, 16, 41, -5, -2, -46, -39, 33, 26, -87, -54, 33], [64, 54, 90, -33, 0, -31, -7, -127, 24, 62, -88, 12, 17, 2, -119, 6, 46, -1, -28, 10, -9, -47, -23, 26, 37, -34, 19, 33, -39, -20, -43, 4], [-11, -11, 31, -68, -18, 6, -41, -80, 55, 13, -14, -35, -37, -21, -20, 3, 3, -68, -18, -29, 5, -53, -56, 7, 36, -43, 53, -3, -52, 4, -41, -29]]], [[[69, -56, 18, -25, -73, -46, -17, 77, 20, -40, -18, 66, -38, -39, 43, 30, -26, -73, 29, -30, -49, -66, 22, -20, -1, -11, 93, -38, -64, 47, 4, -17], [101, -9, 80, 28, -31, 26, -33, -18, 3, -33, -35, 34, -14, -5, 13, -24, -42, -53, 27, -69, -27, -82, -44, 24, 72, -28, 64, 40, -50, 26, -1, 79], [-22, 84, 98, 41, -30, 25, -13, -23, -40, -15, -51, -3, -32, 46, -9, -10, 46, 35, -63, -35, 1, -82, -49, 30, 34, -4, -43, 66, 5, 3, -18, -86]], [[9, -48, 5, -39, -31, -56, -9, 38, 52, -42, -66, 42, -48, -78, 82, -13, -29, -106, -5, -58, -18, -41, -30, -57, 27, -6, 103, -91, -29, -9, 11, -54], [-51, -51, 36, -11, -41, -12, 0, 34, -9, -59, -73, 33, -39, -63, 25, -22, -15, -30, 9, -11, -53, -24, -25, -50, 121, 1, 16, 8, -36, -10, -3, 2], [-19, 89, 98, 36, 25, 2, -62, -22, 17, -41, -66, -5, 31, 19, -54, -55, 73, 42, -76, 35, 17, -15, -22, -23, 15, -18, -127, 75, 59, -67, 15, -86]], [[-42, 0, 68, 29, -4, 9, 16, 19, -3, -30, -68, 39, 12, -24, 44, 11, 27, 17, -4, -35, -73, -38, -37, -51, 51, -12, -26, 19, 12, -44, 53, -46], [-97, 25, 14, 42, 9, -37, 31, 23, 13, 46, -46, -66, 16, -2, -11, 9, -8, 42, -4, 30, -83, 44, 91, -23, -42, 4, -65, 40, 22, -5, 29, -55], [24, 27, 44, 25, 56, -37, 20, 34, 9, 6, 2, -38, 75, -2, -38, -43, 7, 78, 32, 76, -3, -35, 36, -17, -20, -13, -115, 8, 34, -34, 42, -59]]], [[[-16, 3, -13, -7, 0, 10, 60, 31, -52, 45, 37, -32, 42, 8, 16, 76, -1, 50, 32, 127, 44, -50, 51, 35, -95, 42, -52, -8, 32, 27, 109, -55], [34, -16, 62, -10, -45, 61, 12, -1, 31, 6, -4, 3, -29, -25, -6, 7, 19, -38, -3, -56, 23, -18, -8, 34, -18, 9, 42, 3, -12, 38, -18, 11], [36, -1, 7, -19, 14, -22, -63, -56, 54, 11, -76, 11, -39, -33, -50, -85, 6, -71, -86, -91, -31, 13, -66, 4, 84, -25, 5, 7, -18, 47, -69, 83]], [[-116, 6, -12, -42, -62, 19, -5, 23, -57, 23, 88, 2, 45, -7, 30, 73, 11, 33, 44, 57, 39, -21, 11, 78, -27, 49, -57, -13, 23, -49, 73, -111], [-6, 1, 93, 6, 5, 24, 4, -27, 25, 71, 29, 39, 47, 30, 6, -47, -1, 7, -21, -92, 22, -25, 25, 12, -33, 24, -31, -12, 13, 0, -20, 10], [14, 4, 16, 16, 31, 11, -6, -42, 41, -2, -121, 27, -35, -28, -37, -46, -10, -5, -47, -77, -86, -28, 6, -59, 68, -25, 66, 8, -3, 6, -113, 70]], [[-76, -18, 3, -14, -53, 21, -31, 14, -10, -23, 76, -51, 32, -24, 21, -37, -6, 22, 57, -57, 28, 56, 21, 32, 26, -50, 41, -12, 9, 34, 60, -43], [-40, 9, -18, 4, 28, -40, -55, 36, 37, 32, 10, 6, 35, -16, 7, -39, -43, 49, 1, -38, -13, 44, 88, -18, 63, -19, -85, 10, 31, -26, 57, 33], [53, 16, -5, 5, 45, 30, -27, -14, 60, -2, -110, 47, -8, -57, 0, -30, 10, -2, -37, -85, -22, 6, -5, -42, -63, -2, -23, 9, -3, -16, -61, 40]]], [[[62, 26, -51, 9, 46, 54, 1, 40, -3, 63, -31, -50, 67, 24, 51, -10, 9, 71, 74, 15, 42, -29, 4, -23, 29, 48, 37, 45, 12, 35, 92, -19], [96, 65, -69, 8, 67, -13, -24, -10, -54, 25, -77, 0, -1, 60, -26, 33, -21, 40, -39, 9, 33, 4, -7, -52, 45, 2, -4, 54, 23, 50, 127, 4], [41, 40, -40, 3, 40, -21, -19, 17, -24, 56, -80, -9, 18, 20, -40, -28, -21, 30, 12, 3, -34, -13, 22, -21, 26, -24, 17, 19, 27, 11, 99, 10]], [[4, -4, -9, 14, -23, -13, 59, 30, -47, 58, -68, -32, -18, 12, -2, -28, 6, 0, 89, 59, 72, -17, 2, -33, -21, 63, 59, 40, -24, 22, 44, -33], [-1, 14, -68, 5, -34, -1, 95, 3, -114, 19, -101, 19, -45, -21, -12, 43, -20, 45, 31, 53, 21, -30, 12, -101, 6, 65, 51, 31, 28, 38, 68, -29], [22, 30, -26, 11, -24, -36, 54, 31, -63, -3, -74, -31, -15, -3, -30, 2, -17, 44, -12, 3, -69, -66, 27, -69, -16, 52, -41, 21, 18, 9, 70, -99]], [[-6, 22, -20, 7, -11, -67, 66, 14, -105, 38, -52, -45, -14, -9, 1, -22, 6, -74, 94, 63, 42, 19, -3, 4, -58, 42, 63, 17, -30, 56, -7, 5], [-25, -10, -54, -39, -2, -33, 67, 12, -65, 47, -42, -21, -70, -69, 16, -16, -21, -42, 42, 27, 20, -30, 12, -62, -94, 19, 34, -5, 40, 49, 34, -27], [3, 9, 10, -14, 36, -12, 67, 14, -47, -28, -50, -80, -53, -46, -38, -55, 17, -32, -19, -6, -30, -60, 67, -56, -61, 29, -84, 24, 38, -14, 18, -87]]], [[[-46, -6, -12, -29, -21, -10, -4, -62, -20, -93, -50, -8, -50, -32, -54, -14, -36, -58, -19, -27, -61, -39, -78, -82, -56, -33, -12, -8, -25, 6, -33, 30], [-40, 1, 37, -9, 31, -54, 8, -7, 11, -62, -57, -54, -32, -34, -8, 14, -13, -99, 32, -58, 5, -62, -112, -51, -38, -2, 59, 26, -77, 35, -93, 33], [4, 14, 17, 0, -20, -40, 13, -69, 44, -70, -59, 8, 15, -4, 27, 127, -7, -37, -31, -55, -56, 10, -45, -35, 20, 29, 26, 6, -56, 60, -91, 75]], [[-11, 6, -7, 7, -1, -42, -14, 3, -39, 16, -23, -22, -3, 47, 7, 35, 3, -6, 15, 5, 8, 24, -7, -42, 48, 16, -28, -19, 28, -14, 33, -12], [42, -10, 62, 24, 40, -50, -24, 28, -19, 13, -30, -30, -7, 37, 13, 75, 2, -12, 62, -82, 34, -22, -71, 2, 37, 31, 39, -17, 8, 7, -44, -30], [107, -4, 50, 4, 23, -67, -15, -49, -1, -25, -44, 40, 35, 39, 69, 99, 18, 23, 6, -49, -15, 24, -17, -2, 70, 54, -1, 10, 0, 41, -38, 10]], [[4, -1, -17, 38, -27, -45, 2, 26, 6, -2, -11, -32, 89, 15, -5, -16, 8, 3, -10, 47, 51, 4, 32, -9, -8, 10, -54, -5, 20, -55, 39, -66], [40, -25, -11, 72, -31, -50, -31, 58, 27, -17, -56, -40, 45, 12, 25, 46, 5, 15, 18, -12, 50, 0, -24, -43, -15, -6, 25, -35, -23, -31, 6, -74], [70, -19, -16, 22, -34, 2, -30, 0, 11, -12, -46, 29, 62, 18, 64, 114, 34, -18, 17, 20, 19, -35, -1, -25, 2, 30, -25, 4, -3, 8, 7, -78]]], [[[43, 29, -29, 11, 79, 24, -55, -24, 43, -5, -9, -32, 54, 3, -21, 18, 0, -38, -23, 67, -6, -2, 0, -18, 2, -59, 4, 20, -54, 30, 63, 6], [63, 4, -14, 11, 17, 14, 0, 14, 64, -12, -15, 13, 14, -51, -7, -15, 0, -23, 24, -58, -18, 24, 4, -46, 40, -15, -6, 10, -11, -15, 1, 42], [33, 19, -43, -3, -55, -4, -24, 43, -27, -41, -42, 41, -15, 2, 1, 12, -4, 20, 9, -35, -23, 30, -26, -51, 44, -17, 0, 13, -3, 2, 14, 108]], [[-76, 26, 47, -22, -37, 105, 11, -3, 14, -24, -12, 2, 44, 18, -13, 49, 8, -9, -39, -1, 91, 13, 8, 19, 20, -3, 5, 32, -25, 46, 61, 13], [-60, 5, 83, -78, -46, 9, 8, 99, 38, -29, 16, 2, -6, -13, -39, 73, 38, 7, 44, -22, 101, 72, 10, 13, 53, -3, 51, 25, -33, 80, -19, -28], [-52, 23, 8, -51, 85, -63, -29, 51, 33, -82, -12, 1, -73, -15, -47, 50, -33, 23, 21, 35, -12, 86, -11, -6, 45, -26, 15, 19, 54, 73, -13, 26]], [[19, 5, 86, -2, -5, 26, -34, -88, -20, 4, 61, 34, -47, 22, 28, 19, -35, -14, -25, 59, 62, 1, 23, -30, 16, 19, 6, 2, -4, 19, 17, -18], [-10, 5, 127, -92, 54, 68, -48, -39, -61, -55, 15, -17, -96, -59, -9, 23, 11, -35, -84, 13, 56, -10, -54, -36, -28, 17, 2, 8, 3, 56, -101, -105], [27, 12, 6, -74, -1, 12, -30, -16, -3, 6, 2, 27, -71, -48, -3, -20, 1, -20, -39, 55, 55, -33, 16, 12, -35, -2, -66, -5, 9, 36, -43, -97]]], [[[-99, 36, 1, -7, 0, -24, 42, 9, -20, 47, -35, -51, 8, -12, 60, 84, -50, 1, 14, 10, 31, -57, -20, 12, -51, 120, 30, 60, -67, 67, 19, -22], [-7, 50, -7, -77, -21, -29, 49, 24, -42, 36, -12, -53, -37, -34, 27, 1, -28, -6, 20, 3, -34, -51, 7, -14, -20, 75, -6, 81, -44, 79, -4, 7], [16, 78, -10, -30, -72, -48, 13, -30, -75, 48, 12, -40, 20, -22, 22, 22, -36, -75, -17, -28, -19, -30, 58, 1, -87, 77, -1, 54, -42, 50, 16, -53]], [[31, -13, -19, 21, -22, 34, -27, 57, 18, 75, 21, 18, -57, -84, 45, 103, -73, 93, -68, -77, 31, 32, -7, -28, -11, 93, -38, 14, -9, 60, -82, 5], [43, 8, -90, 17, 1, -17, -60, 47, -43, 65, -65, 37, -110, -25, 55, 13, -36, 36, -106, -78, 17, 13, -15, -54, 34, 63, -6, 53, -57, 78, -31, 24], [-31, 95, -18, -4, -42, -51, 2, 7, -23, 96, -35, 36, -6, -42, 85, -29, 9, -71, -54, -26, -29, 52, -23, -15, -16, 127, 42, 57, -18, 28, 21, -24]], [[41, 2, 70, 23, -4, 48, 54, 35, -10, 45, 5, 42, 77, -14, 26, 65, -39, 47, 21, -107, -25, 37, -79, 23, 18, 42, -68, 30, -20, 40, -60, 31], [18, 61, 1, -21, -41, 19, 24, 46, -64, 12, 52, 1, 80, -24, 50, 100, -78, 48, 60, -30, -68, 11, 21, 5, 54, 22, -55, 59, -34, 49, -13, 84], [-9, 62, -5, -26, 26, -8, -26, -32, -48, 8, 43, 14, 52, -34, 84, -27, -34, 35, 13, 45, -15, 6, 45, -25, 29, 16, -54, 34, 25, 30, -39, 73]]], [[[-23, -25, 12, 18, -73, -36, 37, -26, 19, 40, 2, 29, 0, -96, -36, -5, -71, 15, -29, -51, -52, -9, 0, -22, -127, 27, -25, -17, -26, -29, -34, 85], [-1, -14, 14, -2, -31, 0, 41, -44, -19, 23, -47, 21, 5, -90, -13, -8, -14, -32, -37, -70, -10, 14, -8, -33, -106, 32, 12, 9, -46, 15, -46, 55], [-37, 18, 53, -12, -88, 30, 68, -29, -5, -6, -16, 0, 42, -66, -20, 16, 59, 59, 33, -13, -22, 12, -64, 13, -24, 2, -32, 15, 16, -37, -18, -37]], [[2, -18, 4, 7, 48, 2, 9, 12, -3, -6, -1, 41, -30, -58, 19, 22, -35, -96, -4, -41, -53, 21, 36, -52, -72, 14, -16, 2, -32, 41, 42, 25], [59, 10, 23, 3, 105, 26, -33, -18, 21, 42, -11, -18, -39, -48, 14, 43, -14, -127, -86, -62, -7, 11, 9, -9, 13, 23, -10, 21, -58, 70, 64, -47], [39, 22, -5, -23, 30, 34, -15, -13, -3, 7, -14, -9, 15, -19, -12, -13, 55, -31, -64, -71, 11, -26, -35, 3, -1, 39, -1, 17, -52, 13, -10, -40]], [[-32, -1, 74, -12, 14, -6, -7, 0, 12, -45, -21, 58, 26, -53, 22, 16, -22, -50, -42, -8, 0, 6, 25, -27, 3, -3, -3, 8, -85, -38, 38, -61], [-36, 13, 56, -19, 92, 18, 2, -32, 0, -19, -37, 41, -21, -46, 33, 4, -16, -72, -38, -22, 19, 10, 60, -34, 48, -13, 16, 0, -74, -32, 30, -63], [-13, 2, 10, 18, 40, -6, -11, -48, -13, -61, -23, 61, -43, -18, 11, -10, 2, 23, -28, -74, 2, -32, 72, -31, 6, 15, -32, 5, -30, -43, -5, -1]]], [[[103, 4, 31, 29, 12, -2, 42, -39, 11, 48, -41, -88, -49, -3, 41, 99, 24, -1, 34, -72, 10, -31, 41, 23, -31, 48, 84, -24, -15, -7, -58, 8], [32, -77, -12, -18, 115, -22, 11, 21, -21, -60, -5, -33, -76, -24, 34, 19, -42, 5, 5, -6, -22, -114, -44, 35, 49, 11, -11, -68, -38, -12, -58, 57], [-39, -20, -65, -22, 61, -32, -2, -19, -2, -38, 47, -10, -28, -13, 17, 65, -28, -6, -43, 17, -43, -38, -10, 37, 38, 8, -19, -7, 0, -22, -4, -1]], [[-10, -21, 34, -34, 36, 10, -24, -7, 51, -19, 18, 17, -77, -10, 47, 108, 46, -57, 46, 16, 35, 66, -17, -10, 17, 30, 12, -12, -26, -18, 0, -48], [-33, 15, -31, -22, 35, -45, -17, 26, 30, -18, 25, -46, -33, 18, 62, 85, 111, 52, -1, 19, 25, 47, -53, -1, -13, 3, -25, 1, 96, 46, 17, -101], [8, -1, -3, 7, -25, 12, 18, -1, 76, 80, 22, -11, -37, -1, -39, 0, 112, -29, -32, -61, 21, 62, -92, 21, -28, -5, -25, 19, 18, 8, -16, -65]], [[-12, 35, 24, 31, -85, -73, -52, -13, 53, -88, 9, 29, -14, -15, -19, 59, -4, -12, 17, -13, 1, 117, -17, -2, 29, -23, -76, 51, 51, -34, -1, 34], [-23, 64, 14, 65, -127, -4, -40, 1, 36, 10, 26, 50, 31, 6, -74, -21, 35, 88, 20, -57, 10, 83, -10, -65, -27, -9, -82, 58, 74, 23, -35, -31], [36, 16, 14, 38, -44, 48, -12, 30, 19, 67, 10, -10, 15, -12, -25, -74, 55, -34, -4, -82, -14, 33, -79, -28, 13, -8, -10, 8, 26, -38, -35, 60]]], [[[47, 4, -18, 12, -14, 90, -3, -80, -57, 24, -46, -48, 11, 14, -30, -102, 55, -42, 1, -71, 102, 65, 30, 21, -4, -17, 23, -19, -10, -37, 52, -32], [9, -33, -1, -4, 31, 41, -18, -58, 0, -2, -69, 7, 13, 40, -22, -111, 4, -19, -58, -11, 16, 34, 35, -22, -37, -8, 28, -36, -7, -39, 20, -33], [7, -25, 9, 9, 30, -25, 13, -16, 51, -28, -25, -17, 7, 39, -14, -69, -61, 48, -38, 10, -51, -9, 127, -29, -53, -3, -31, -17, 21, -12, 2, -2]], [[11, -7, -3, -31, 14, 26, 44, -38, -31, 40, -60, -23, -41, -32, -39, -44, 38, 11, -50, -20, 23, 53, 35, -12, -14, 13, 41, -34, 36, 3, -13, -50], [22, -54, -23, -37, 29, 33, -3, -73, 21, 16, -95, 6, -59, -75, 1, -94, 51, -32, -64, -19, -16, 64, 39, -6, -16, 58, 27, -27, 19, -25, -76, -71], [11, -15, 31, -5, -31, 18, 0, -44, 30, 12, -46, 22, -19, -10, -19, -72, 35, -18, -49, 50, -2, 46, -23, -33, 14, 23, -17, -5, 19, -30, -28, -31]], [[5, -2, 25, -10, -1, 45, 5, -11, 17, 20, -43, -48, -9, -17, 2, 27, 22, 53, -104, 47, -7, 37, 44, -39, 9, -2, -5, -4, 80, 4, 1, 1], [40, 1, 11, -54, 25, 24, 2, -11, 37, 6, -77, 5, -39, -35, 29, -4, 52, 28, -108, 18, -10, 13, 49, -21, 15, 19, -10, -6, 17, -5, -31, -52], [50, -14, 24, 4, -12, 63, 22, -21, 55, 15, -64, -18, -9, -5, -40, -67, 75, -58, -32, 65, 10, 1, -4, 2, -24, 28, -72, 16, -50, -11, 59, -54]]], [[[-31, -13, 2, -24, 56, 15, 3, -3, 26, -39, -14, -30, -40, -44, 45, -75, -5, -32, -13, -5, -24, 30, -56, -23, -24, 23, 31, -1, -47, 40, -48, -75], [-1, 4, 66, -53, 68, 11, -24, -5, -4, -46, 24, -54, -7, -31, 26, -21, 5, -40, -38, -67, -7, 50, -15, -39, 9, 20, 25, 21, -33, 9, -46, -58], [19, 28, 127, -48, 24, 24, 48, -25, -17, 24, 35, 7, -14, -4, -17, -41, 39, -28, -54, -29, 21, 8, 28, -23, 18, -2, 22, 15, 5, -46, 18, -19]], [[8, 24, 37, -14, 48, 35, 15, -22, -46, 30, -2, -6, -20, 4, 23, -114, -27, -77, 40, -64, -17, 11, -4, 47, -17, 12, 15, 4, -24, 41, -43, -32], [-26, 29, 34, -30, 77, 1, -29, -20, -42, 9, 37, -51, -44, -23, -20, -10, -34, 1, 34, -75, -11, 35, -5, 30, 17, 2, 2, 31, -20, 58, -33, 8], [-22, 46, 45, -6, 9, 5, 15, -24, -1, 78, 39, -11, -18, 31, -64, -54, -7, 29, 16, -32, 0, 16, 41, 11, 37, -17, -31, 30, 29, 22, -8, 47]], [[0, 24, 68, -16, 29, 31, 41, 5, -61, 40, -38, -56, -24, 17, -14, -51, -17, -4, 55, 1, -15, -41, 41, 41, -97, -8, -28, 36, -12, -22, 28, -11], [-19, 16, 36, -15, 29, 5, 52, 0, -26, 45, -17, -52, -30, -6, 1, 25, -33, 24, 48, -22, 21, 4, 55, 36, -83, -1, -32, 13, -4, 3, 6, 5], [-25, 20, 45, 3, -56, 10, 59, -34, 4, 74, 38, -42, 23, 13, 4, -6, -3, 68, 27, 1, 5, 13, 55, 5, -75, -13, -73, 1, 8, -11, 22, 5]]]]> : tensor<32x3x3x32xi8>, "sym_name" = "__constant_32x3x3x32xi8", "sym_visibility" = "private", "type" = memref<32x3x3x32xi8>}> : () -> ()
  "memref.global"() <{"alignment" = 64 : i64, "constant", "initial_value" = dense<[10692, 1609, 15068, -15202, 20910, 11386, -8000, 22468, 9265, 7960, -2823, 9980, 1113, -8213, 18091, 4395, 5798, -5389, -14398, 1231, 3858, -6201, 4093, 7956, 3232, 764, 26485, 1480, 5560, 12065, -1654, 6881]> : tensor<32xi32>, "sym_name" = "__constant_32xi32", "sym_visibility" = "private", "type" = memref<32xi32>}> : () -> ()
  "memref.global"() <{"alignment" = 64 : i64, "constant", "initial_value" = dense<[[[[-25, 5, -12, -46, -14, -70, 14, -50, -77, 23, 11, 29, 4, 37, 21, 37], [-46, 3, -4, -50, -19, -65, 15, -70, -55, 40, 4, 15, 14, 60, 38, 37], [-26, 12, 13, 39, -25, 50, -8, -20, -15, -21, 1, -4, 15, 29, 11, 11]], [[16, -21, -39, -30, 17, -75, 6, -40, -14, -38, -50, 4, 23, 38, 22, -13], [-23, -7, -49, -62, 33, -125, 29, -83, -48, 3, -56, 16, 23, 51, 20, 30], [-52, 7, -11, -30, 16, -29, 1, -62, -42, -20, -17, 4, 20, -6, 2, 48]], [[70, 6, 16, 33, 40, -26, -57, 16, 33, -41, -72, 29, 25, 45, 31, 15], [5, 33, -22, -1, 34, -127, 15, -35, -14, -15, -32, 42, 4, 50, 35, 75], [-41, 51, -20, -28, 11, -64, 20, -43, -57, 21, 25, 45, 9, 1, 56, 73]]], [[[12, 15, -62, 0, 69, 15, -55, 5, -21, 16, -21, -37, 11, -13, 11, 8], [2, -6, 59, 8, -101, 6, 11, -7, 24, -17, 36, 12, 2, -7, -19, -10], [2, -10, 6, 1, 9, -9, 17, 3, -4, 22, -18, 11, 5, -6, -24, 0]], [[-32, 51, -109, -22, 99, 16, -50, 16, -22, 23, -56, -15, 2, -7, 22, 28], [7, -27, 84, 33, -127, -22, 71, -24, -4, -34, 47, 4, -8, 4, -18, 2], [18, -3, 0, -11, 24, -14, -12, 14, 5, 19, -18, 16, -7, 4, -12, 14]], [[-23, 22, -37, -11, 59, -8, -14, 19, -15, -20, -19, 14, -6, -5, -7, 6], [0, -2, 17, 14, -44, -5, 27, -33, -5, -17, 21, -13, -7, -2, 6, -30], [20, -3, 4, -20, 10, 6, -15, 9, 19, -9, 12, -2, -7, -16, 12, 5]]], [[[0, 5, 35, -19, -17, 32, -11, 60, -104, -38, -63, -8, -38, -2, 32, -13], [-52, 5, 30, 33, -46, 24, -6, -19, -113, -16, -100, 29, -40, 16, 12, 38], [-34, -8, -3, 16, -39, 2, -27, -36, -56, -39, -52, 25, -20, 14, -4, 38]], [[31, 7, 0, -43, -14, 29, 9, 69, -74, -18, -25, 5, -23, 11, 30, -70], [-2, 17, 15, 8, -62, 36, 33, 49, -127, 19, -66, 54, -43, 32, 33, -37], [-15, 25, 3, 29, -70, 45, 1, 12, -68, -15, -43, 58, -42, 25, 3, -1]], [[25, 15, 10, -90, 3, 13, 6, 23, -20, -6, 5, 1, 39, 33, 17, -7], [6, 22, 29, -33, -1, 14, -6, 53, -59, 30, -32, 13, 22, 21, 39, -61], [-44, 17, 17, -6, -18, 20, -47, 34, -50, -2, -58, 19, -9, 1, 4, -17]]], [[[44, 32, -16, 127, 15, -61, -10, 58, 3, 41, 70, 4, 12, -25, -73, -12], [-4, 22, 16, 29, -4, 12, -27, 37, 49, 56, 44, -5, 44, -3, -59, 50], [-37, 9, 33, -30, 21, 40, 3, -16, 16, -26, -65, -19, 3, 24, 7, -39]], [[93, 32, 17, 81, -41, -90, -30, 20, -46, 5, 109, 7, -1, -41, -19, 53], [-11, 29, 8, -1, 10, -9, -35, -1, 64, 75, 47, -5, 54, 14, 10, 96], [-44, 30, 16, -31, 37, 49, 29, -31, 39, -18, -55, 2, 30, 45, 30, 9]], [[88, 62, 25, -33, -21, -71, -66, -35, -65, -15, 49, 9, -25, -11, 0, 84], [-27, 39, 37, -42, 50, -42, -39, -19, 39, 53, 10, -1, 13, 6, 47, 62], [-76, 32, 28, -59, 101, 9, -11, -51, 1, -9, -27, 17, 10, 25, 35, -23]]], [[[-24, 0, 20, 5, 13, -5, -49, 31, 49, -1, -30, -5, 1, 10, -2, 8], [-59, 1, 1, -77, 2, -30, -22, -7, -58, -10, -1, -46, -46, 20, 56, -9], [-8, -5, -17, -100, -17, -25, 21, -21, -127, -37, 33, -21, -33, 15, 42, -9]], [[-40, 25, 41, -30, -18, 25, -55, 6, -31, -4, -2, -32, 13, 2, 58, 6], [-48, 45, 11, -29, -33, 17, -17, 17, -95, 6, 55, -37, -34, -10, 82, 17], [-23, 22, -16, 3, -29, -2, 24, 1, -51, 6, 45, -8, -4, 4, 35, 32]], [[-85, 11, 25, -82, -68, 42, -57, -12, -55, -18, -4, -49, -7, -12, 35, -9], [-59, 21, 6, -28, -80, 34, -26, 7, -63, -7, 33, 6, -58, -14, -18, 27], [-30, 7, -12, -9, -28, 0, -2, 20, 22, -11, -11, 20, -47, -3, -66, 5]]], [[[2, -30, -55, -59, -14, -60, -9, -13, 3, 1, 45, 57, -77, 59, 52, -3], [5, -26, -36, -11, -52, 46, -16, -45, -46, -6, -1, 51, -41, 86, -14, -52], [25, -12, -6, 52, -46, 67, -3, -35, -3, -7, -9, 19, 35, 34, -29, -14]], [[-8, -35, -13, -9, -19, -125, 38, 29, 62, -19, -3, 6, -15, 101, 39, -3], [-8, -57, -28, -45, -15, -72, -20, -23, 31, 4, 33, 14, -60, 127, 34, -47], [43, -39, -3, -5, 20, 41, -39, -60, -13, 13, -8, 29, -18, 86, -17, -36]], [[-32, 25, 18, 34, -14, -32, 8, 4, 19, -43, -37, -53, 48, 25, -9, 39], [-64, 4, -22, -42, -24, -55, -3, 3, 63, -38, -4, 10, -27, 55, 19, 31], [-20, -29, -30, -37, -13, -23, -13, -34, 11, -7, 28, 21, -91, 38, 11, -6]]], [[[15, 19, 7, 44, 40, 11, 16, -37, -10, 27, 10, 1, 60, 9, 42, -49], [16, -3, -12, 87, 44, -44, 22, -82, 71, 57, 50, 12, 60, -11, 10, -19], [3, -3, -15, 1, 9, -6, 22, -66, 69, 37, 64, -4, 26, -10, 6, 32]], [[-2, 36, -1, 14, 33, -24, -15, -12, -52, 6, -6, -19, -25, 19, 35, 59], [18, 11, 1, 68, 32, -100, -23, -62, 9, 51, -19, -5, -12, -9, -2, 67], [53, -1, -1, 15, -18, -62, -15, -68, 0, 49, 3, -21, -29, -12, 2, 23]], [[-70, 4, -36, 14, 19, 79, 44, 54, -29, -127, -15, -17, -11, 57, 28, -24], [-79, 4, -63, 84, 54, 7, -33, 84, -3, -54, 25, 1, 70, 44, -19, 17], [-78, 13, -23, 47, 43, -51, -70, 42, 16, 10, 16, -8, 69, 4, -6, -5]]], [[[1, -10, -8, 41, -75, -26, -91, 0, -17, 37, 26, -43, -66, -48, 5, 35], [-41, -46, -42, 95, -76, -15, -46, 30, 13, 2, -38, -50, -118, -57, -72, -23], [12, -6, -25, 83, -50, 16, -53, 42, 20, 41, -48, 61, -75, -11, -62, -2]], [[7, -37, -47, -10, 35, 21, -21, 63, 3, 35, -40, -33, 63, -55, -7, -57], [-51, -92, -77, -33, 85, -15, 32, 57, 46, 3, -62, -63, 36, -80, -58, -127], [-12, -15, -26, -11, 53, 28, 19, 70, 40, -11, -54, 24, 59, -39, -20, -55]], [[-12, 27, -12, -82, 60, 42, -90, -1, -76, -42, -3, 22, 73, -18, 41, -72], [-99, -10, -30, -93, 78, -5, -13, 2, -76, -37, -33, -3, 75, -46, 30, -28], [-60, 18, 5, -89, 36, 22, -32, 27, -77, -31, -8, 64, 71, -9, 38, 73]]], [[[-37, -16, 71, -8, 17, -9, 41, 89, 0, 8, 36, 4, -32, -98, -31, -72], [-31, 2, 66, 76, -11, 34, -14, 4, 2, 6, -13, 17, -76, -91, -25, 1], [-5, -9, 24, 46, -17, 67, -41, -21, 30, -15, -35, 3, -37, -29, -8, 19]], [[-81, 29, 63, -14, -4, 18, -58, 65, -64, 15, 25, -10, -21, -127, 14, 34], [-71, -9, 84, 67, -70, 9, -60, -23, 22, 9, -14, -1, -57, -106, 39, 4], [-5, -52, 26, 27, -55, -11, -24, -30, 21, -16, -7, -4, -38, -36, 30, 9]], [[-28, 4, 39, -37, -16, 5, -73, -19, -25, 12, 24, 15, -3, -51, 18, 61], [-21, -24, 9, 16, -18, -38, -42, -43, 23, -26, 6, -14, 17, -43, 9, -20], [39, -11, -22, -20, 1, 8, 32, -25, 3, -19, -7, -21, 56, -7, 10, 14]]], [[[-43, -36, 25, -8, -31, -27, 15, -43, 86, -19, -92, -109, 26, -32, 81, 67], [-41, -27, -4, -49, -55, -5, -35, -23, -20, -17, -76, -54, -11, -3, 32, 43], [-46, 3, 3, -85, -59, 51, -35, -4, -7, 19, -10, -61, -20, 3, 7, 8]], [[-6, -17, 25, 25, -19, 5, 127, -32, 87, 29, -70, -123, 53, -22, 46, 58], [-2, -8, 9, -13, -31, -10, 52, -27, 49, 10, -113, -79, -8, 4, 33, 22], [-23, -13, 9, -64, -35, 34, 33, -25, 20, -34, -94, -91, -3, 9, 18, -26]], [[0, 30, -6, -20, 5, 11, 31, 15, 74, -1, -85, -18, 14, 3, 15, 89], [-33, 12, 3, -17, -47, -29, 5, 7, 23, 4, -72, -37, -47, 6, 6, 17], [-48, -11, -13, -68, -46, 37, 9, -30, -10, -25, -54, -82, -22, 8, -6, -1]]], [[[18, 12, 23, -35, 20, -44, 22, 81, -6, 25, -23, 15, -40, -8, 11, -34], [66, -13, 53, -46, 64, 43, 12, 85, -37, -16, -25, 43, -42, 14, -33, 48], [80, -22, 20, -46, 41, 52, 23, -9, -36, -47, 32, 38, 29, 21, -51, 98]], [[94, 18, 58, -59, 38, 73, -14, 20, -14, -7, -35, 27, 24, 8, -45, 109], [70, 8, 84, -91, 35, 57, -7, -91, -54, -37, -30, 11, 61, 12, 17, 97], [12, 45, 48, -46, 35, 12, -32, -59, -96, -62, 43, -46, 84, -20, 46, -8]], [[51, -23, -7, -73, -2, -12, 43, -68, -47, -54, -127, -86, 50, -3, -37, -2], [10, 25, 46, -41, 5, -15, 5, -75, -89, -46, -80, -68, 82, -56, 1, -78], [-29, 17, 18, -27, -25, -66, -31, 5, -84, -14, 69, -76, 5, -86, 19, -35]]], [[[-27, -58, -16, 5, -10, -3, 18, -59, -10, 4, -3, 7, 20, -39, -27, -33], [-14, -51, -13, -4, 21, 25, -48, -86, 5, -35, -44, 49, 18, 34, 1, 14], [-36, -26, -4, 50, 10, -57, 8, -42, -33, -30, -41, 44, 10, 56, -24, -1]], [[30, -4, 5, -17, 19, -64, 96, 9, 24, 81, 45, 17, -4, -44, -29, -24], [26, -31, 21, -24, 6, 20, 7, -35, 48, 0, -14, 29, 9, 59, 6, 53], [50, -23, -12, 7, 38, 37, -14, -7, 23, -34, -60, 71, 19, 104, -30, 37]], [[-13, -12, 3, -9, -41, -127, -16, -38, -75, 41, 16, -43, 2, -48, -43, -54], [-39, -27, 0, -27, -68, -79, 6, -46, -7, -52, 1, -31, 35, -3, -1, 1], [7, -20, 12, -21, -52, -21, -26, -35, 26, -75, -71, 18, -5, 39, -24, 66]]], [[[-29, 11, 100, -53, -22, 51, -13, 39, -7, 46, -20, -35, 17, 11, 3, 83], [37, 45, 63, 51, 6, -19, 20, 4, -24, -3, -16, 44, 45, 40, -8, 46], [38, 4, -23, 88, 33, -14, 48, 8, -6, -83, -3, 50, -56, 11, 3, -79]], [[-48, 0, 68, -114, 0, 32, -27, 59, -44, 58, -50, -72, 6, 22, -10, 87], [21, 13, 73, -34, 33, 3, -5, 27, -38, 46, -87, 30, 47, 62, -4, 19], [54, -18, 29, 36, 28, -7, -23, -3, 3, -31, -42, 40, -68, 17, -3, -88]], [[-68, -18, 7, -80, 35, 13, -41, 44, -60, 29, -100, -66, 46, 32, 7, 75], [-29, -15, 60, -2, 62, 15, -36, 24, -71, 59, -127, 41, 82, 31, 18, -10], [-38, -12, 48, 39, -13, -14, -38, -1, -17, 27, -69, 3, 7, 5, -18, -94]]], [[[-71, 35, -45, 22, -49, 47, 63, -24, 66, -22, 15, -79, -49, 30, 55, -42], [-35, 8, -3, 17, -1, 61, -31, -14, 16, 67, 20, 31, -14, 22, -53, 21], [-16, 36, 1, 36, 59, -46, -33, 23, -17, 43, 58, 59, -70, -32, -97, 66]], [[-26, 43, 65, -8, -39, -34, 127, -10, 83, -25, -25, -88, 39, 31, 62, -91], [-21, 12, 40, -12, -40, 20, 13, -29, 21, 76, 31, 36, 37, -7, -55, 30], [62, 63, 10, 39, 54, -3, 12, 29, -13, 78, 105, 81, -19, -21, -115, 69]], [[-36, 2, 54, -43, -38, -36, 28, -19, 36, -79, -95, -36, 53, 0, 51, -56], [-67, 53, 36, -80, -64, -3, 1, -21, 15, 16, -32, 13, 44, -11, 11, 4], [22, -20, 35, -7, 3, 33, -3, -2, 14, 21, 47, 31, 27, -16, -70, 35]]], [[[-33, -27, -42, -42, 10, 18, 10, 70, 22, -99, 54, -23, -20, 2, 34, 28], [-70, -83, -50, -10, -51, -34, -25, 28, -8, -127, 75, -34, -29, -24, 55, -11], [-61, -110, -35, -24, -46, -22, -21, -13, -67, -98, 35, -59, -20, -32, 14, -10]], [[98, -63, -7, 3, -37, 29, -13, 40, 77, 24, 69, -34, -76, -3, 7, 1], [89, -94, -28, -12, -66, 0, 8, -4, 38, 41, 72, -73, -115, -36, 4, -2], [29, -71, -13, 3, -18, 27, 24, -36, -10, 19, 9, -74, -104, -11, -59, -23]], [[70, -53, -22, -2, 12, -14, -59, 53, 30, 37, -12, -70, -15, -15, -60, 17], [19, -50, -11, 10, 5, 19, -70, -8, 40, 18, -29, -9, 45, -19, -35, 5], [-21, -39, 19, 9, 29, 54, -36, -21, 11, -26, -45, -2, 58, 8, -11, -58]]], [[[-9, 3, 0, -9, 37, 46, 2, -26, -54, 4, -21, -8, 61, -18, -5, -44], [-1, -24, 7, -19, 17, -30, -14, -32, -25, 57, 2, 8, 52, -96, -70, -59], [-76, -37, 16, -41, 4, 31, -16, -27, -19, -1, -4, -57, 47, -55, -100, -31]], [[-19, 5, -6, 5, 25, 125, -10, 19, 25, -86, 4, 11, 19, -15, 29, -34], [20, -2, 26, -12, -3, 71, -21, -35, 28, -3, -29, 88, -2, -79, -50, -23], [-70, -8, 18, -26, -9, 52, -15, -88, -34, -48, -28, 30, -59, -26, -83, -15]], [[97, 39, -11, 9, 31, 91, -3, -1, 23, -66, 47, -1, 4, 9, 54, 18], [127, 17, 22, -15, -8, 65, -16, 11, 54, 8, -24, 81, 12, -9, 21, 26], [2, 18, 21, -14, -27, 50, -10, -51, -45, -30, -47, 1, -50, 28, -23, 23]]], [[[97, 3, -59, 21, -15, 11, -93, -42, 55, -23, 20, -4, -28, 15, -19, -11], [14, 38, -66, 1, 12, -22, 46, -27, -68, -105, -47, -33, -38, 68, 0, -49], [-127, 39, -15, -10, 31, -33, 96, 33, -1, -39, -21, -102, 8, 50, 31, 57]], [[11, -9, -6, 23, -68, 9, -60, -23, 96, 91, 60, 100, 4, 52, 13, -33], [82, 32, -90, 15, -8, 33, -49, -78, -25, -8, -25, 77, -20, 107, -12, -25], [48, 58, -93, -47, 50, -17, 110, 7, -93, -63, -61, -35, -22, 106, 4, 62]], [[-94, -3, 28, -29, -29, 15, 7, 30, 36, 42, 44, -15, 4, 23, -4, -33], [-14, -15, 47, 37, -35, 26, -76, -43, 41, 56, 25, 55, -16, 57, -30, -57], [103, -4, -32, -33, 28, -27, -19, 26, -74, -19, -30, 61, -11, 78, -43, -21]]], [[[-55, 28, -6, 20, -28, 43, 54, 24, 9, -13, 44, 16, 16, -5, 0, 27], [-86, 26, 2, 103, -5, -39, -28, -46, -45, -3, 23, 18, 58, -4, 36, -78], [-110, 23, 12, 53, 44, -57, -20, -20, -63, -98, 29, 21, 72, -2, -15, -92]], [[22, 72, -31, -19, -2, -5, 47, -6, 46, -34, 40, 87, 127, -17, 58, -91], [-17, 17, -13, 70, 37, -2, -9, -18, 13, -72, 55, 106, 98, -18, 70, -123], [-31, 15, -15, 62, 46, 2, 3, -3, -70, -80, 27, 64, 99, 20, -11, -36]], [[85, 30, 16, 44, -34, 24, -10, 4, -53, -85, 19, 49, 62, 21, 76, -107], [24, 8, 29, 73, -24, -14, 19, -4, -59, -29, 19, 72, 41, 10, 89, -4], [-5, 8, 18, 71, -63, 18, -26, -16, -113, 19, 18, 9, -21, 41, 35, 55]]], [[[63, -23, -27, -8, -8, -127, -63, 0, -58, 57, 24, -15, -9, 42, 52, 55], [-12, -8, -6, 25, -2, -72, -38, -39, -17, 54, 29, -69, 28, 11, 37, 36], [-35, -15, 16, 6, -8, -42, -57, -33, -34, 1, 34, -75, 26, -27, 7, 7]], [[111, -13, -46, 10, -34, -53, 16, 71, -11, -7, 28, 14, 52, 44, 14, -5], [53, 6, -49, 54, -23, -34, 50, 85, 28, 16, 57, -18, 17, 7, 51, -15], [37, 28, -29, 37, -2, -26, 64, 0, 1, 59, 54, -21, 0, -32, 42, 24]], [[66, 55, -31, -35, -41, 31, 46, 99, -32, -95, -21, 0, 35, 37, -48, -34], [10, 16, -54, 44, -60, 65, 78, 122, 39, -35, -24, 13, -22, -2, -9, -55], [52, -27, -21, 84, -27, 24, 80, 88, 75, 24, -39, 9, -104, -30, 9, -28]]], [[[-68, 4, -43, 75, -53, -72, -67, -7, 33, -46, -37, -67, -79, -10, 38, -6], [31, 9, -56, 62, 24, -1, 30, 73, 108, -37, -77, -75, -34, -14, 55, -79], [45, 43, 9, -61, 83, 106, 42, 74, 110, -88, -58, -9, 32, -3, 46, -23]], [[-20, -12, -30, 34, -16, -63, -41, 29, 1, -11, -29, -10, -39, -63, 58, -35], [31, 11, -7, -8, 14, -19, -5, 97, 67, -3, -46, 34, 22, -81, 120, -15], [48, 59, 10, -127, 33, 81, 24, 124, 102, -34, 7, 98, 38, -40, 84, 13]], [[-21, -34, 49, 6, -19, -62, -76, -19, -62, -79, -12, 44, -92, -56, 68, 25], [32, 6, 55, -37, -28, -54, -64, 30, -20, -7, 1, 16, -32, -54, 94, 76], [5, -4, 34, -70, -34, 46, -55, 77, 9, -5, 8, -18, -16, -26, 22, 79]]], [[[2, 17, 8, -24, -27, 51, 66, 5, 36, -54, -11, 4, -12, 3, -56, 106], [-14, -6, -14, 7, 1, -4, -17, -6, 58, -107, 8, -3, 21, 22, -74, 46], [-27, -26, 1, 13, 19, -26, -57, -6, 70, -67, -13, 51, 31, -14, -21, -57]], [[12, 59, -1, 4, -61, 28, 24, -56, -20, -18, 48, 8, -8, 3, 5, 65], [-75, 38, -20, 9, -79, 23, 49, -34, 2, -69, 2, -78, 16, 17, -97, 107], [-63, -18, -9, -17, -7, 14, 20, -9, 37, -94, -41, -63, 50, 8, -98, 101]], [[-3, 32, 19, 22, -16, 4, -5, -10, -10, 56, 12, 101, 23, 16, 35, -20], [4, 55, -19, 19, -62, 0, 46, -18, -76, 5, 19, 23, -43, -17, 28, 35], [-35, 17, -5, 8, -55, 15, 61, -30, -89, -24, 29, -8, -2, -24, -3, 127]]], [[[-53, 91, -7, -63, 22, 120, -46, -16, -25, -70, 46, 28, -47, 1, 4, 56], [37, 41, -54, -31, -20, 101, -81, -20, -56, -10, -48, 83, -61, -28, 120, 100], [116, 17, -48, 33, -42, 16, -7, -63, -56, -2, -69, 98, 11, 2, 96, 108]], [[-41, 16, 13, 14, 22, 116, -6, -68, -64, 32, -17, -58, 6, -40, 52, 14], [17, 5, 12, 43, 13, -24, -17, -81, -18, 51, -43, -46, 44, -96, 127, -1], [51, -8, 7, 61, 14, -89, 39, -69, -2, 77, -19, -30, 67, -6, 42, -13]], [[32, 20, 34, 30, -9, -34, -20, -46, 51, 45, -31, 34, -23, -1, 65, 15], [65, 22, 60, 6, -36, -115, -9, -40, 20, 52, -16, 16, 7, -18, 27, 21], [31, -12, 43, 10, -39, -79, 3, -33, -23, -8, 6, -18, 2, -28, -37, 93]]], [[[34, 18, 19, 31, -15, 26, -78, 60, -3, 24, -47, 43, 49, 42, 18, 29], [6, -59, 24, -51, 21, -22, -76, 53, 0, 1, -54, 60, -50, -21, -13, 79], [-45, -83, 6, -77, 28, -35, -37, 51, -23, 20, 8, -5, -22, -17, -16, 103]], [[-6, 20, 8, -71, 25, -5, -98, 79, 22, 40, -24, 110, 16, 51, -33, 58], [-21, -56, 21, -64, 14, -30, -22, 38, 12, 45, -6, 75, -54, -36, -17, 79], [-93, -72, 35, 4, 9, -65, -19, 21, -2, 42, 37, 40, -50, -47, -7, 42]], [[-94, 47, -3, -63, 22, -11, -34, 22, -17, -9, 6, 127, 18, 23, -63, 82], [-47, -8, -6, -13, 12, -27, -2, 11, -30, 3, -17, 88, -49, -24, -32, 30], [-85, -40, 17, 27, 11, -65, -1, -28, -52, 18, 22, 6, -44, -28, 3, -10]]], [[[-49, 16, -23, -77, 15, 7, 11, 21, 14, -13, 5, -41, -49, -16, -29, -52], [-90, 6, -31, -72, 14, -34, 27, 25, -31, 28, 15, -55, -84, -19, -31, -78], [-20, -4, -16, -4, 32, -51, 27, -47, -32, 121, 51, -6, -1, 1, -62, -6]], [[13, 10, 48, -20, 17, 27, -40, -16, 23, -63, -43, -18, 23, -1, 13, 38], [-33, 5, 31, -62, -15, -11, 20, 47, -7, -53, -62, -36, -39, 33, 31, -7], [-66, -1, -5, 4, -20, -50, 81, 20, -46, 17, 4, 24, -19, 27, -11, -54]], [[40, 25, 20, 19, 17, 4, -28, -60, -17, -31, -16, 55, 83, 15, -20, 93], [83, 68, 33, -83, 15, 37, -87, 8, -13, -86, -50, 4, 40, 54, -9, 127], [84, 41, 27, -58, 16, -21, -29, 24, -58, -89, -59, 4, 5, 50, -10, 47]]], [[[-66, 10, -7, 35, -24, -28, -33, -97, -2, -2, -15, -32, 30, 15, 7, 2], [-23, -6, 3, 5, 2, 29, 1, -66, 11, -1, -37, -12, -25, 44, 3, 20], [-51, 33, -8, -60, -9, 29, 17, 0, -16, -29, 0, -6, -36, 37, 7, 19]], [[1, -21, -36, 97, 42, -61, -5, -127, 1, 65, 50, -74, 73, -6, -19, -34], [23, 4, -30, 104, 32, -10, 2, -88, 35, 49, 27, -51, 40, 8, -23, -11], [6, 29, 12, 45, -11, 35, 5, -11, 24, -26, 12, 4, 33, 16, 22, -20]], [[59, -5, -28, 9, 20, -14, -15, -36, -33, 48, 57, -69, 24, 7, -37, 2], [82, 26, -12, 43, 5, 21, -25, -18, 2, 56, 29, -25, -8, 20, -50, -2], [21, 23, 19, 6, -7, 66, -37, 4, -5, -28, -27, 9, 9, 17, -4, -24]]], [[[30, 30, 18, 7, -3, 4, 6, -38, -39, 28, -20, -11, 2, -27, 14, -33], [28, 33, 5, -4, -23, -16, 18, -94, -26, 45, -41, -2, -49, -33, -56, -26], [3, 40, 2, 7, -10, 7, 9, -89, -44, 52, 1, 23, -50, -3, -63, 20]], [[-87, -28, -13, 7, 11, 0, -17, 72, 40, -82, 54, 15, 29, 22, 17, 77], [-60, -54, 10, 13, 19, -8, -17, 120, 25, -127, 91, 4, 96, 11, 74, 75], [-49, -32, 23, 7, 4, -21, 19, 88, 41, -63, 14, 15, 108, -7, 54, 16]], [[42, 12, 0, -9, 9, -10, 29, -72, -18, 62, -43, -3, -3, -8, -12, -74], [50, 25, -24, -6, 0, -17, 1, -67, 11, 91, -63, -4, -38, -12, -51, -62], [5, 14, -15, -35, 4, -38, 12, -53, -9, 38, -61, -18, -47, -3, -29, -22]]], [[[58, -63, -62, 9, -13, -9, -41, -79, -55, -9, -35, -52, 33, -21, -98, -53], [6, -113, -81, 81, -25, -24, 9, 25, -7, 12, -13, -29, 7, -67, -95, -67], [50, -74, -35, 14, -37, 67, 72, 5, -38, 4, 5, -30, -12, -68, -26, -15]], [[65, -8, -46, -38, 40, -18, 19, -67, -10, -67, -2, 61, 30, 57, -5, 35], [-17, -77, -112, 17, 20, -43, 61, -34, -6, 11, -19, 47, -19, 14, -75, -19], [-13, -113, -110, 9, -38, 41, 111, -21, -9, -1, -16, -2, -33, -41, -60, -48]], [[4, 26, 16, -79, 9, -2, -12, -34, -27, -63, -18, 27, 2, 90, 43, 80], [-39, -66, -55, -13, 0, -8, 30, -57, -60, 0, -54, 10, -9, 43, 18, 40], [0, -127, -100, -48, -22, 3, 29, -48, -6, 12, -93, -42, -13, -22, -58, -43]]], [[[18, -16, 1, -2, -8, -1, -3, -11, -1, 8, 8, 30, -12, 5, 4, -2], [-11, 15, -51, 10, 91, 12, -54, 18, -19, 3, -38, -53, 11, -6, 11, -3], [15, -35, 65, 9, -100, -14, 28, 0, 24, 7, 35, 25, 5, -23, -34, 4]], [[0, -10, 7, -31, -17, -11, 20, -2, 5, 27, 14, 34, -15, 16, 2, -3], [-36, 51, -127, 9, 104, 23, -67, 25, -51, -8, -83, -54, 11, -8, 37, 24], [25, -40, 103, 24, -112, -29, 64, -25, 35, -6, 45, 23, -6, -12, -38, -2]], [[1, -24, 20, -31, 2, -4, 12, 5, -4, -5, 27, 9, -17, -2, -6, -11], [-25, 17, -51, 8, 67, 4, -25, 19, -29, -38, -46, -10, -5, -10, 9, 1], [16, -18, 31, 5, -48, -2, 28, -21, 36, -8, 28, -5, -4, 1, -1, -12]]], [[[-51, 16, -35, 41, 11, -28, 55, -5, 13, -78, 7, 52, 127, -7, 13, -42], [-48, 42, -32, 24, 15, -27, -1, 45, -73, -45, 7, 59, 35, -55, -11, -69], [15, 13, 0, -21, -27, 31, -69, 15, -15, 21, -16, 10, -87, -37, -56, 68]], [[-19, 78, -30, 13, 54, -48, -2, 10, -27, -53, 42, 66, 77, -9, 9, -51], [51, 78, -31, -29, 18, 16, -29, 44, -24, 23, 9, -15, -61, -43, 39, 42], [67, 27, -3, -22, -68, 41, -7, -29, 19, 71, -49, -116, -102, -16, -40, 92]], [[-33, 33, -9, -22, 32, -21, -25, -2, -46, -27, -1, -34, -33, -10, 14, 2], [36, 10, -5, -65, -11, 32, -13, 23, 21, 32, -53, -64, -73, -16, 24, 59], [11, 9, -25, -19, -26, 43, 25, -42, 30, 25, -42, -60, 17, -2, -8, -11]]], [[[64, 65, 62, 29, -9, 42, 36, -51, 27, -10, -8, 76, -7, -17, 14, 17], [6, 73, 54, -44, -71, 35, 4, -19, -22, -25, 19, 73, -18, -61, -73, -27], [7, -5, 21, 11, -68, 95, -43, -6, -70, -73, -37, 10, 1, -50, -63, -23]], [[53, 84, 63, 51, -7, -21, 64, -60, -5, 92, -23, 46, -28, 13, 33, -15], [12, 106, 63, -77, -58, -74, 24, -96, -71, 78, 19, 15, -57, -67, -54, -53], [-22, 42, 17, -71, -58, -29, 20, -92, -89, 75, 29, -37, -63, -89, -61, -67]], [[-17, 14, 12, -45, 6, 54, 22, 41, 10, 2, -62, 53, 73, 59, -6, 4], [-38, -1, 16, -108, -12, -30, 9, -2, -44, 30, -49, 19, 4, -3, -60, -27], [-94, -35, -35, -83, -13, -65, -14, 48, -15, 30, -24, -64, -20, -51, -127, -63]]], [[[-5, -17, -27, -37, -9, -30, -4, -14, -18, -27, -34, 98, 19, 42, 26, 11], [-44, -2, 6, -127, -36, 82, -42, 3, -16, 26, -83, 66, 50, 85, 105, 32], [-65, 26, 58, -79, -33, 85, -45, -11, -57, 22, -86, 42, 52, 41, 116, -6]], [[-8, -26, -78, -8, 14, 0, 2, -7, 28, -38, 34, 22, 57, 34, -29, -12], [-62, -48, -35, -112, -15, 82, -10, -10, 45, -17, -19, 17, 73, 54, 34, 57], [-50, -8, 12, -71, -34, 72, -35, -35, -53, 2, -56, 25, 19, 35, 46, 43]], [[1, -9, -51, 18, 13, 4, -2, -18, 100, 8, 61, -10, -5, -25, -55, -10], [-19, -38, -72, -41, 18, 27, 36, 8, 82, -23, 11, -7, 31, -8, -20, 2], [-17, -30, -67, 34, 21, 47, 26, -3, 21, -15, -29, 38, -16, 22, -24, 6]]], [[[-8, -2, -2, 13, -14, -46, -43, -32, 23, 15, -10, -23, -21, -6, 42, 14], [-8, 9, 24, 6, 21, -95, -15, -101, 24, 77, 5, -12, -13, -32, 2, -25], [-2, 34, 29, 7, 45, -70, 1, -61, 3, 53, 1, -22, 8, -14, -7, -12]], [[17, 10, 22, 25, -15, -120, -22, -26, -8, -10, -8, -20, -18, -4, 44, 9], [8, 16, 37, 31, 9, -127, 17, -31, -19, 23, -25, -14, -22, -14, 20, -28], [-11, 36, 23, 31, 21, -56, 16, -5, -12, 12, 2, -12, 12, -4, 6, 4]], [[-6, 26, 4, 8, -16, -121, -10, -17, -16, 18, 18, -4, -4, -9, 20, 0], [-28, 48, 14, 0, -3, -80, -26, -17, -29, 31, 18, -16, 27, -20, 16, -29], [-8, 24, 19, -31, -3, 1, -11, 19, 16, 4, 28, 2, 56, -17, 22, 2]]]]> : tensor<32x3x3x16xi8>, "sym_name" = "__constant_32x3x3x16xi8", "sym_visibility" = "private", "type" = memref<32x3x3x16xi8>}> : () -> ()
  "memref.global"() <{"alignment" = 64 : i64, "constant", "initial_value" = dense<[8288, 1510, -1004, -4121, 547, 404, -2165, -5739, -120, 6576, 6860, -828, -1964, 530, 2611, -7180]> : tensor<16xi32>, "sym_name" = "__constant_16xi32_1", "sym_visibility" = "private", "type" = memref<16xi32>}> : () -> ()
  "memref.global"() <{"alignment" = 64 : i64, "constant", "initial_value" = dense<[[[[-86, 66, -43, 10, -103, 24, 88, 23, -64, 46, 30, -45, 27, 20, -20, -71], [-48, 94, 94, -31, 34, -12, 61, 100, -76, -8, 45, 71, 53, 28, 31, -26], [-96, 127, 90, 11, 95, -14, 8, 43, -15, -32, 48, 75, -35, 62, -17, 53]], [[8, 17, -13, 10, -20, -29, -11, 51, 24, 19, 0, -23, 13, -81, -59, 9], [32, 43, 23, 23, 22, -41, 35, 127, 11, -23, 7, 73, 20, -54, -20, -77], [-31, 6, 7, -20, 14, -6, -8, 37, 15, -15, 32, 49, -51, 11, -46, -71]], [[64, 30, -70, -94, -24, 31, -39, -4, -9, -57, -82, -90, 26, -126, -66, 30], [47, -55, -62, -58, 25, -56, -36, 19, 62, -68, -74, -5, 0, -102, -1, -35], [57, -95, 30, -41, -17, -44, -68, 8, 36, -12, -4, 26, -48, -87, -80, 2]]], [[[12, 52, -24, -23, -46, -28, -77, 18, -10, 65, 0, 8, -53, 29, 61, -59], [54, -20, -24, 51, 62, 31, -55, -42, 0, 7, -2, 2, -30, -18, 7, -98], [-36, -16, 35, -42, -83, 29, 87, -46, 20, 8, -9, -11, 8, -42, -14, 67]], [[127, 51, -38, 74, 43, -38, -32, 33, 68, -5, 52, 6, -80, 90, 54, -95], [5, -19, -49, -25, 115, -1, -26, -17, 7, -45, 10, 25, -54, -55, -2, -111], [-96, -55, 111, -79, -119, 61, 35, -25, 79, 6, 14, -8, 38, -2, -5, 115]], [[62, -41, -57, 73, -24, -57, -13, -44, -11, -14, 12, 5, -72, 44, 17, -20], [-35, -63, -10, -72, 58, -18, 37, 27, -23, -42, -41, 49, -7, -32, 0, 63], [-80, 2, 44, -39, -77, -4, 20, 20, -12, 55, -40, 8, 47, 5, 25, 50]]], [[[-79, -18, -53, 30, -37, -19, 10, 35, 0, -1, 17, 22, -17, 20, -19, -12], [-48, 21, 41, 7, 20, 8, -23, -82, -7, 3, 37, 27, 10, -11, -18, 33], [-4, 14, 44, -17, 1, -50, 3, 12, -57, 16, -5, -6, 10, 17, -13, 8]], [[-90, -37, -3, -73, 24, -20, 6, -12, 9, -24, -17, 0, -17, -16, 15, 18], [87, -9, 106, 82, 36, 91, -27, -127, 18, 24, 22, 6, 15, -11, 24, 116], [48, 9, 1, 8, 34, -66, 41, -15, -8, -7, -18, -17, -11, -1, 52, -24]], [[-25, -16, -23, -79, 20, 24, 19, -9, 49, 14, -27, 0, -32, -7, -7, -34], [42, -23, 0, 57, -6, -21, -17, -40, 27, 16, -20, 45, -10, -18, -16, -22], [10, -8, -36, 15, 1, -3, 23, 2, 10, -48, -30, 5, 2, -2, -31, -60]]], [[[-33, 13, -43, 22, -19, 34, -26, -23, -36, 40, -33, -5, 1, -3, 1, -26], [15, 15, -16, 24, -15, 35, 15, 17, 9, 27, -21, 37, -5, 41, 2, 5], [0, -5, 57, -41, 0, 34, 34, 22, -7, 17, -15, 32, 5, -14, -17, 34]], [[-3, -4, -63, 41, -20, 8, -48, -28, 13, 26, 0, 18, 7, 3, -18, 7], [96, 9, 40, 1, -33, 17, 7, -25, 31, 6, -2, -7, -10, 49, -45, -28], [27, -13, 127, -22, -15, 8, 12, -14, -5, 11, -19, 27, 27, 10, -60, 13]], [[-3, -29, -71, -7, 18, 2, -32, -42, 13, 26, 14, -38, 25, -2, -33, 23], [61, 30, -13, -60, 18, 2, -11, -8, 27, 15, 3, -65, 8, 22, -42, -17], [29, 14, 7, -34, 18, -18, -37, 9, -47, 9, -18, -15, 17, -26, -46, 10]]], [[[13, 29, 49, -8, -50, -26, 69, -16, -29, -4, -26, -1, -16, 4, 25, -42], [0, -23, -62, 25, -6, -8, -5, 13, 71, -6, -75, 19, 0, 25, 27, -61], [26, 2, 36, -4, -20, 16, -41, -9, 30, -31, -1, 9, 9, -12, 63, -10]], [[10, 38, 127, -10, -53, 1, 11, -22, -16, -24, 2, 20, 58, 35, 40, -25], [-41, -7, -60, 14, 18, -98, -61, 6, 41, -58, -101, -47, 16, -36, 48, -90], [-15, -17, 89, 1, -7, 41, -65, -22, -30, -23, -11, -14, 24, 13, 15, -39]], [[-11, 50, 54, 46, -31, 53, 25, 27, -57, -35, 37, 6, 45, 42, -18, -8], [-36, -8, -58, 0, 30, -36, -35, 49, -12, -6, -56, -105, 28, -35, 18, -26], [8, 5, 42, -6, 0, 66, -53, 19, -38, 23, -19, -29, 24, 46, -1, -37]]], [[[39, 48, -44, 45, -27, 32, -67, 15, 10, 23, 31, 30, 28, -18, 4, 2], [42, 26, -3, 98, -82, 80, -62, -3, -4, 24, 3, 33, 66, 27, 95, 20], [34, -24, 11, 69, -56, -36, -1, -9, -1, 2, -58, 34, 40, 51, 127, 68]], [[35, 18, -7, 17, -6, -41, -47, -16, 13, 31, -5, 18, 86, -14, -31, 20], [-46, 43, -5, 18, 26, -4, -5, 10, 19, 50, -14, 37, 112, -83, -8, 5], [-29, 18, -56, -23, -5, 15, 4, 4, -1, 47, -58, 42, 41, -57, 19, 38]], [[-34, -20, 4, -65, 16, -21, -20, -2, -5, -9, -7, -19, -10, -31, -26, 5], [-27, 2, 16, -92, 47, 3, 6, -22, -4, 13, -13, -27, 55, -21, 6, -12], [20, -33, -32, -37, 44, -29, 30, -5, 21, 4, -40, 1, -18, -48, 38, -21]]], [[[-51, 31, -22, -8, 45, 19, -64, -23, 38, -79, -24, -2, -74, 29, -24, 55], [-51, 122, 9, 17, 1, -12, -15, -27, 37, -54, 28, 29, -20, -30, 16, 91], [-9, 70, 16, 3, 39, 9, 60, 40, 69, -45, 20, 59, -1, 32, -4, 18]], [[-9, 37, 4, -36, 6, -13, -27, 45, -34, -124, -50, -39, -102, 36, -11, 17], [-13, 99, 91, 38, 0, 40, -36, 38, -57, -127, 4, -25, -72, 27, 15, 56], [-32, 28, 56, 45, 48, 7, -18, 67, 10, -91, -43, -13, -52, -11, 66, 2]], [[27, 27, -14, -34, -22, -76, 34, 20, 18, -62, -31, -3, 2, 26, 23, 31], [32, 26, 1, 12, -4, -34, -20, -28, -45, -88, -1, 32, -29, 50, -15, 6], [-12, -79, -13, 40, 65, -2, -55, 15, -12, -80, -48, 22, -52, 84, 32, -47]]], [[[-8, -28, -45, -25, -6, -33, 5, -17, 18, 24, 24, 49, -15, 38, 8, 24], [0, 25, 34, -9, 12, -15, -25, -53, 26, -2, -12, 11, 16, 84, 61, -5], [-1, 11, -1, -11, -18, -7, 1, -9, 46, 12, -32, 37, 19, 36, 19, -27]], [[1, -34, -35, 11, 7, 49, -7, -100, -15, 25, 27, 7, -2, 78, 13, -15], [18, 29, -8, 14, -15, 47, -30, -127, 29, 90, 9, -33, 60, 91, 59, 3], [30, 0, -52, 55, -7, -16, -1, 0, 27, -15, -13, 23, 14, 54, 14, 12]], [[53, -5, 10, 74, 12, -14, -25, 26, -42, 46, -31, 61, -4, 25, -45, -6], [41, 35, 73, 71, 15, -27, 3, -9, -34, 25, -49, 2, -25, 56, -46, -21], [-25, -25, 10, 4, -22, -4, -21, 62, -4, -52, -49, 3, 0, 6, -46, 2]]], [[[-16, 23, 90, -21, 15, 11, 82, 26, -1, -24, -15, 67, 58, -72, -18, 14], [26, -16, 55, -75, -71, 6, 98, 0, 21, 13, -3, 102, -3, -30, 22, 1], [52, -24, -14, -63, 49, 59, 5, 8, -24, 13, -9, 15, 4, 22, 54, -45]], [[-88, 36, 94, -52, -82, 59, 46, -85, -34, 13, -27, 50, 11, -95, 8, 36], [-54, 56, 48, -68, -127, -50, 86, -75, -58, 2, -49, 21, 29, -102, 102, 79], [80, -1, 10, -70, 59, -38, -21, 76, -24, 53, -75, -45, 66, -42, 67, -18]], [[-4, -84, 18, 20, -40, 2, 37, -2, -9, 25, 73, -49, -17, -17, 44, -6], [-44, 53, -2, 34, -18, 16, 92, 4, -42, 37, 25, -94, -14, -30, 113, 11], [74, 47, 76, -3, 11, 35, 72, 30, -18, 35, 36, -108, 74, -35, 20, 18]]], [[[43, 7, 14, -2, 23, -20, 14, -37, 43, -24, 8, 14, -55, -44, 13, 5], [45, -9, 43, -43, 36, 3, 7, -65, 57, -5, 1, 9, -60, -58, -77, 25], [25, -12, -16, -9, -26, 8, 49, -35, 40, -12, -24, 13, -69, -127, -37, 25]], [[-7, 6, 55, 27, -50, -4, 49, 45, -5, -36, 3, 20, -93, -29, -14, 45], [-14, -17, 71, 20, -62, -11, -16, -6, -4, -29, 5, -52, -124, -63, -79, -1], [15, 51, -18, 37, -120, -7, -20, -41, 35, -42, -19, -55, -81, -41, -27, -7]], [[-21, -9, -76, 20, -24, 43, -2, 42, 2, -1, 26, 59, -44, 37, -11, 54], [-42, -79, -56, 61, -31, 44, -67, -31, 4, 5, 43, -29, -23, 13, -18, 46], [-5, -27, -29, 77, -37, 14, -61, -16, 58, 21, 16, -15, -37, 66, -26, 8]]], [[[-17, -76, 36, 50, 21, -55, -24, 63, -47, -23, 32, -95, -15, -75, -42, -44], [-32, -5, 55, 77, 75, -25, 61, -7, -18, 3, 0, -71, -15, -64, 16, -22], [-31, -6, -79, 33, 89, -30, -5, 8, -16, -7, 19, -28, -10, -69, 84, -127]], [[-5, -115, -39, -11, -3, -8, -50, 20, -18, 2, -27, -45, -39, -18, 25, -20], [21, -39, 28, 42, 17, 33, 0, -56, -12, 7, -27, 40, -44, 17, 31, 14], [25, -35, -60, 4, 121, -33, 14, -7, 22, 21, 7, 19, -27, -29, 57, 1]], [[40, -74, 4, 24, 13, 17, 1, -7, -13, -10, -47, -29, 1, -20, 39, -36], [-74, -4, 48, 65, -55, -50, 13, -35, -5, 7, -16, 100, -60, 21, -23, -40], [-31, 2, -23, 19, -11, 17, 16, -12, 16, 48, 24, 3, -43, 17, 42, 33]]], [[[40, 16, -3, 2, -6, -29, -13, 1, 18, 7, 18, 35, 9, -52, -26, -20], [41, 9, 5, -4, 46, -15, -15, -2, 10, 9, -5, 5, -27, 9, -7, -5], [1, -5, -11, 6, 16, -5, -24, 13, -26, 12, -44, 6, -15, 21, 40, -29]], [[-6, 20, 31, 49, -60, -39, -19, -31, 67, 13, 25, -7, 10, -34, 13, -47], [57, 20, 15, 2, 25, -46, 2, 30, 34, 3, 38, -14, -26, -13, -1, -37], [30, 45, -47, -2, 28, 0, 14, 18, -7, -15, 2, -12, -8, -28, -16, -127]], [[4, 8, 10, 16, -24, -50, 10, -17, 25, 9, 14, -19, -20, 2, 33, -7], [7, 9, 22, 25, -21, -38, 20, -8, 13, 26, 25, -9, -15, 30, 16, -10], [44, 24, -21, 16, 7, 11, 20, 10, -2, -1, -21, 19, -1, 3, -34, -48]]], [[[109, 77, 22, -9, -57, 15, 61, 17, 104, -26, -58, -2, -10, -64, -106, 64], [65, 30, -11, 13, -73, -27, 110, 53, 116, -15, -60, -31, -60, 23, -48, 69], [65, 10, -51, 29, -33, -58, 120, 40, 124, -20, -32, -12, -76, -2, -9, 14]], [[67, 30, -4, -27, 78, 73, -15, -14, 95, -94, -90, -55, -17, 12, -9, 37], [7, -3, -108, 55, 80, 26, 73, -58, 83, -27, -49, -17, -34, 43, 27, 25], [-15, -30, -44, 89, -15, -71, 98, -4, 61, 20, -31, 44, -62, -13, 23, 2]], [[-35, 34, 7, -32, 127, 111, 37, 39, 18, -110, 33, -14, 35, -21, 8, -59], [-78, 6, 14, 37, 117, -2, 80, -9, -41, 3, 27, 51, -12, -8, 2, -19], [-54, 15, -52, 107, -111, -57, 79, -75, 12, 56, -19, 3, -9, -38, -9, -39]]], [[[-24, 16, 13, -66, 3, -27, -28, -46, 16, -10, 9, 4, 37, 47, -25, 51], [67, 1, 11, 16, 56, 7, -15, -24, 20, -22, 0, 16, -3, 19, -29, 46], [-22, -19, -46, 9, -22, -15, 1, 6, -40, -24, 4, 5, 10, -37, 7, -40]], [[-127, 23, -24, -3, 9, -22, 0, 121, 31, -5, 16, -6, -39, -17, 2, -52], [34, 8, -21, -20, -81, 78, -8, -87, -19, -27, -19, 11, 48, 52, -13, 70], [36, -4, 32, 39, 69, -2, -12, -6, 9, -11, 14, 15, -18, 5, 11, -8]], [[55, 6, -9, 15, -1, 35, -13, -9, 17, 3, -12, -10, 40, 28, -9, -54], [-25, -3, -9, -3, -18, -45, -28, 52, -2, 12, -35, 3, -38, -46, -40, 4], [5, 12, -4, -11, -12, 21, -36, -31, 37, 32, 2, -6, 8, 4, 8, 18]]], [[[33, -4, 33, 2, -18, -47, 7, 69, 75, 9, -37, -6, -44, 28, 31, -20], [35, 9, -33, 16, 44, 3, -58, -24, 58, 72, 6, -25, -26, 15, 7, 44], [-65, 40, -11, -10, 66, 10, -21, -59, -6, 23, 26, -4, -26, -41, -25, 37]], [[33, -18, 40, -127, -36, 0, -12, 5, 45, 81, -30, -34, -18, 26, 33, 15], [-24, -37, -42, -15, 21, -36, -42, -48, 28, 75, -19, -17, -22, -40, -19, 25], [-42, -24, 30, 44, -19, 32, 20, -44, -45, 19, 33, 2, -10, -45, -28, 37]], [[-11, -32, -3, 25, -34, -1, -29, -9, 18, 53, -15, -19, -15, -37, -14, 1], [-2, -44, 9, 16, -18, -37, -12, 21, 30, -1, -50, 13, -3, -43, -21, 67], [-39, 7, 6, 22, -28, 10, 11, 15, 18, 26, 38, -11, -11, 9, 10, 8]]], [[[-6, 17, 72, 20, -1, 24, -46, 55, 58, 42, -31, 16, -20, -51, -18, -24], [11, 7, 8, 63, 0, -17, 2, 16, 51, 71, -93, 0, 3, 13, -32, -6], [0, -36, -54, 18, -72, -94, 27, 45, 36, 12, -53, 3, 25, 15, -25, 20]], [[-13, 26, 92, 39, 31, -10, -51, -18, -32, 44, -74, 127, -40, 30, -68, -11], [-57, 51, -14, -1, 62, 15, -17, 38, 39, 41, -106, 50, -21, -10, -56, -8], [14, 42, -54, -16, -37, 22, -12, 20, 24, 33, -40, -44, 16, -53, 17, 26]], [[30, 23, -55, 0, -2, 40, 8, 25, 9, 31, -60, 75, -6, 9, -62, 17], [20, 41, -76, 11, 63, 90, 8, 54, 17, 3, -79, -31, -34, 22, -53, 12], [-2, 45, -44, 31, 9, 67, -22, 0, -45, 19, 4, -125, 6, -58, 27, 0]]]]> : tensor<16x3x3x16xi8>, "sym_name" = "__constant_16x3x3x16xi8_0", "sym_visibility" = "private", "type" = memref<16x3x3x16xi8>}> : () -> ()
  "memref.global"() <{"alignment" = 64 : i64, "constant", "initial_value" = dense<[18377, -13074, 18642, 8931, 22592, 2229, -4671, 1859, 13852, 42, -28659, -5238, 1985, 649, 1093, 7186]> : tensor<16xi32>, "sym_name" = "__constant_16xi32_0", "sym_visibility" = "private", "type" = memref<16xi32>}> : () -> ()
  "memref.global"() <{"alignment" = 64 : i64, "constant", "initial_value" = dense<[[[[15, 8, 3, -4, -16, 26, 9, 63, -15, -2, 2, 7, 3, 22, -45, -2], [6, -20, -98, 43, -66, 7, 19, -85, -19, -18, -42, -87, 22, -25, -21, 11], [-54, 23, -5, -38, 20, 7, 49, 41, 31, -12, 2, -18, -62, 1, 22, -28]], [[-25, -11, 39, 67, 16, -16, 26, -18, -70, 18, 0, 15, -17, 46, -58, -32], [-31, -75, -15, 56, -33, 19, -100, 10, -13, 36, -82, -46, -81, -7, -20, 64], [-26, 50, 4, -123, 26, 28, -17, -35, -38, 31, -33, -25, -7, -24, 16, 11]], [[14, 22, -14, -20, 4, -95, -8, -39, 23, -12, -6, 14, 23, -4, -20, 3], [37, 2, 34, -6, -7, -34, -34, -34, -31, 6, -9, -2, -89, -11, 9, -127], [85, 47, 11, -79, 13, -6, -10, -4, -10, -45, 34, 7, 4, -35, 28, -21]]], [[[9, -20, -13, 11, 18, 64, 24, 24, -68, 18, 5, -16, 71, 0, 36, 58], [22, -55, 82, 35, 72, 57, -10, -114, -15, 108, 16, 76, 23, 20, 18, 124], [37, 1, 59, 65, 52, 84, 18, -69, 33, 78, -15, 110, 1, -28, -13, 112]], [[37, -36, -16, -61, -35, -80, -19, 28, -32, -14, 43, -36, -39, -24, 78, -22], [-13, -68, 106, -20, 35, -127, -56, -93, -63, 85, 66, -26, 3, 10, 37, -44], [-29, -50, 85, 17, 27, 3, 0, -125, -51, 72, 31, -14, 12, -16, -24, 14]], [[20, 19, -30, 35, -57, 10, 3, 40, 38, -49, 27, -28, -32, -58, 39, -6], [11, 17, -28, -4, 19, -42, -63, 44, -5, 69, 44, -7, -32, -26, 6, 9], [-65, -28, -26, -41, 0, 6, 27, -38, -54, -10, 28, -35, 80, -39, -37, 73]]], [[[-35, 69, -14, 106, -6, 39, 86, 36, 30, -49, -30, 18, -17, 33, 83, 30], [-3, 79, -40, 12, 26, -18, -98, -77, 21, -32, 21, 5, 37, 63, 64, 11], [-18, -34, -28, -32, 10, 29, -93, 13, 2, -8, -62, 38, -10, 4, 91, -17]], [[-10, 35, -6, 78, -23, 57, 12, 9, -73, -52, 20, 26, -51, 62, 11, 3], [-12, 53, -34, -17, 4, 19, -127, -28, -13, -112, 68, 13, -45, 105, 22, 126], [9, -48, -9, -118, -19, 14, -3, 80, -19, 73, 56, -19, -23, 34, 67, -34]], [[19, -12, -15, 8, -12, 10, -42, -64, -82, 21, -12, 94, -60, -6, -46, -28], [-47, 44, -35, -20, 9, -36, -45, 61, -8, -65, 29, 19, 10, 31, -17, -50], [-4, -33, -49, -69, -25, 18, 12, -11, 9, 20, 57, -15, 15, -11, 14, 17]]], [[[45, 2, -120, -82, 23, -117, -86, -41, -72, -11, 15, -9, 16, 26, 46, -5], [-83, -37, -127, 13, 10, -84, -58, -90, 50, 16, 2, 42, 3, 23, 46, -79], [-41, -29, -24, 88, 21, -60, -3, 89, 73, 16, 8, 35, 23, 55, 11, 18]], [[36, 4, 14, -22, 14, -74, -49, 49, 3, 6, 2, 2, 36, 31, -2, 19], [-48, -40, 54, -31, -22, -57, -32, -22, 84, 70, 18, 33, -45, 17, 2, 23], [-30, 18, 45, 6, 52, 73, 87, -49, 4, 43, 48, 53, -81, 32, -29, 21]], [[35, 35, 31, -33, -29, -27, 30, -16, -4, -10, 16, -26, -41, -31, -4, -13], [-6, 6, -25, -10, -29, 13, 12, 0, -43, -26, 7, 19, -81, -19, -4, 39], [1, 32, -42, 91, 37, 54, 4, 24, -25, 16, 0, -9, 18, -4, -28, 31]]], [[[-55, 23, -94, -116, 45, -29, -115, 17, -36, -44, -33, -54, -2, -70, 48, -35], [1, 3, 47, -74, 10, 30, -55, -113, 15, 2, 0, 7, 14, -91, 22, -89], [47, -93, 44, 98, 0, 25, -37, -86, 79, -127, 7, -49, 15, -53, 33, -22]], [[-15, 33, -62, -1, 82, -42, -4, 23, 16, -84, -22, 15, -84, -19, 25, -27], [-39, 14, -11, -105, -22, 46, -41, 38, -39, 123, 1, 35, 33, -77, 5, -47], [6, -39, 84, -18, 10, 37, 15, -38, 22, -31, 6, -25, 80, -35, 3, -50]], [[-15, 58, 8, 102, 51, -49, -34, -61, 50, -86, -37, -37, -66, 17, -34, -9], [12, 58, 11, -34, -119, 13, -5, 37, -20, 43, 25, 57, -109, -25, -21, 87], [-24, 1, -39, -54, -64, -14, 69, -8, -55, 16, 32, -20, -27, -28, -11, 30]]], [[[-83, -16, 32, -28, 4, 26, 58, 19, -22, -25, -28, 45, 26, -12, 32, 18], [47, 26, -10, 35, -58, -43, -71, -86, -9, 27, 17, -7, -15, -6, -26, 51], [55, -33, 7, 33, -1, 16, -9, 22, -23, -46, -11, -53, -29, -6, -1, -23]], [[-25, -45, -16, -109, 8, -21, 127, 22, -88, -13, -7, 1, -7, -25, 35, -30], [-30, -22, -28, 0, 3, -14, 57, -36, 9, -49, -5, 14, -40, -34, -44, 56], [-6, -76, 18, 53, 13, -29, 1, 2, 16, -27, 11, 8, 45, -6, -15, 20]], [[-37, -11, -10, -54, -22, -15, -18, 0, -53, 32, 9, 34, -7, -5, 60, 65], [-31, 11, 18, -44, 24, 29, -27, -36, 12, -1, -5, 41, -49, -18, -1, -78], [-15, -27, -5, -10, 12, 36, 30, -29, 19, -62, 17, 74, 63, 2, 19, 32]]], [[[127, 78, 23, 36, -37, 60, 98, -48, -50, 66, -16, -18, 10, -3, 68, 88], [88, 31, -13, 51, -1, 8, 103, -30, 7, 47, -16, 8, -5, 39, 53, -2], [95, 28, -90, -48, -9, 53, 12, 5, -10, 14, -8, -25, 0, 6, 45, 18]], [[-28, 14, 65, 38, -49, -8, 19, 62, 66, 35, -43, -24, -21, 0, -47, 15], [-74, -88, -11, 49, -10, -41, 8, 83, 33, -33, -85, -20, -94, 12, -45, -16], [60, -67, -96, -55, -13, -11, 5, 46, -40, -23, -93, -34, -58, 9, -19, -27]], [[-32, -8, 61, -14, -8, 10, -21, 14, 26, 2, -53, 38, 58, -15, -114, 52], [-82, -81, 3, -10, 92, 29, 12, -8, 39, -105, -62, 59, -55, -22, -84, 16], [-20, -66, -59, -68, 80, -19, -9, -43, 22, -49, -91, 41, -31, -27, -36, -18]]], [[[-7, -5, -42, -14, 8, -50, -6, -44, 16, -16, 9, -7, -2, 18, -3, -37], [-15, 15, -35, -32, 4, -6, 33, 92, 8, 15, 18, 64, -30, 18, 29, -78], [-6, -9, -10, 15, -3, 37, -33, 4, -8, -8, 11, 66, 36, 17, 39, 1]], [[15, -23, 31, -2, -4, 38, -127, 26, 14, 15, 3, -15, -11, 46, -22, 92], [12, 37, 57, -40, 13, -47, 14, 64, 5, 37, -6, -27, 47, -12, -12, -30], [12, 22, 88, -50, -44, -19, 22, -20, 49, -45, -26, 23, -26, -10, -2, -82]], [[17, -30, -24, 72, 16, 55, 25, -38, -16, 5, 47, 23, -38, 33, -13, -49], [-45, 7, -33, 58, 29, -4, -8, 19, -58, 33, 11, -29, -19, -4, 0, 81], [-17, -9, -9, 14, -30, -19, 5, 32, 2, 9, -24, -32, 21, -4, -4, 39]]], [[[57, 34, 75, -8, -22, -30, -56, -12, 34, 20, 14, 7, 22, 42, -66, 70], [52, -30, -7, 21, -43, 42, -24, 10, 13, 39, -31, -5, -39, -19, -65, -42], [30, -68, -87, -110, 6, 14, 81, 37, -14, -37, -44, -66, -33, -32, -4, -127]], [[-5, 52, 52, 25, -3, -82, -4, 16, 10, -3, 20, -6, -13, 13, -56, 90], [26, -12, -59, 48, -8, 2, 29, -66, -33, 26, -26, 37, 22, -28, -23, -14], [-5, -83, -77, -63, 51, 10, 37, -32, -62, -22, -42, -15, 9, -41, 41, -104]], [[0, 49, 35, 13, 7, 23, -26, 63, 55, -39, 0, -23, -83, -1, -47, 29], [-23, -21, -25, 65, -8, 51, 51, -28, 50, -27, -20, 67, 35, -18, 14, -86], [-19, -113, -33, -41, -14, 50, -32, -35, -72, -27, -12, 54, 4, -12, 69, -82]]], [[[-23, -8, 46, -34, -11, 5, -44, 64, -3, 11, -19, 24, -5, -3, -4, -35], [24, 11, -48, -18, 46, -11, 22, -127, -53, -21, -6, 20, 14, -3, -28, 40], [-2, -8, 5, 11, 10, 7, 18, 38, 4, -42, -7, -23, -24, 24, -24, 6]], [[30, 10, -60, -22, 16, 69, 13, -94, -67, -4, 17, -9, -31, -17, 7, 17], [-6, -10, 8, 79, 6, -11, 5, 109, 13, -30, -28, -23, 65, -9, -6, 45], [1, 10, 14, -33, -19, -59, -32, 11, 24, 59, 13, 36, -1, 10, 17, -86]], [[-25, -13, 16, 32, -2, -36, 5, 44, 36, -17, 7, -15, 38, 18, -1, -1], [11, 6, 56, -10, -12, -9, 2, -16, 47, 45, 13, -19, -45, -10, -19, -67], [-9, -9, -60, -23, 3, 41, 35, -48, -42, 20, 7, 19, -7, -11, 8, 93]]], [[[15, 48, -25, 10, 30, 3, -39, 8, 26, -3, 9, 8, 7, -25, 12, 45], [127, 58, 25, 24, 50, 37, 4, 28, 69, 126, -16, 33, 15, -26, 43, 68], [40, 46, -23, 1, 23, 2, -5, 23, 40, 72, -27, 41, -12, -92, 47, 25]], [[-30, 39, -36, -6, 51, 17, -1, 4, 1, -6, -5, 40, 40, -12, 40, 88], [29, 29, 15, -5, 117, 54, 55, 8, 43, 63, -3, 37, 67, 6, 52, 53], [4, 15, -4, 19, 49, 19, 44, -16, -1, 24, -28, -8, 45, -55, 26, 1]], [[-69, -35, -22, 0, 20, -32, 23, 41, -27, -1, 8, -12, 15, 19, 32, 6], [-24, -40, 35, 13, 47, -8, 20, 50, 35, 23, 12, -13, 32, 33, 27, 58], [-58, -16, 22, 31, -25, 15, 8, -40, -50, -78, -39, -61, -57, -13, -12, -24]]], [[[-3, 29, -86, -1, -17, 29, -22, -19, 4, 0, -10, -21, 2, -14, -11, -68], [-28, 31, -21, -106, -29, -33, -18, 30, -3, 16, 25, 66, 83, -33, 70, 0], [-9, -20, 29, -72, -3, 50, -8, 21, 27, -31, 18, 59, -31, -13, 18, 25]], [[16, 18, 7, 52, -17, 38, -72, 26, -12, 15, -99, -16, -13, 5, -12, 38], [-22, 23, -39, -67, -33, -6, -60, 91, -71, 22, -74, 49, 43, -27, 35, 121], [-1, 21, -51, -51, -29, 33, 53, 60, -10, 38, -46, 10, -68, -19, -13, 43]], [[-31, -43, 21, 115, -9, 40, 20, 8, 7, 22, -23, -1, 10, 11, -37, 33], [-15, -19, 16, 38, 0, -5, 49, 9, -21, -7, 7, 35, -3, -29, -25, -11], [11, -24, 37, 36, 9, -27, 23, -7, 14, -44, 14, -30, -127, -53, -49, 1]]], [[[-22, 19, 65, 29, 5, 6, -9, 8, 10, -13, -6, -46, -9, 16, -31, 21], [36, 36, 74, -8, 0, 28, -53, 15, 0, -7, -12, -53, -28, -6, -23, 61], [-3, 56, 61, -11, 21, -26, 24, -64, -2, -22, -2, -34, -23, -12, -14, -9]], [[54, 31, -62, 5, -14, -20, 27, -62, -26, 1, -4, 13, -28, -41, 15, -81], [-12, -11, -127, 38, 35, 1, 15, -8, -60, -26, -28, 33, -41, -29, 36, -93], [67, -11, -103, 113, -22, 3, -94, 96, -81, -2, -41, 17, 69, -41, 34, 27]], [[-37, 27, 27, -52, -18, -38, -3, 29, -10, 10, 4, 17, 37, 14, 24, 65], [-27, 6, 48, -51, 7, -94, -8, 20, 76, 37, 9, -26, 82, 9, -7, 7], [-19, 23, 24, -58, -10, -8, 56, -26, 30, 10, 49, 10, -53, 53, 2, -24]]], [[[-16, 45, -30, 19, -14, -29, 34, 9, -37, -34, -8, -4, 6, 21, 8, 46], [-14, -5, -28, 56, -8, -21, -37, -16, 8, -4, -10, -15, -13, 16, -3, 22], [23, -9, -13, 28, -36, -7, 32, -16, -5, 29, 6, -34, 2, 5, -28, -18]], [[-5, 8, -18, 9, 2, -29, 80, -17, 11, 7, 7, -10, 7, -13, 5, -26], [-8, -27, -53, 29, 12, -7, -4, 17, 26, -20, 1, 30, -64, -19, 0, -3], [12, -23, -32, -4, -18, -6, -38, 6, -48, -9, 13, 16, 4, -4, -18, 24]], [[-2, 7, -3, -43, 9, 8, -22, -1, 127, 53, 6, 12, 46, -54, 21, 21], [17, 5, 26, -28, 52, -1, -4, -27, 76, -1, 2, 19, 18, -44, 15, -36], [21, 17, 14, -60, 20, -52, 40, -1, -24, -23, 23, 37, 14, -14, 3, 5]]], [[[-3, -11, 86, -28, -30, 32, -86, 28, 43, 30, -50, 47, 1, 34, -29, 18], [12, -36, 1, -63, -21, 47, -29, 55, -7, -22, -34, 83, -39, 36, -19, -2], [67, -44, -3, -29, -11, -22, -18, 32, 29, -12, -10, 87, 4, -31, -38, -41]], [[7, -46, -20, 13, -17, 23, 19, -10, 20, 19, -20, 1, 52, 60, 69, 6], [-33, -66, -31, 15, 57, -34, 65, -60, 42, 2, 8, 11, 45, 72, 52, -49], [12, -37, 27, -27, 24, 7, 24, -17, 38, -1, 38, 7, 8, 24, 9, -16]], [[-56, -53, -67, 102, -42, -85, 82, -9, -4, -64, 22, -8, -48, 21, 17, -27], [-62, -24, 16, 33, 55, -45, 89, -127, -10, -16, 34, -55, 10, 22, -20, -22], [-31, -1, 85, -31, 17, 7, 32, -78, -76, -30, 13, -38, 7, 1, -34, 83]]], [[[-77, -14, -37, -6, 37, -3, -71, 55, 90, -27, 29, 99, 21, -12, 34, -12], [24, -4, -35, -48, -1, -5, -87, -48, 38, -38, 1, 2, -30, 23, -7, 9], [-24, -60, 59, 23, 21, 24, 42, 24, 4, -39, -35, -13, -32, 48, -12, -33]], [[-46, 42, -127, -58, -12, 1, 40, 16, -91, -62, -3, 36, 118, -54, 16, 21], [34, 37, -53, -26, -57, 25, -49, -27, -10, -101, -15, -22, -19, 3, -7, 44], [10, -10, 27, 85, 7, 4, -11, 40, -49, -4, -1, -40, 42, 79, -22, -1]], [[6, 9, -26, -59, -27, 9, 5, 37, -99, -84, 14, -11, 114, -53, 1, 46], [7, 22, 52, -8, -10, -63, 21, 37, 24, -62, 28, -10, -12, -20, -55, -66], [41, 10, 10, 58, 21, -8, 1, -21, 24, -48, 47, -37, -67, 50, -56, -15]]]]> : tensor<16x3x3x16xi8>, "sym_name" = "__constant_16x3x3x16xi8", "sym_visibility" = "private", "type" = memref<16x3x3x16xi8>}> : () -> ()
  "memref.global"() <{"alignment" = 64 : i64, "constant", "initial_value" = dense<[6836, 11436, 9908, 3365, 6658, 3309, 6877, 5073, 3511, 5800, 5789, 14659, 9415, -11951, -35108, 8659]> : tensor<16xi32>, "sym_name" = "__constant_16xi32", "sym_visibility" = "private", "type" = memref<16xi32>}> : () -> ()
  "memref.global"() <{"alignment" = 64 : i64, "constant", "initial_value" = dense<[[[[25, 33, -47], [21, -16, -60], [75, 17, -102]], [[-89, -10, 75], [-7, 40, -12], [-20, -41, -19]], [[-82, -1, 8], [38, 58, 127], [-88, -24, 44]]], [[[-13, 24, -93], [74, -64, -11], [40, -91, -20]], [[-25, -15, -31], [-87, -118, -97], [127, -28, 96]], [[-70, 38, 43], [50, 31, -21], [97, -85, 79]]], [[[-60, -78, 36], [63, 67, 32], [-84, 45, 5]], [[48, -55, -12], [-68, -74, -21], [-49, -61, -89]], [[127, 5, -8], [25, 54, -22], [7, 66, 93]]], [[[-67, 4, 7], [-70, 60, -21], [4, 45, -48]], [[1, 34, 15], [-16, 127, 19], [9, 24, -42]], [[45, -6, -41], [-39, 7, -37], [-32, 28, -9]]], [[[-127, 50, 85], [-83, 37, -37], [39, 2, -16]], [[-105, 14, 92], [-93, -9, -30], [13, 37, 27]], [[105, 32, -37], [96, -71, -43], [78, -84, -23]]], [[[76, 23, 16], [-68, -127, -82], [-16, -55, -69]], [[-74, -18, -22], [-49, 12, 9], [-16, 101, 38]], [[-12, -2, 29], [82, -34, 40], [85, 101, 34]]], [[[62, -95, 65], [-24, -23, 98], [-42, 24, 25]], [[-54, -59, 13], [0, 7, -103], [101, 127, -18]], [[22, 92, 64], [-58, -59, -124], [-21, 83, -85]]], [[[103, -94, -84], [113, -62, -71], [33, 40, 7]], [[26, 79, 14], [-21, 22, 38], [-49, 1, -46]], [[-97, 70, 58], [-127, -120, -2], [27, 55, 91]]], [[[42, -94, 21], [103, 89, 127], [95, -13, -24]], [[-11, -18, 25], [-108, 35, 102], [-111, -118, -20]], [[53, -58, 19], [-11, -53, -58], [-7, 15, -21]]], [[[76, -27, 31], [-12, -18, -27], [-48, -37, 4]], [[127, 48, 97], [-59, -52, -49], [-14, -24, 8]], [[9, -7, 16], [19, -31, 46], [-27, 35, -66]]], [[[100, -53, 24], [95, 12, 36], [-14, 70, -16]], [[74, -31, -9], [27, -119, -48], [56, 71, 6]], [[-35, -54, -23], [-13, -127, -88], [27, -45, -67]]], [[[2, -26, 84], [92, -102, 60], [-52, -91, -55]], [[-12, 1, 9], [-51, 30, 69], [127, 80, -41]], [[-66, -105, -17], [-40, -85, -33], [40, 40, -56]]], [[[-96, -63, -5], [-59, -65, 76], [23, 127, 53]], [[42, -61, 48], [-21, 44, -50], [2, 36, -5]], [[84, -70, -56], [65, -56, 30], [23, -30, -8]]], [[[-115, -32, 51], [-118, 44, 90], [-89, -16, -34]], [[-23, 0, -21], [15, 91, 127], [-62, 30, 47]], [[10, 28, -34], [-25, 8, 31], [33, 32, 70]]], [[[36, -22, -2], [-11, -47, 23], [55, -5, 58]], [[-38, -23, -13], [46, 54, 43], [52, 43, -22]], [[-41, 33, -26], [28, 46, -9], [100, 14, -127]]], [[[96, -36, 30], [-4, -122, -52], [10, -28, 127]], [[-1, 29, -71], [14, 86, -16], [-103, 9, 10]], [[17, -7, -57], [6, 95, -34], [-68, 4, 59]]]]> : tensor<16x3x3x3xi8>, "sym_name" = "__constant_16x3x3x3xi8", "sym_visibility" = "private", "type" = memref<16x3x3x3xi8>}> : () -> ()
  "func.func"() <{"sym_name" = "run_network", "function_type" = (memref<1x32x32x3xi8>) -> memref<1x10xi8>}> ({
  ^0(%arg0 : memref<1x32x32x3xi8>):
    %0 = "func.call"() <{"callee" = @snax_cluster_core_idx}> {"pin_to_constants" = [0 : i32, 1 : i32, 2 : i32]} : () -> i32
    %1 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
    %2 = "arith.cmpi"(%0, %1) <{"predicate" = 0 : i64}> : (i32, i32) -> i1
    %3 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %4 = "arith.cmpi"(%0, %3) <{"predicate" = 0 : i64}> : (i32, i32) -> i1
    %5 = "arith.constant"() <{"value" = 2 : i32}> : () -> i32
    %6 = "arith.cmpi"(%0, %5) <{"predicate" = 0 : i64}> : (i32, i32) -> i1
    %7 = "arith.constant"() <{"value" = 36 : i8}> : () -> i8
    %8 = "arith.constant"() <{"value" = 1073741825 : i32}> : () -> i32
    %9 = "arith.constant"() <{"value" = 127 : i32}> : () -> i32
    %10 = "arith.constant"() <{"value" = -128 : i32}> : () -> i32
    %11 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %12 = "arith.constant"() <{"value" = -128 : i8}> : () -> i8
    %13 = "memref.get_global"() <{"name" = @_static_const_0}> : () -> memref<1x34x34x3xi8>
    %14 = "memref.subview"(%13) <{"operandSegmentSizes" = array<i32: 1, 0, 0, 0>, "static_offsets" = array<i64: 0, 1, 1, 0>, "static_sizes" = array<i64: 1, 32, 32, 3>, "static_strides" = array<i64: 1, 1, 1, 1>}> : (memref<1x34x34x3xi8>) -> memref<1x32x32x3xi8, strided<[3468, 102, 3, 1], offset: 105>>
    "scf.if"(%6) ({
      %15 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %16 = "memref.dim"(%arg0, %15) : (memref<1x32x32x3xi8>, index) -> index
      %17 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %18 = "memref.dim"(%arg0, %17) : (memref<1x32x32x3xi8>, index) -> index
      %19 = "arith.muli"(%16, %18) : (index, index) -> index
      %20 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %21 = "memref.dim"(%arg0, %20) : (memref<1x32x32x3xi8>, index) -> index
      %22 = "arith.muli"(%19, %21) : (index, index) -> index
      %23 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %24 = "memref.dim"(%arg0, %23) : (memref<1x32x32x3xi8>, index) -> index
      %25 = "arith.muli"(%22, %24) : (index, index) -> index
      %26 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %27 = "arith.muli"(%25, %26) : (index, index) -> index
      %28 = "memref.extract_aligned_pointer_as_index"(%arg0) : (memref<1x32x32x3xi8>) -> index
      %29 = "memref.extract_aligned_pointer_as_index"(%14) : (memref<1x32x32x3xi8, strided<[3468, 102, 3, 1], offset: 105>>) -> index
      "func.call"(%28, %29, %27) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_clear_l1}> : () -> ()
    %30 = "memref.get_global"() <{"name" = @__constant_16x3x3x3xi8}> : () -> memref<16x3x3x3xi8>
    %31 = "memref.get_global"() <{"name" = @__constant_16xi32}> : () -> memref<16xi32>
    %32 = "memref.get_global"() <{"name" = @_static_const_1}> : () -> memref<1x32x32x16xi8>
    %33 = "arith.constant"() <{"value" = 16 : index}> : () -> index
    %34 = "arith.constant"() <{"value" = 4 : index}> : () -> index
    %35 = "arith.muli"(%33, %34) : (index, index) -> index
    %36 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %37 = "func.call"(%35, %36) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %38 = "llvm.load"(%37) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %39 = "llvm.extractvalue"(%38) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %40 = "llvm.extractvalue"(%38) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %41 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %42 = "llvm.insertvalue"(%41, %39) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %43 = "llvm.insertvalue"(%42, %40) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %44 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %45 = "llvm.insertvalue"(%43, %44) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %46 = "builtin.unrealized_conversion_cast"(%33) : (index) -> i32
    %47 = "llvm.insertvalue"(%45, %46) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %48 = "builtin.unrealized_conversion_cast"(%47) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>) -> memref<16xi32>
    %49 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %50 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %51 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %52 = "arith.constant"() <{"value" = 16 : index}> : () -> index
    %53 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %54 = "arith.muli"(%49, %53) : (index, index) -> index
    %55 = "arith.muli"(%50, %54) : (index, index) -> index
    %56 = "arith.muli"(%51, %55) : (index, index) -> index
    %57 = "arith.muli"(%52, %56) : (index, index) -> index
    %58 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %59 = "func.call"(%57, %58) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %60 = "llvm.load"(%59) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %61 = "llvm.extractvalue"(%60) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %62 = "llvm.extractvalue"(%60) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %63 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %64 = "llvm.insertvalue"(%63, %61) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %65 = "llvm.insertvalue"(%64, %62) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %66 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %67 = "llvm.insertvalue"(%65, %66) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %68 = "builtin.unrealized_conversion_cast"(%49) : (index) -> i32
    %69 = "llvm.insertvalue"(%67, %68) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %70 = "builtin.unrealized_conversion_cast"(%50) : (index) -> i32
    %71 = "llvm.insertvalue"(%69, %70) <{"position" = array<i64: 3, 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %72 = "builtin.unrealized_conversion_cast"(%51) : (index) -> i32
    %73 = "llvm.insertvalue"(%71, %72) <{"position" = array<i64: 3, 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %74 = "builtin.unrealized_conversion_cast"(%52) : (index) -> i32
    %75 = "llvm.insertvalue"(%73, %74) <{"position" = array<i64: 3, 3>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %76 = "builtin.unrealized_conversion_cast"(%75) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>) -> memref<1x32x32x16xi8>
    %77 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %78 = "arith.constant"() <{"value" = 34 : index}> : () -> index
    %79 = "arith.constant"() <{"value" = 34 : index}> : () -> index
    %80 = "arith.constant"() <{"value" = 3 : index}> : () -> index
    %81 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %82 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %83 = "arith.constant"() <{"value" = 34 : index}> : () -> index
    %84 = "arith.constant"() <{"value" = 34 : index}> : () -> index
    %85 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %86 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %87 = "arith.constant"() <{"value" = 9248 : index}> : () -> index
    %88 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %89 = "arith.constant"() <{"value" = 9248 : index}> : () -> index
    %90 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %91 = "arith.constant"() <{"value" = 272 : index}> : () -> index
    %92 = "arith.constant"() <{"value" = 3468 : index}> : () -> index
    %93 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %94 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %95 = "arith.subi"(%82, %93) : (index, index) -> index
    %96 = "arith.muli"(%95, %92) : (index, index) -> index
    %97 = "arith.addi"(%94, %96) : (index, index) -> index
    %98 = "arith.subi"(%83, %93) : (index, index) -> index
    %99 = "arith.muli"(%98, %91) : (index, index) -> index
    %100 = "arith.addi"(%97, %99) : (index, index) -> index
    %101 = "arith.subi"(%84, %93) : (index, index) -> index
    %102 = "arith.muli"(%101, %90) : (index, index) -> index
    %103 = "arith.addi"(%100, %102) : (index, index) -> index
    %104 = "arith.subi"(%85, %93) : (index, index) -> index
    %105 = "arith.muli"(%104, %89) : (index, index) -> index
    %106 = "arith.addi"(%103, %105) : (index, index) -> index
    %107 = "arith.subi"(%86, %93) : (index, index) -> index
    %108 = "arith.muli"(%107, %88) : (index, index) -> index
    %109 = "arith.addi"(%106, %108) : (index, index) -> index
    %110 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %111 = "arith.addi"(%109, %110) : (index, index) -> index
    %112 = "arith.muli"(%93, %111) : (index, index) -> index
    %113 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %114 = "arith.muli"(%113, %110) : (index, index) -> index
    %115 = "arith.addi"(%112, %114) : (index, index) -> index
    %116 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %117 = "func.call"(%115, %116) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %118 = "llvm.load"(%117) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %119 = "llvm.extractvalue"(%118) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %120 = "llvm.extractvalue"(%118) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %121 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %122 = "llvm.insertvalue"(%121, %119) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %123 = "llvm.insertvalue"(%122, %120) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %124 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %125 = "llvm.insertvalue"(%123, %124) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %126 = "builtin.unrealized_conversion_cast"(%77) : (index) -> i32
    %127 = "llvm.insertvalue"(%125, %126) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %128 = "builtin.unrealized_conversion_cast"(%78) : (index) -> i32
    %129 = "llvm.insertvalue"(%127, %128) <{"position" = array<i64: 3, 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %130 = "builtin.unrealized_conversion_cast"(%79) : (index) -> i32
    %131 = "llvm.insertvalue"(%129, %130) <{"position" = array<i64: 3, 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %132 = "builtin.unrealized_conversion_cast"(%80) : (index) -> i32
    %133 = "llvm.insertvalue"(%131, %132) <{"position" = array<i64: 3, 3>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %134 = "builtin.unrealized_conversion_cast"(%133) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>) -> memref<1x34x34x3xi8>
    %135 = "arith.constant"() <{"value" = 16 : index}> : () -> index
    %136 = "arith.constant"() <{"value" = 3 : index}> : () -> index
    %137 = "arith.constant"() <{"value" = 3 : index}> : () -> index
    %138 = "arith.constant"() <{"value" = 3 : index}> : () -> index
    %139 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %140 = "arith.constant"() <{"value" = 2 : index}> : () -> index
    %141 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %142 = "arith.constant"() <{"value" = 3 : index}> : () -> index
    %143 = "arith.constant"() <{"value" = 3 : index}> : () -> index
    %144 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %145 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %146 = "arith.constant"() <{"value" = 576 : index}> : () -> index
    %147 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %148 = "arith.constant"() <{"value" = 576 : index}> : () -> index
    %149 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %150 = "arith.constant"() <{"value" = 192 : index}> : () -> index
    %151 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %152 = "arith.constant"() <{"value" = 216 : index}> : () -> index
    %153 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %154 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %155 = "arith.subi"(%140, %153) : (index, index) -> index
    %156 = "arith.muli"(%155, %152) : (index, index) -> index
    %157 = "arith.addi"(%154, %156) : (index, index) -> index
    %158 = "arith.subi"(%141, %153) : (index, index) -> index
    %159 = "arith.muli"(%158, %151) : (index, index) -> index
    %160 = "arith.addi"(%157, %159) : (index, index) -> index
    %161 = "arith.subi"(%142, %153) : (index, index) -> index
    %162 = "arith.muli"(%161, %150) : (index, index) -> index
    %163 = "arith.addi"(%160, %162) : (index, index) -> index
    %164 = "arith.subi"(%143, %153) : (index, index) -> index
    %165 = "arith.muli"(%164, %149) : (index, index) -> index
    %166 = "arith.addi"(%163, %165) : (index, index) -> index
    %167 = "arith.subi"(%144, %153) : (index, index) -> index
    %168 = "arith.muli"(%167, %148) : (index, index) -> index
    %169 = "arith.addi"(%166, %168) : (index, index) -> index
    %170 = "arith.subi"(%145, %153) : (index, index) -> index
    %171 = "arith.muli"(%170, %147) : (index, index) -> index
    %172 = "arith.addi"(%169, %171) : (index, index) -> index
    %173 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %174 = "arith.addi"(%172, %173) : (index, index) -> index
    %175 = "arith.muli"(%153, %174) : (index, index) -> index
    %176 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %177 = "arith.muli"(%176, %173) : (index, index) -> index
    %178 = "arith.addi"(%175, %177) : (index, index) -> index
    %179 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %180 = "func.call"(%178, %179) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %181 = "llvm.load"(%180) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %182 = "llvm.extractvalue"(%181) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %183 = "llvm.extractvalue"(%181) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %184 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %185 = "llvm.insertvalue"(%184, %182) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %186 = "llvm.insertvalue"(%185, %183) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %187 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %188 = "llvm.insertvalue"(%186, %187) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %189 = "builtin.unrealized_conversion_cast"(%135) : (index) -> i32
    %190 = "llvm.insertvalue"(%188, %189) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %191 = "builtin.unrealized_conversion_cast"(%136) : (index) -> i32
    %192 = "llvm.insertvalue"(%190, %191) <{"position" = array<i64: 3, 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %193 = "builtin.unrealized_conversion_cast"(%137) : (index) -> i32
    %194 = "llvm.insertvalue"(%192, %193) <{"position" = array<i64: 3, 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %195 = "builtin.unrealized_conversion_cast"(%138) : (index) -> i32
    %196 = "llvm.insertvalue"(%194, %195) <{"position" = array<i64: 3, 3>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %197 = "builtin.unrealized_conversion_cast"(%196) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>) -> memref<16x3x3x3xi8>
    %198 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %199 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %200 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %201 = "arith.constant"() <{"value" = 16 : index}> : () -> index
    %202 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %203 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %204 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %205 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %206 = "arith.constant"() <{"value" = 2 : index}> : () -> index
    %207 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %208 = "arith.constant"() <{"value" = 16384 : index}> : () -> index
    %209 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %210 = "arith.constant"() <{"value" = 8192 : index}> : () -> index
    %211 = "arith.constant"() <{"value" = 256 : index}> : () -> index
    %212 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %213 = "arith.constant"() <{"value" = 16384 : index}> : () -> index
    %214 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %215 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %216 = "arith.subi"(%203, %214) : (index, index) -> index
    %217 = "arith.muli"(%216, %213) : (index, index) -> index
    %218 = "arith.addi"(%215, %217) : (index, index) -> index
    %219 = "arith.subi"(%204, %214) : (index, index) -> index
    %220 = "arith.muli"(%219, %212) : (index, index) -> index
    %221 = "arith.addi"(%218, %220) : (index, index) -> index
    %222 = "arith.subi"(%205, %214) : (index, index) -> index
    %223 = "arith.muli"(%222, %211) : (index, index) -> index
    %224 = "arith.addi"(%221, %223) : (index, index) -> index
    %225 = "arith.subi"(%206, %214) : (index, index) -> index
    %226 = "arith.muli"(%225, %210) : (index, index) -> index
    %227 = "arith.addi"(%224, %226) : (index, index) -> index
    %228 = "arith.subi"(%207, %214) : (index, index) -> index
    %229 = "arith.muli"(%228, %209) : (index, index) -> index
    %230 = "arith.addi"(%227, %229) : (index, index) -> index
    %231 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %232 = "arith.addi"(%230, %231) : (index, index) -> index
    %233 = "arith.muli"(%214, %232) : (index, index) -> index
    %234 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %235 = "arith.muli"(%234, %231) : (index, index) -> index
    %236 = "arith.addi"(%233, %235) : (index, index) -> index
    %237 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %238 = "func.call"(%236, %237) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %239 = "llvm.load"(%238) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %240 = "llvm.extractvalue"(%239) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %241 = "llvm.extractvalue"(%239) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %242 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %243 = "llvm.insertvalue"(%242, %240) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %244 = "llvm.insertvalue"(%243, %241) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %245 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %246 = "llvm.insertvalue"(%244, %245) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %247 = "builtin.unrealized_conversion_cast"(%198) : (index) -> i32
    %248 = "llvm.insertvalue"(%246, %247) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %249 = "builtin.unrealized_conversion_cast"(%199) : (index) -> i32
    %250 = "llvm.insertvalue"(%248, %249) <{"position" = array<i64: 3, 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %251 = "builtin.unrealized_conversion_cast"(%200) : (index) -> i32
    %252 = "llvm.insertvalue"(%250, %251) <{"position" = array<i64: 3, 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %253 = "builtin.unrealized_conversion_cast"(%201) : (index) -> i32
    %254 = "llvm.insertvalue"(%252, %253) <{"position" = array<i64: 3, 3>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %255 = "builtin.unrealized_conversion_cast"(%254) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>) -> memref<1x32x32x16xi8>
    "scf.if"(%6) ({
      %256 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %257 = "memref.dim"(%30, %256) : (memref<16x3x3x3xi8>, index) -> index
      %258 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %259 = "memref.dim"(%30, %258) : (memref<16x3x3x3xi8>, index) -> index
      %260 = "arith.muli"(%257, %259) : (index, index) -> index
      %261 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %262 = "memref.dim"(%30, %261) : (memref<16x3x3x3xi8>, index) -> index
      %263 = "arith.muli"(%260, %262) : (index, index) -> index
      %264 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %265 = "memref.dim"(%30, %264) : (memref<16x3x3x3xi8>, index) -> index
      %266 = "arith.muli"(%263, %265) : (index, index) -> index
      %267 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %268 = "arith.muli"(%266, %267) : (index, index) -> index
      %269 = "memref.extract_aligned_pointer_as_index"(%30) : (memref<16x3x3x3xi8>) -> index
      %270 = "memref.extract_aligned_pointer_as_index"(%197) : (memref<16x3x3x3xi8>) -> index
      "func.call"(%269, %270, %268) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      %271 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %272 = "memref.dim"(%13, %271) : (memref<1x34x34x3xi8>, index) -> index
      %273 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %274 = "memref.dim"(%13, %273) : (memref<1x34x34x3xi8>, index) -> index
      %275 = "arith.muli"(%272, %274) : (index, index) -> index
      %276 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %277 = "memref.dim"(%13, %276) : (memref<1x34x34x3xi8>, index) -> index
      %278 = "arith.muli"(%275, %277) : (index, index) -> index
      %279 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %280 = "memref.dim"(%13, %279) : (memref<1x34x34x3xi8>, index) -> index
      %281 = "arith.muli"(%278, %280) : (index, index) -> index
      %282 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %283 = "arith.muli"(%281, %282) : (index, index) -> index
      %284 = "memref.extract_aligned_pointer_as_index"(%13) : (memref<1x34x34x3xi8>) -> index
      %285 = "memref.extract_aligned_pointer_as_index"(%134) : (memref<1x34x34x3xi8>) -> index
      "func.call"(%284, %285, %283) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      %286 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %287 = "memref.dim"(%31, %286) : (memref<16xi32>, index) -> index
      %288 = "arith.constant"() <{"value" = 4 : index}> : () -> index
      %289 = "arith.muli"(%287, %288) : (index, index) -> index
      %290 = "memref.extract_aligned_pointer_as_index"(%31) : (memref<16xi32>) -> index
      %291 = "memref.extract_aligned_pointer_as_index"(%48) : (memref<16xi32>) -> index
      "func.call"(%290, %291, %289) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_cluster_hw_barrier}> : () -> ()
    "scf.if"(%4) ({
      %292 = "memref.extract_aligned_pointer_as_index"(%134) : (memref<1x34x34x3xi8>) -> index
      %293 = "memref.extract_aligned_pointer_as_index"(%197) : (memref<16x3x3x3xi8>) -> index
      %294 = "memref.extract_aligned_pointer_as_index"(%255) : (memref<1x32x32x16xi8>) -> index
      %295 = "memref.extract_aligned_pointer_as_index"(%48) : (memref<16xi32>) -> index
      %296 = "memref.extract_aligned_pointer_as_index"(%48) : (memref<16xi32>) -> index
      %297 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %298 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %299 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %300 = "arith.constant"() <{"value" = 3 : i32}> : () -> i32
      %301 = "arith.constant"() <{"value" = 3 : i32}> : () -> i32
      %302 = "arith.constant"() <{"value" = 2 : i32}> : () -> i32
      %303 = "arith.constant"() <{"value" = 4 : i32}> : () -> i32
      %304 = "arith.constant"() <{"value" = 32 : i32}> : () -> i32
      %305 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %306 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %307 = "arith.constant"() <{"value" = 272 : i32}> : () -> i32
      %308 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %309 = "arith.constant"() <{"value" = 2176 : i32}> : () -> i32
      %310 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %311 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %312 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %313 = "arith.constant"() <{"value" = 9 : i32}> : () -> i32
      %314 = "arith.constant"() <{"value" = 2 : i32}> : () -> i32
      %315 = "arith.constant"() <{"value" = 128 : i32}> : () -> i32
      %316 = "arith.constant"() <{"value" = 64 : i32}> : () -> i32
      %317 = "arith.constant"() <{"value" = 216 : i32}> : () -> i32
      %318 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %319 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %320 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %321 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %322 = "arith.constant"() <{"value" = 2 : i32}> : () -> i32
      %323 = "arith.constant"() <{"value" = 128 : i32}> : () -> i32
      %324 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %325 = "arith.constant"() <{"value" = 8192 : i32}> : () -> i32
      %326 = "arith.constant"() <{"value" = 64 : i32}> : () -> i32
      %327 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %328 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %329 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %330 = "arith.constant"() <{"value" = 2 : i32}> : () -> i32
      %331 = "arith.constant"() <{"value" = 128 : i32}> : () -> i32
      %332 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %333 = "arith.constant"() <{"value" = 32 : i32}> : () -> i32
      %334 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %335 = "arith.constant"() <{"value" = -1 : i32}> : () -> i32
      %336 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %337 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %338 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %339 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %340 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %341 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %342 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %343 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %344 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %345 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %346 = "arith.constant"() <{"value" = 9 : i32}> : () -> i32
      %347 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %348 = "arith.constant"() <{"value" = 256 : i32}> : () -> i32
      %349 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %350 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %351 = "arith.constant"() <{"value" = 255 : i32}> : () -> i32
      %352 = "arith.andi"(%10, %351) : (i32, i32) -> i32
      %353 = "arith.andi"(%11, %351) : (i32, i32) -> i32
      %354 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %355 = "arith.shli"(%352, %354) : (i32, i32) -> i32
      %356 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %357 = "arith.shli"(%353, %356) : (i32, i32) -> i32
      %358 = "arith.ori"(%355, %357) : (i32, i32) -> i32
      %359 = "arith.constant"() <{"value" = 127 : i32}> : () -> i32
      %360 = "arith.constant"() <{"value" = -128 : i32}> : () -> i32
      %361 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %362 = "arith.constant"() <{"value" = 39 : i32}> : () -> i32
      %363 = "arith.constant"() <{"value" = 1242405367 : i32}> : () -> i32
      %364 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %365 = "arith.constant"() <{"value" = -128 : i32}> : () -> i32
      %366 = "arith.constant"() <{"value" = 255 : i32}> : () -> i32
      %367 = "arith.andi"(%359, %366) : (i32, i32) -> i32
      %368 = "arith.andi"(%360, %366) : (i32, i32) -> i32
      %369 = "arith.andi"(%364, %366) : (i32, i32) -> i32
      %370 = "arith.andi"(%365, %366) : (i32, i32) -> i32
      %371 = "arith.constant"() <{"value" = 24 : i32}> : () -> i32
      %372 = "arith.shli"(%368, %371) : (i32, i32) -> i32
      %373 = "arith.constant"() <{"value" = 16 : i32}> : () -> i32
      %374 = "arith.shli"(%367, %373) : (i32, i32) -> i32
      %375 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %376 = "arith.shli"(%370, %375) : (i32, i32) -> i32
      %377 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %378 = "arith.shli"(%369, %377) : (i32, i32) -> i32
      %379 = "arith.ori"(%372, %374) : (i32, i32) -> i32
      %380 = "arith.ori"(%376, %378) : (i32, i32) -> i32
      %381 = "arith.ori"(%379, %380) : (i32, i32) -> i32
      %382 = "arith.constant"() <{"value" = 24 : i32}> : () -> i32
      %383 = "arith.shli"(%362, %382) : (i32, i32) -> i32
      %384 = "arith.constant"() <{"value" = 16 : i32}> : () -> i32
      %385 = "arith.shli"(%362, %384) : (i32, i32) -> i32
      %386 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %387 = "arith.shli"(%362, %386) : (i32, i32) -> i32
      %388 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %389 = "arith.shli"(%362, %388) : (i32, i32) -> i32
      %390 = "arith.ori"(%383, %385) : (i32, i32) -> i32
      %391 = "arith.ori"(%387, %389) : (i32, i32) -> i32
      %392 = "arith.ori"(%390, %391) : (i32, i32) -> i32
      %393 = "arith.constant"() <{"value" = 256 : i32}> : () -> i32
      %394 = "arith.index_cast"(%292) : (index) -> i32
      %395 = "arith.constant"() <{"value" = 960 : i32}> : () -> i32
      "llvm.inline_asm"(%395, %394) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %396 = "arith.constant"() <{"value" = 961 : i32}> : () -> i32
      "llvm.inline_asm"(%396, %297) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %397 = "arith.constant"() <{"value" = 962 : i32}> : () -> i32
      "llvm.inline_asm"(%397, %298) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %398 = "arith.constant"() <{"value" = 963 : i32}> : () -> i32
      "llvm.inline_asm"(%398, %299) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %399 = "arith.constant"() <{"value" = 964 : i32}> : () -> i32
      "llvm.inline_asm"(%399, %300) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %400 = "arith.constant"() <{"value" = 965 : i32}> : () -> i32
      "llvm.inline_asm"(%400, %301) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %401 = "arith.constant"() <{"value" = 966 : i32}> : () -> i32
      "llvm.inline_asm"(%401, %302) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %402 = "arith.constant"() <{"value" = 967 : i32}> : () -> i32
      "llvm.inline_asm"(%402, %303) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %403 = "arith.constant"() <{"value" = 968 : i32}> : () -> i32
      "llvm.inline_asm"(%403, %304) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %404 = "arith.constant"() <{"value" = 969 : i32}> : () -> i32
      "llvm.inline_asm"(%404, %305) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %405 = "arith.constant"() <{"value" = 970 : i32}> : () -> i32
      "llvm.inline_asm"(%405, %306) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %406 = "arith.constant"() <{"value" = 971 : i32}> : () -> i32
      "llvm.inline_asm"(%406, %307) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %407 = "arith.constant"() <{"value" = 972 : i32}> : () -> i32
      "llvm.inline_asm"(%407, %308) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %408 = "arith.constant"() <{"value" = 973 : i32}> : () -> i32
      "llvm.inline_asm"(%408, %309) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %409 = "arith.constant"() <{"value" = 974 : i32}> : () -> i32
      "llvm.inline_asm"(%409, %310) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %410 = "arith.index_cast"(%293) : (index) -> i32
      %411 = "arith.constant"() <{"value" = 975 : i32}> : () -> i32
      "llvm.inline_asm"(%411, %410) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %412 = "arith.constant"() <{"value" = 976 : i32}> : () -> i32
      "llvm.inline_asm"(%412, %311) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %413 = "arith.constant"() <{"value" = 977 : i32}> : () -> i32
      "llvm.inline_asm"(%413, %312) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %414 = "arith.constant"() <{"value" = 978 : i32}> : () -> i32
      "llvm.inline_asm"(%414, %313) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %415 = "arith.constant"() <{"value" = 979 : i32}> : () -> i32
      "llvm.inline_asm"(%415, %314) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %416 = "arith.constant"() <{"value" = 980 : i32}> : () -> i32
      "llvm.inline_asm"(%416, %315) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %417 = "arith.constant"() <{"value" = 981 : i32}> : () -> i32
      "llvm.inline_asm"(%417, %316) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %418 = "arith.constant"() <{"value" = 982 : i32}> : () -> i32
      "llvm.inline_asm"(%418, %317) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %419 = "arith.constant"() <{"value" = 983 : i32}> : () -> i32
      "llvm.inline_asm"(%419, %318) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %420 = "arith.index_cast"(%294) : (index) -> i32
      %421 = "arith.constant"() <{"value" = 984 : i32}> : () -> i32
      "llvm.inline_asm"(%421, %420) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %422 = "arith.constant"() <{"value" = 985 : i32}> : () -> i32
      "llvm.inline_asm"(%422, %319) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %423 = "arith.constant"() <{"value" = 986 : i32}> : () -> i32
      "llvm.inline_asm"(%423, %320) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %424 = "arith.constant"() <{"value" = 987 : i32}> : () -> i32
      "llvm.inline_asm"(%424, %321) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %425 = "arith.constant"() <{"value" = 988 : i32}> : () -> i32
      "llvm.inline_asm"(%425, %322) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %426 = "arith.constant"() <{"value" = 989 : i32}> : () -> i32
      "llvm.inline_asm"(%426, %323) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %427 = "arith.constant"() <{"value" = 990 : i32}> : () -> i32
      "llvm.inline_asm"(%427, %324) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %428 = "arith.constant"() <{"value" = 991 : i32}> : () -> i32
      "llvm.inline_asm"(%428, %325) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %429 = "arith.constant"() <{"value" = 992 : i32}> : () -> i32
      "llvm.inline_asm"(%429, %326) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %430 = "arith.index_cast"(%295) : (index) -> i32
      %431 = "arith.constant"() <{"value" = 993 : i32}> : () -> i32
      "llvm.inline_asm"(%431, %430) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %432 = "arith.constant"() <{"value" = 994 : i32}> : () -> i32
      "llvm.inline_asm"(%432, %327) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %433 = "arith.constant"() <{"value" = 995 : i32}> : () -> i32
      "llvm.inline_asm"(%433, %328) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %434 = "arith.constant"() <{"value" = 996 : i32}> : () -> i32
      "llvm.inline_asm"(%434, %329) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %435 = "arith.constant"() <{"value" = 997 : i32}> : () -> i32
      "llvm.inline_asm"(%435, %330) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %436 = "arith.constant"() <{"value" = 998 : i32}> : () -> i32
      "llvm.inline_asm"(%436, %331) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %437 = "arith.constant"() <{"value" = 999 : i32}> : () -> i32
      "llvm.inline_asm"(%437, %332) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %438 = "arith.constant"() <{"value" = 1000 : i32}> : () -> i32
      "llvm.inline_asm"(%438, %333) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %439 = "arith.constant"() <{"value" = 1001 : i32}> : () -> i32
      "llvm.inline_asm"(%439, %334) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %440 = "arith.constant"() <{"value" = 1002 : i32}> : () -> i32
      "llvm.inline_asm"(%440, %335) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %441 = "arith.index_cast"(%296) : (index) -> i32
      %442 = "arith.constant"() <{"value" = 1003 : i32}> : () -> i32
      "llvm.inline_asm"(%442, %441) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %443 = "arith.constant"() <{"value" = 1004 : i32}> : () -> i32
      "llvm.inline_asm"(%443, %336) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %444 = "arith.constant"() <{"value" = 1005 : i32}> : () -> i32
      "llvm.inline_asm"(%444, %337) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %445 = "arith.constant"() <{"value" = 1006 : i32}> : () -> i32
      "llvm.inline_asm"(%445, %338) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %446 = "arith.constant"() <{"value" = 1007 : i32}> : () -> i32
      "llvm.inline_asm"(%446, %339) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %447 = "arith.constant"() <{"value" = 1008 : i32}> : () -> i32
      "llvm.inline_asm"(%447, %340) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %448 = "arith.constant"() <{"value" = 1009 : i32}> : () -> i32
      "llvm.inline_asm"(%448, %341) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %449 = "arith.constant"() <{"value" = 1010 : i32}> : () -> i32
      "llvm.inline_asm"(%449, %342) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %450 = "arith.constant"() <{"value" = 1011 : i32}> : () -> i32
      "llvm.inline_asm"(%450, %343) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %451 = "arith.constant"() <{"value" = 1012 : i32}> : () -> i32
      "llvm.inline_asm"(%451, %344) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %452 = "arith.constant"() <{"value" = 1013 : i32}> : () -> i32
      "llvm.inline_asm"(%452, %345) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %453 = "arith.constant"() <{"value" = 1017 : i32}> : () -> i32
      "llvm.inline_asm"(%453, %346) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %454 = "arith.constant"() <{"value" = 1018 : i32}> : () -> i32
      "llvm.inline_asm"(%454, %347) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %455 = "arith.constant"() <{"value" = 1019 : i32}> : () -> i32
      "llvm.inline_asm"(%455, %348) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %456 = "arith.constant"() <{"value" = 1020 : i32}> : () -> i32
      "llvm.inline_asm"(%456, %358) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %457 = "arith.constant"() <{"value" = 1021 : i32}> : () -> i32
      "llvm.inline_asm"(%457, %381) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %458 = "arith.constant"() <{"value" = 1022 : i32}> : () -> i32
      "llvm.inline_asm"(%458, %361) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %459 = "arith.constant"() <{"value" = 1023 : i32}> : () -> i32
      "llvm.inline_asm"(%459, %392) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %460 = "arith.constant"() <{"value" = 1024 : i32}> : () -> i32
      "llvm.inline_asm"(%460, %392) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %461 = "arith.constant"() <{"value" = 1025 : i32}> : () -> i32
      "llvm.inline_asm"(%461, %363) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %462 = "arith.constant"() <{"value" = 1026 : i32}> : () -> i32
      "llvm.inline_asm"(%462, %363) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %463 = "arith.constant"() <{"value" = 1027 : i32}> : () -> i32
      "llvm.inline_asm"(%463, %363) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %464 = "arith.constant"() <{"value" = 1028 : i32}> : () -> i32
      "llvm.inline_asm"(%464, %363) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %465 = "arith.constant"() <{"value" = 1029 : i32}> : () -> i32
      "llvm.inline_asm"(%465, %363) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %466 = "arith.constant"() <{"value" = 1030 : i32}> : () -> i32
      "llvm.inline_asm"(%466, %363) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %467 = "arith.constant"() <{"value" = 1031 : i32}> : () -> i32
      "llvm.inline_asm"(%467, %363) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %468 = "arith.constant"() <{"value" = 1032 : i32}> : () -> i32
      "llvm.inline_asm"(%468, %363) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %469 = "arith.constant"() <{"value" = 1033 : i32}> : () -> i32
      "llvm.inline_asm"(%469, %393) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %470 = "arith.constant"() <{"value" = 1034 : i32}> : () -> i32
      "llvm.inline_asm"(%470, %349) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %471 = "arith.constant"() <{"value" = 1 : i5}> : () -> i5
      %472 = "arith.constant"() <{"value" = 1014 : i32}> : () -> i32
      "llvm.inline_asm"(%472, %471) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i5) -> ()
      %473 = "arith.constant"() <{"value" = 1035 : i32}> : () -> i32
      "llvm.inline_asm"(%473, %471) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i5) -> ()
      %474 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %475 = "arith.constant"() <{"value" = 1035 : i32}> : () -> i32
      "llvm.inline_asm"(%475, %474) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      "llvm.inline_asm"(%475, %474) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %476 = "arith.constant"() <{"value" = 1014 : i32}> : () -> i32
      "llvm.inline_asm"(%476, %474) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      "llvm.inline_asm"(%476, %474) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_cluster_hw_barrier}> : () -> ()
    "scf.if"(%6) ({
      %477 = "memref.extract_aligned_pointer_as_index"(%255) : (memref<1x32x32x16xi8>) -> index
      %478 = "memref.extract_aligned_pointer_as_index"(%32) : (memref<1x32x32x16xi8>) -> index
      %479 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %480 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %481 = "memref.dim"(%255, %480) : (memref<1x32x32x16xi8>, index) -> index
      %482 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %483 = "memref.dim"(%255, %482) : (memref<1x32x32x16xi8>, index) -> index
      %484 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %485 = "memref.dim"(%255, %484) : (memref<1x32x32x16xi8>, index) -> index
      %486 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %487 = "memref.dim"(%255, %486) : (memref<1x32x32x16xi8>, index) -> index
      %488 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %489 = "arith.constant"() <{"value" = 32 : index}> : () -> index
      %490 = "arith.constant"() <{"value" = 32 : index}> : () -> index
      %491 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %492 = "arith.constant"() <{"value" = 8 : index}> : () -> index
      %493 = "arith.constant"() <{"value" = 16384 : index}> : () -> index
      %494 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %495 = "arith.constant"() <{"value" = 8192 : index}> : () -> index
      %496 = "arith.constant"() <{"value" = 256 : index}> : () -> index
      %497 = "arith.constant"() <{"value" = 8 : index}> : () -> index
      %498 = "arith.constant"() <{"value" = 16384 : index}> : () -> index
      %499 = "arith.constant"() <{"value" = 16384 : index}> : () -> index
      %500 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %501 = "arith.constant"() <{"value" = 8192 : index}> : () -> index
      %502 = "arith.constant"() <{"value" = 256 : index}> : () -> index
      %503 = "arith.constant"() <{"value" = 8 : index}> : () -> index
      %504 = "arith.constant"() <{"value" = 16384 : index}> : () -> index
      %505 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %506 = "memref.dim"(%255, %505) : (memref<1x32x32x16xi8>, index) -> index
      %507 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %508 = "memref.dim"(%255, %507) : (memref<1x32x32x16xi8>, index) -> index
      %509 = "arith.muli"(%506, %508) : (index, index) -> index
      %510 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %511 = "memref.dim"(%255, %510) : (memref<1x32x32x16xi8>, index) -> index
      %512 = "arith.muli"(%509, %511) : (index, index) -> index
      %513 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %514 = "memref.dim"(%255, %513) : (memref<1x32x32x16xi8>, index) -> index
      %515 = "arith.muli"(%512, %514) : (index, index) -> index
      %516 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %517 = "arith.muli"(%515, %516) : (index, index) -> index
      "func.call"(%477, %478, %517) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    %518 = "memref.get_global"() <{"name" = @_static_const_2}> : () -> memref<1x34x34x16xi8>
    %519 = "memref.subview"(%518) <{"operandSegmentSizes" = array<i32: 1, 0, 0, 0>, "static_offsets" = array<i64: 0, 1, 1, 0>, "static_sizes" = array<i64: 1, 32, 32, 16>, "static_strides" = array<i64: 1, 1, 1, 1>}> : (memref<1x34x34x16xi8>) -> memref<1x32x32x16xi8, strided<[18496, 544, 16, 1], offset: 560>>
    "scf.if"(%6) ({
      %520 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %521 = "memref.dim"(%32, %520) : (memref<1x32x32x16xi8>, index) -> index
      %522 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %523 = "memref.dim"(%32, %522) : (memref<1x32x32x16xi8>, index) -> index
      %524 = "arith.muli"(%521, %523) : (index, index) -> index
      %525 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %526 = "memref.dim"(%32, %525) : (memref<1x32x32x16xi8>, index) -> index
      %527 = "arith.muli"(%524, %526) : (index, index) -> index
      %528 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %529 = "memref.dim"(%32, %528) : (memref<1x32x32x16xi8>, index) -> index
      %530 = "arith.muli"(%527, %529) : (index, index) -> index
      %531 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %532 = "arith.muli"(%530, %531) : (index, index) -> index
      %533 = "memref.extract_aligned_pointer_as_index"(%32) : (memref<1x32x32x16xi8>) -> index
      %534 = "memref.extract_aligned_pointer_as_index"(%519) : (memref<1x32x32x16xi8, strided<[18496, 544, 16, 1], offset: 560>>) -> index
      "func.call"(%533, %534, %532) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_clear_l1}> : () -> ()
    %535 = "memref.get_global"() <{"name" = @__constant_16x3x3x16xi8}> : () -> memref<16x3x3x16xi8>
    %536 = "memref.get_global"() <{"name" = @__constant_16xi32_0}> : () -> memref<16xi32>
    %537 = "memref.get_global"() <{"name" = @_static_const_3}> : () -> memref<1x32x32x16xi8>
    %538 = "arith.constant"() <{"value" = 16 : index}> : () -> index
    %539 = "arith.constant"() <{"value" = 4 : index}> : () -> index
    %540 = "arith.muli"(%538, %539) : (index, index) -> index
    %541 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %542 = "func.call"(%540, %541) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %543 = "llvm.load"(%542) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %544 = "llvm.extractvalue"(%543) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %545 = "llvm.extractvalue"(%543) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %546 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %547 = "llvm.insertvalue"(%546, %544) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %548 = "llvm.insertvalue"(%547, %545) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %549 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %550 = "llvm.insertvalue"(%548, %549) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %551 = "builtin.unrealized_conversion_cast"(%538) : (index) -> i32
    %552 = "llvm.insertvalue"(%550, %551) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %553 = "builtin.unrealized_conversion_cast"(%552) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>) -> memref<16xi32>
    %554 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %555 = "arith.constant"() <{"value" = 34 : index}> : () -> index
    %556 = "arith.constant"() <{"value" = 34 : index}> : () -> index
    %557 = "arith.constant"() <{"value" = 16 : index}> : () -> index
    %558 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %559 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %560 = "arith.constant"() <{"value" = 34 : index}> : () -> index
    %561 = "arith.constant"() <{"value" = 34 : index}> : () -> index
    %562 = "arith.constant"() <{"value" = 2 : index}> : () -> index
    %563 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %564 = "arith.constant"() <{"value" = 18496 : index}> : () -> index
    %565 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %566 = "arith.constant"() <{"value" = 9248 : index}> : () -> index
    %567 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %568 = "arith.constant"() <{"value" = 272 : index}> : () -> index
    %569 = "arith.constant"() <{"value" = 18496 : index}> : () -> index
    %570 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %571 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %572 = "arith.subi"(%559, %570) : (index, index) -> index
    %573 = "arith.muli"(%572, %569) : (index, index) -> index
    %574 = "arith.addi"(%571, %573) : (index, index) -> index
    %575 = "arith.subi"(%560, %570) : (index, index) -> index
    %576 = "arith.muli"(%575, %568) : (index, index) -> index
    %577 = "arith.addi"(%574, %576) : (index, index) -> index
    %578 = "arith.subi"(%561, %570) : (index, index) -> index
    %579 = "arith.muli"(%578, %567) : (index, index) -> index
    %580 = "arith.addi"(%577, %579) : (index, index) -> index
    %581 = "arith.subi"(%562, %570) : (index, index) -> index
    %582 = "arith.muli"(%581, %566) : (index, index) -> index
    %583 = "arith.addi"(%580, %582) : (index, index) -> index
    %584 = "arith.subi"(%563, %570) : (index, index) -> index
    %585 = "arith.muli"(%584, %565) : (index, index) -> index
    %586 = "arith.addi"(%583, %585) : (index, index) -> index
    %587 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %588 = "arith.addi"(%586, %587) : (index, index) -> index
    %589 = "arith.muli"(%570, %588) : (index, index) -> index
    %590 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %591 = "arith.muli"(%590, %587) : (index, index) -> index
    %592 = "arith.addi"(%589, %591) : (index, index) -> index
    %593 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %594 = "func.call"(%592, %593) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %595 = "llvm.load"(%594) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %596 = "llvm.extractvalue"(%595) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %597 = "llvm.extractvalue"(%595) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %598 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %599 = "llvm.insertvalue"(%598, %596) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %600 = "llvm.insertvalue"(%599, %597) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %601 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %602 = "llvm.insertvalue"(%600, %601) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %603 = "builtin.unrealized_conversion_cast"(%554) : (index) -> i32
    %604 = "llvm.insertvalue"(%602, %603) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %605 = "builtin.unrealized_conversion_cast"(%555) : (index) -> i32
    %606 = "llvm.insertvalue"(%604, %605) <{"position" = array<i64: 3, 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %607 = "builtin.unrealized_conversion_cast"(%556) : (index) -> i32
    %608 = "llvm.insertvalue"(%606, %607) <{"position" = array<i64: 3, 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %609 = "builtin.unrealized_conversion_cast"(%557) : (index) -> i32
    %610 = "llvm.insertvalue"(%608, %609) <{"position" = array<i64: 3, 3>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %611 = "builtin.unrealized_conversion_cast"(%610) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>) -> memref<1x34x34x16xi8>
    %612 = "arith.constant"() <{"value" = 16 : index}> : () -> index
    %613 = "arith.constant"() <{"value" = 3 : index}> : () -> index
    %614 = "arith.constant"() <{"value" = 3 : index}> : () -> index
    %615 = "arith.constant"() <{"value" = 16 : index}> : () -> index
    %616 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %617 = "arith.constant"() <{"value" = 2 : index}> : () -> index
    %618 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %619 = "arith.constant"() <{"value" = 3 : index}> : () -> index
    %620 = "arith.constant"() <{"value" = 3 : index}> : () -> index
    %621 = "arith.constant"() <{"value" = 2 : index}> : () -> index
    %622 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %623 = "arith.constant"() <{"value" = 1152 : index}> : () -> index
    %624 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %625 = "arith.constant"() <{"value" = 576 : index}> : () -> index
    %626 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %627 = "arith.constant"() <{"value" = 192 : index}> : () -> index
    %628 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %629 = "arith.constant"() <{"value" = 1152 : index}> : () -> index
    %630 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %631 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %632 = "arith.subi"(%617, %630) : (index, index) -> index
    %633 = "arith.muli"(%632, %629) : (index, index) -> index
    %634 = "arith.addi"(%631, %633) : (index, index) -> index
    %635 = "arith.subi"(%618, %630) : (index, index) -> index
    %636 = "arith.muli"(%635, %628) : (index, index) -> index
    %637 = "arith.addi"(%634, %636) : (index, index) -> index
    %638 = "arith.subi"(%619, %630) : (index, index) -> index
    %639 = "arith.muli"(%638, %627) : (index, index) -> index
    %640 = "arith.addi"(%637, %639) : (index, index) -> index
    %641 = "arith.subi"(%620, %630) : (index, index) -> index
    %642 = "arith.muli"(%641, %626) : (index, index) -> index
    %643 = "arith.addi"(%640, %642) : (index, index) -> index
    %644 = "arith.subi"(%621, %630) : (index, index) -> index
    %645 = "arith.muli"(%644, %625) : (index, index) -> index
    %646 = "arith.addi"(%643, %645) : (index, index) -> index
    %647 = "arith.subi"(%622, %630) : (index, index) -> index
    %648 = "arith.muli"(%647, %624) : (index, index) -> index
    %649 = "arith.addi"(%646, %648) : (index, index) -> index
    %650 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %651 = "arith.addi"(%649, %650) : (index, index) -> index
    %652 = "arith.muli"(%630, %651) : (index, index) -> index
    %653 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %654 = "arith.muli"(%653, %650) : (index, index) -> index
    %655 = "arith.addi"(%652, %654) : (index, index) -> index
    %656 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %657 = "func.call"(%655, %656) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %658 = "llvm.load"(%657) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %659 = "llvm.extractvalue"(%658) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %660 = "llvm.extractvalue"(%658) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %661 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %662 = "llvm.insertvalue"(%661, %659) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %663 = "llvm.insertvalue"(%662, %660) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %664 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %665 = "llvm.insertvalue"(%663, %664) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %666 = "builtin.unrealized_conversion_cast"(%612) : (index) -> i32
    %667 = "llvm.insertvalue"(%665, %666) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %668 = "builtin.unrealized_conversion_cast"(%613) : (index) -> i32
    %669 = "llvm.insertvalue"(%667, %668) <{"position" = array<i64: 3, 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %670 = "builtin.unrealized_conversion_cast"(%614) : (index) -> i32
    %671 = "llvm.insertvalue"(%669, %670) <{"position" = array<i64: 3, 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %672 = "builtin.unrealized_conversion_cast"(%615) : (index) -> i32
    %673 = "llvm.insertvalue"(%671, %672) <{"position" = array<i64: 3, 3>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %674 = "builtin.unrealized_conversion_cast"(%673) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>) -> memref<16x3x3x16xi8>
    %675 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %676 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %677 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %678 = "arith.constant"() <{"value" = 16 : index}> : () -> index
    %679 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %680 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %681 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %682 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %683 = "arith.constant"() <{"value" = 2 : index}> : () -> index
    %684 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %685 = "arith.constant"() <{"value" = 16384 : index}> : () -> index
    %686 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %687 = "arith.constant"() <{"value" = 8192 : index}> : () -> index
    %688 = "arith.constant"() <{"value" = 256 : index}> : () -> index
    %689 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %690 = "arith.constant"() <{"value" = 16384 : index}> : () -> index
    %691 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %692 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %693 = "arith.subi"(%680, %691) : (index, index) -> index
    %694 = "arith.muli"(%693, %690) : (index, index) -> index
    %695 = "arith.addi"(%692, %694) : (index, index) -> index
    %696 = "arith.subi"(%681, %691) : (index, index) -> index
    %697 = "arith.muli"(%696, %689) : (index, index) -> index
    %698 = "arith.addi"(%695, %697) : (index, index) -> index
    %699 = "arith.subi"(%682, %691) : (index, index) -> index
    %700 = "arith.muli"(%699, %688) : (index, index) -> index
    %701 = "arith.addi"(%698, %700) : (index, index) -> index
    %702 = "arith.subi"(%683, %691) : (index, index) -> index
    %703 = "arith.muli"(%702, %687) : (index, index) -> index
    %704 = "arith.addi"(%701, %703) : (index, index) -> index
    %705 = "arith.subi"(%684, %691) : (index, index) -> index
    %706 = "arith.muli"(%705, %686) : (index, index) -> index
    %707 = "arith.addi"(%704, %706) : (index, index) -> index
    %708 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %709 = "arith.addi"(%707, %708) : (index, index) -> index
    %710 = "arith.muli"(%691, %709) : (index, index) -> index
    %711 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %712 = "arith.muli"(%711, %708) : (index, index) -> index
    %713 = "arith.addi"(%710, %712) : (index, index) -> index
    %714 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %715 = "func.call"(%713, %714) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %716 = "llvm.load"(%715) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %717 = "llvm.extractvalue"(%716) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %718 = "llvm.extractvalue"(%716) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %719 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %720 = "llvm.insertvalue"(%719, %717) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %721 = "llvm.insertvalue"(%720, %718) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %722 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %723 = "llvm.insertvalue"(%721, %722) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %724 = "builtin.unrealized_conversion_cast"(%675) : (index) -> i32
    %725 = "llvm.insertvalue"(%723, %724) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %726 = "builtin.unrealized_conversion_cast"(%676) : (index) -> i32
    %727 = "llvm.insertvalue"(%725, %726) <{"position" = array<i64: 3, 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %728 = "builtin.unrealized_conversion_cast"(%677) : (index) -> i32
    %729 = "llvm.insertvalue"(%727, %728) <{"position" = array<i64: 3, 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %730 = "builtin.unrealized_conversion_cast"(%678) : (index) -> i32
    %731 = "llvm.insertvalue"(%729, %730) <{"position" = array<i64: 3, 3>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %732 = "builtin.unrealized_conversion_cast"(%731) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>) -> memref<1x32x32x16xi8>
    "scf.if"(%6) ({
      %733 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %734 = "memref.dim"(%535, %733) : (memref<16x3x3x16xi8>, index) -> index
      %735 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %736 = "memref.dim"(%535, %735) : (memref<16x3x3x16xi8>, index) -> index
      %737 = "arith.muli"(%734, %736) : (index, index) -> index
      %738 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %739 = "memref.dim"(%535, %738) : (memref<16x3x3x16xi8>, index) -> index
      %740 = "arith.muli"(%737, %739) : (index, index) -> index
      %741 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %742 = "memref.dim"(%535, %741) : (memref<16x3x3x16xi8>, index) -> index
      %743 = "arith.muli"(%740, %742) : (index, index) -> index
      %744 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %745 = "arith.muli"(%743, %744) : (index, index) -> index
      %746 = "memref.extract_aligned_pointer_as_index"(%535) : (memref<16x3x3x16xi8>) -> index
      %747 = "memref.extract_aligned_pointer_as_index"(%674) : (memref<16x3x3x16xi8>) -> index
      "func.call"(%746, %747, %745) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      %748 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %749 = "memref.dim"(%518, %748) : (memref<1x34x34x16xi8>, index) -> index
      %750 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %751 = "memref.dim"(%518, %750) : (memref<1x34x34x16xi8>, index) -> index
      %752 = "arith.muli"(%749, %751) : (index, index) -> index
      %753 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %754 = "memref.dim"(%518, %753) : (memref<1x34x34x16xi8>, index) -> index
      %755 = "arith.muli"(%752, %754) : (index, index) -> index
      %756 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %757 = "memref.dim"(%518, %756) : (memref<1x34x34x16xi8>, index) -> index
      %758 = "arith.muli"(%755, %757) : (index, index) -> index
      %759 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %760 = "arith.muli"(%758, %759) : (index, index) -> index
      %761 = "memref.extract_aligned_pointer_as_index"(%518) : (memref<1x34x34x16xi8>) -> index
      %762 = "memref.extract_aligned_pointer_as_index"(%611) : (memref<1x34x34x16xi8>) -> index
      "func.call"(%761, %762, %760) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      %763 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %764 = "memref.dim"(%536, %763) : (memref<16xi32>, index) -> index
      %765 = "arith.constant"() <{"value" = 4 : index}> : () -> index
      %766 = "arith.muli"(%764, %765) : (index, index) -> index
      %767 = "memref.extract_aligned_pointer_as_index"(%536) : (memref<16xi32>) -> index
      %768 = "memref.extract_aligned_pointer_as_index"(%553) : (memref<16xi32>) -> index
      "func.call"(%767, %768, %766) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_cluster_hw_barrier}> : () -> ()
    "scf.if"(%4) ({
      %769 = "memref.extract_aligned_pointer_as_index"(%611) : (memref<1x34x34x16xi8>) -> index
      %770 = "memref.extract_aligned_pointer_as_index"(%674) : (memref<16x3x3x16xi8>) -> index
      %771 = "memref.extract_aligned_pointer_as_index"(%732) : (memref<1x32x32x16xi8>) -> index
      %772 = "memref.extract_aligned_pointer_as_index"(%553) : (memref<16xi32>) -> index
      %773 = "memref.extract_aligned_pointer_as_index"(%553) : (memref<16xi32>) -> index
      %774 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %775 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %776 = "arith.constant"() <{"value" = 3 : i32}> : () -> i32
      %777 = "arith.constant"() <{"value" = 3 : i32}> : () -> i32
      %778 = "arith.constant"() <{"value" = 2 : i32}> : () -> i32
      %779 = "arith.constant"() <{"value" = 2 : i32}> : () -> i32
      %780 = "arith.constant"() <{"value" = 4 : i32}> : () -> i32
      %781 = "arith.constant"() <{"value" = 32 : i32}> : () -> i32
      %782 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %783 = "arith.constant"() <{"value" = 272 : i32}> : () -> i32
      %784 = "arith.constant"() <{"value" = 9248 : i32}> : () -> i32
      %785 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %786 = "arith.constant"() <{"value" = 2176 : i32}> : () -> i32
      %787 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %788 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %789 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %790 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %791 = "arith.constant"() <{"value" = 36 : i32}> : () -> i32
      %792 = "arith.constant"() <{"value" = 128 : i32}> : () -> i32
      %793 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %794 = "arith.constant"() <{"value" = 64 : i32}> : () -> i32
      %795 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %796 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %797 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %798 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %799 = "arith.constant"() <{"value" = 2 : i32}> : () -> i32
      %800 = "arith.constant"() <{"value" = 128 : i32}> : () -> i32
      %801 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %802 = "arith.constant"() <{"value" = 8192 : i32}> : () -> i32
      %803 = "arith.constant"() <{"value" = 64 : i32}> : () -> i32
      %804 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %805 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %806 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %807 = "arith.constant"() <{"value" = 2 : i32}> : () -> i32
      %808 = "arith.constant"() <{"value" = 128 : i32}> : () -> i32
      %809 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %810 = "arith.constant"() <{"value" = 32 : i32}> : () -> i32
      %811 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %812 = "arith.constant"() <{"value" = -1 : i32}> : () -> i32
      %813 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %814 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %815 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %816 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %817 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %818 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %819 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %820 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %821 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %822 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %823 = "arith.constant"() <{"value" = 18 : i32}> : () -> i32
      %824 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %825 = "arith.constant"() <{"value" = 256 : i32}> : () -> i32
      %826 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %827 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %828 = "arith.constant"() <{"value" = 255 : i32}> : () -> i32
      %829 = "arith.andi"(%10, %828) : (i32, i32) -> i32
      %830 = "arith.andi"(%11, %828) : (i32, i32) -> i32
      %831 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %832 = "arith.shli"(%829, %831) : (i32, i32) -> i32
      %833 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %834 = "arith.shli"(%830, %833) : (i32, i32) -> i32
      %835 = "arith.ori"(%832, %834) : (i32, i32) -> i32
      %836 = "arith.constant"() <{"value" = 127 : i32}> : () -> i32
      %837 = "arith.constant"() <{"value" = -128 : i32}> : () -> i32
      %838 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %839 = "arith.constant"() <{"value" = 39 : i32}> : () -> i32
      %840 = "arith.constant"() <{"value" = 1459272781 : i32}> : () -> i32
      %841 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %842 = "arith.constant"() <{"value" = -128 : i32}> : () -> i32
      %843 = "arith.constant"() <{"value" = 255 : i32}> : () -> i32
      %844 = "arith.andi"(%836, %843) : (i32, i32) -> i32
      %845 = "arith.andi"(%837, %843) : (i32, i32) -> i32
      %846 = "arith.andi"(%841, %843) : (i32, i32) -> i32
      %847 = "arith.andi"(%842, %843) : (i32, i32) -> i32
      %848 = "arith.constant"() <{"value" = 24 : i32}> : () -> i32
      %849 = "arith.shli"(%845, %848) : (i32, i32) -> i32
      %850 = "arith.constant"() <{"value" = 16 : i32}> : () -> i32
      %851 = "arith.shli"(%844, %850) : (i32, i32) -> i32
      %852 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %853 = "arith.shli"(%847, %852) : (i32, i32) -> i32
      %854 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %855 = "arith.shli"(%846, %854) : (i32, i32) -> i32
      %856 = "arith.ori"(%849, %851) : (i32, i32) -> i32
      %857 = "arith.ori"(%853, %855) : (i32, i32) -> i32
      %858 = "arith.ori"(%856, %857) : (i32, i32) -> i32
      %859 = "arith.constant"() <{"value" = 24 : i32}> : () -> i32
      %860 = "arith.shli"(%839, %859) : (i32, i32) -> i32
      %861 = "arith.constant"() <{"value" = 16 : i32}> : () -> i32
      %862 = "arith.shli"(%839, %861) : (i32, i32) -> i32
      %863 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %864 = "arith.shli"(%839, %863) : (i32, i32) -> i32
      %865 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %866 = "arith.shli"(%839, %865) : (i32, i32) -> i32
      %867 = "arith.ori"(%860, %862) : (i32, i32) -> i32
      %868 = "arith.ori"(%864, %866) : (i32, i32) -> i32
      %869 = "arith.ori"(%867, %868) : (i32, i32) -> i32
      %870 = "arith.constant"() <{"value" = 256 : i32}> : () -> i32
      %871 = "arith.index_cast"(%769) : (index) -> i32
      %872 = "arith.constant"() <{"value" = 960 : i32}> : () -> i32
      "llvm.inline_asm"(%872, %871) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %873 = "arith.constant"() <{"value" = 961 : i32}> : () -> i32
      "llvm.inline_asm"(%873, %774) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %874 = "arith.constant"() <{"value" = 962 : i32}> : () -> i32
      "llvm.inline_asm"(%874, %775) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %875 = "arith.constant"() <{"value" = 963 : i32}> : () -> i32
      "llvm.inline_asm"(%875, %776) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %876 = "arith.constant"() <{"value" = 964 : i32}> : () -> i32
      "llvm.inline_asm"(%876, %777) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %877 = "arith.constant"() <{"value" = 965 : i32}> : () -> i32
      "llvm.inline_asm"(%877, %778) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %878 = "arith.constant"() <{"value" = 966 : i32}> : () -> i32
      "llvm.inline_asm"(%878, %779) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %879 = "arith.constant"() <{"value" = 967 : i32}> : () -> i32
      "llvm.inline_asm"(%879, %780) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %880 = "arith.constant"() <{"value" = 968 : i32}> : () -> i32
      "llvm.inline_asm"(%880, %781) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %881 = "arith.constant"() <{"value" = 969 : i32}> : () -> i32
      "llvm.inline_asm"(%881, %782) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %882 = "arith.constant"() <{"value" = 970 : i32}> : () -> i32
      "llvm.inline_asm"(%882, %783) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %883 = "arith.constant"() <{"value" = 971 : i32}> : () -> i32
      "llvm.inline_asm"(%883, %784) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %884 = "arith.constant"() <{"value" = 972 : i32}> : () -> i32
      "llvm.inline_asm"(%884, %785) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %885 = "arith.constant"() <{"value" = 973 : i32}> : () -> i32
      "llvm.inline_asm"(%885, %786) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %886 = "arith.constant"() <{"value" = 974 : i32}> : () -> i32
      "llvm.inline_asm"(%886, %787) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %887 = "arith.index_cast"(%770) : (index) -> i32
      %888 = "arith.constant"() <{"value" = 975 : i32}> : () -> i32
      "llvm.inline_asm"(%888, %887) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %889 = "arith.constant"() <{"value" = 976 : i32}> : () -> i32
      "llvm.inline_asm"(%889, %788) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %890 = "arith.constant"() <{"value" = 977 : i32}> : () -> i32
      "llvm.inline_asm"(%890, %789) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %891 = "arith.constant"() <{"value" = 978 : i32}> : () -> i32
      "llvm.inline_asm"(%891, %790) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %892 = "arith.constant"() <{"value" = 979 : i32}> : () -> i32
      "llvm.inline_asm"(%892, %791) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %893 = "arith.constant"() <{"value" = 980 : i32}> : () -> i32
      "llvm.inline_asm"(%893, %792) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %894 = "arith.constant"() <{"value" = 981 : i32}> : () -> i32
      "llvm.inline_asm"(%894, %793) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %895 = "arith.constant"() <{"value" = 982 : i32}> : () -> i32
      "llvm.inline_asm"(%895, %794) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %896 = "arith.constant"() <{"value" = 983 : i32}> : () -> i32
      "llvm.inline_asm"(%896, %795) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %897 = "arith.index_cast"(%771) : (index) -> i32
      %898 = "arith.constant"() <{"value" = 984 : i32}> : () -> i32
      "llvm.inline_asm"(%898, %897) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %899 = "arith.constant"() <{"value" = 985 : i32}> : () -> i32
      "llvm.inline_asm"(%899, %796) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %900 = "arith.constant"() <{"value" = 986 : i32}> : () -> i32
      "llvm.inline_asm"(%900, %797) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %901 = "arith.constant"() <{"value" = 987 : i32}> : () -> i32
      "llvm.inline_asm"(%901, %798) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %902 = "arith.constant"() <{"value" = 988 : i32}> : () -> i32
      "llvm.inline_asm"(%902, %799) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %903 = "arith.constant"() <{"value" = 989 : i32}> : () -> i32
      "llvm.inline_asm"(%903, %800) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %904 = "arith.constant"() <{"value" = 990 : i32}> : () -> i32
      "llvm.inline_asm"(%904, %801) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %905 = "arith.constant"() <{"value" = 991 : i32}> : () -> i32
      "llvm.inline_asm"(%905, %802) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %906 = "arith.constant"() <{"value" = 992 : i32}> : () -> i32
      "llvm.inline_asm"(%906, %803) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %907 = "arith.index_cast"(%772) : (index) -> i32
      %908 = "arith.constant"() <{"value" = 993 : i32}> : () -> i32
      "llvm.inline_asm"(%908, %907) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %909 = "arith.constant"() <{"value" = 994 : i32}> : () -> i32
      "llvm.inline_asm"(%909, %804) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %910 = "arith.constant"() <{"value" = 995 : i32}> : () -> i32
      "llvm.inline_asm"(%910, %805) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %911 = "arith.constant"() <{"value" = 996 : i32}> : () -> i32
      "llvm.inline_asm"(%911, %806) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %912 = "arith.constant"() <{"value" = 997 : i32}> : () -> i32
      "llvm.inline_asm"(%912, %807) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %913 = "arith.constant"() <{"value" = 998 : i32}> : () -> i32
      "llvm.inline_asm"(%913, %808) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %914 = "arith.constant"() <{"value" = 999 : i32}> : () -> i32
      "llvm.inline_asm"(%914, %809) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %915 = "arith.constant"() <{"value" = 1000 : i32}> : () -> i32
      "llvm.inline_asm"(%915, %810) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %916 = "arith.constant"() <{"value" = 1001 : i32}> : () -> i32
      "llvm.inline_asm"(%916, %811) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %917 = "arith.constant"() <{"value" = 1002 : i32}> : () -> i32
      "llvm.inline_asm"(%917, %812) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %918 = "arith.index_cast"(%773) : (index) -> i32
      %919 = "arith.constant"() <{"value" = 1003 : i32}> : () -> i32
      "llvm.inline_asm"(%919, %918) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %920 = "arith.constant"() <{"value" = 1004 : i32}> : () -> i32
      "llvm.inline_asm"(%920, %813) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %921 = "arith.constant"() <{"value" = 1005 : i32}> : () -> i32
      "llvm.inline_asm"(%921, %814) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %922 = "arith.constant"() <{"value" = 1006 : i32}> : () -> i32
      "llvm.inline_asm"(%922, %815) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %923 = "arith.constant"() <{"value" = 1007 : i32}> : () -> i32
      "llvm.inline_asm"(%923, %816) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %924 = "arith.constant"() <{"value" = 1008 : i32}> : () -> i32
      "llvm.inline_asm"(%924, %817) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %925 = "arith.constant"() <{"value" = 1009 : i32}> : () -> i32
      "llvm.inline_asm"(%925, %818) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %926 = "arith.constant"() <{"value" = 1010 : i32}> : () -> i32
      "llvm.inline_asm"(%926, %819) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %927 = "arith.constant"() <{"value" = 1011 : i32}> : () -> i32
      "llvm.inline_asm"(%927, %820) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %928 = "arith.constant"() <{"value" = 1012 : i32}> : () -> i32
      "llvm.inline_asm"(%928, %821) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %929 = "arith.constant"() <{"value" = 1013 : i32}> : () -> i32
      "llvm.inline_asm"(%929, %822) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %930 = "arith.constant"() <{"value" = 1017 : i32}> : () -> i32
      "llvm.inline_asm"(%930, %823) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %931 = "arith.constant"() <{"value" = 1018 : i32}> : () -> i32
      "llvm.inline_asm"(%931, %824) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %932 = "arith.constant"() <{"value" = 1019 : i32}> : () -> i32
      "llvm.inline_asm"(%932, %825) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %933 = "arith.constant"() <{"value" = 1020 : i32}> : () -> i32
      "llvm.inline_asm"(%933, %835) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %934 = "arith.constant"() <{"value" = 1021 : i32}> : () -> i32
      "llvm.inline_asm"(%934, %858) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %935 = "arith.constant"() <{"value" = 1022 : i32}> : () -> i32
      "llvm.inline_asm"(%935, %838) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %936 = "arith.constant"() <{"value" = 1023 : i32}> : () -> i32
      "llvm.inline_asm"(%936, %869) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %937 = "arith.constant"() <{"value" = 1024 : i32}> : () -> i32
      "llvm.inline_asm"(%937, %869) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %938 = "arith.constant"() <{"value" = 1025 : i32}> : () -> i32
      "llvm.inline_asm"(%938, %840) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %939 = "arith.constant"() <{"value" = 1026 : i32}> : () -> i32
      "llvm.inline_asm"(%939, %840) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %940 = "arith.constant"() <{"value" = 1027 : i32}> : () -> i32
      "llvm.inline_asm"(%940, %840) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %941 = "arith.constant"() <{"value" = 1028 : i32}> : () -> i32
      "llvm.inline_asm"(%941, %840) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %942 = "arith.constant"() <{"value" = 1029 : i32}> : () -> i32
      "llvm.inline_asm"(%942, %840) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %943 = "arith.constant"() <{"value" = 1030 : i32}> : () -> i32
      "llvm.inline_asm"(%943, %840) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %944 = "arith.constant"() <{"value" = 1031 : i32}> : () -> i32
      "llvm.inline_asm"(%944, %840) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %945 = "arith.constant"() <{"value" = 1032 : i32}> : () -> i32
      "llvm.inline_asm"(%945, %840) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %946 = "arith.constant"() <{"value" = 1033 : i32}> : () -> i32
      "llvm.inline_asm"(%946, %870) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %947 = "arith.constant"() <{"value" = 1034 : i32}> : () -> i32
      "llvm.inline_asm"(%947, %826) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %948 = "arith.constant"() <{"value" = 1 : i5}> : () -> i5
      %949 = "arith.constant"() <{"value" = 1014 : i32}> : () -> i32
      "llvm.inline_asm"(%949, %948) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i5) -> ()
      %950 = "arith.constant"() <{"value" = 1035 : i32}> : () -> i32
      "llvm.inline_asm"(%950, %948) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i5) -> ()
      %951 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %952 = "arith.constant"() <{"value" = 1035 : i32}> : () -> i32
      "llvm.inline_asm"(%952, %951) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      "llvm.inline_asm"(%952, %951) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %953 = "arith.constant"() <{"value" = 1014 : i32}> : () -> i32
      "llvm.inline_asm"(%953, %951) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      "llvm.inline_asm"(%953, %951) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_cluster_hw_barrier}> : () -> ()
    "scf.if"(%6) ({
      %954 = "memref.extract_aligned_pointer_as_index"(%732) : (memref<1x32x32x16xi8>) -> index
      %955 = "memref.extract_aligned_pointer_as_index"(%537) : (memref<1x32x32x16xi8>) -> index
      %956 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %957 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %958 = "memref.dim"(%732, %957) : (memref<1x32x32x16xi8>, index) -> index
      %959 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %960 = "memref.dim"(%732, %959) : (memref<1x32x32x16xi8>, index) -> index
      %961 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %962 = "memref.dim"(%732, %961) : (memref<1x32x32x16xi8>, index) -> index
      %963 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %964 = "memref.dim"(%732, %963) : (memref<1x32x32x16xi8>, index) -> index
      %965 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %966 = "arith.constant"() <{"value" = 32 : index}> : () -> index
      %967 = "arith.constant"() <{"value" = 32 : index}> : () -> index
      %968 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %969 = "arith.constant"() <{"value" = 8 : index}> : () -> index
      %970 = "arith.constant"() <{"value" = 16384 : index}> : () -> index
      %971 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %972 = "arith.constant"() <{"value" = 8192 : index}> : () -> index
      %973 = "arith.constant"() <{"value" = 256 : index}> : () -> index
      %974 = "arith.constant"() <{"value" = 8 : index}> : () -> index
      %975 = "arith.constant"() <{"value" = 16384 : index}> : () -> index
      %976 = "arith.constant"() <{"value" = 16384 : index}> : () -> index
      %977 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %978 = "arith.constant"() <{"value" = 8192 : index}> : () -> index
      %979 = "arith.constant"() <{"value" = 256 : index}> : () -> index
      %980 = "arith.constant"() <{"value" = 8 : index}> : () -> index
      %981 = "arith.constant"() <{"value" = 16384 : index}> : () -> index
      %982 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %983 = "memref.dim"(%732, %982) : (memref<1x32x32x16xi8>, index) -> index
      %984 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %985 = "memref.dim"(%732, %984) : (memref<1x32x32x16xi8>, index) -> index
      %986 = "arith.muli"(%983, %985) : (index, index) -> index
      %987 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %988 = "memref.dim"(%732, %987) : (memref<1x32x32x16xi8>, index) -> index
      %989 = "arith.muli"(%986, %988) : (index, index) -> index
      %990 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %991 = "memref.dim"(%732, %990) : (memref<1x32x32x16xi8>, index) -> index
      %992 = "arith.muli"(%989, %991) : (index, index) -> index
      %993 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %994 = "arith.muli"(%992, %993) : (index, index) -> index
      "func.call"(%954, %955, %994) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    %995 = "memref.get_global"() <{"name" = @_static_const_4}> : () -> memref<1x34x34x16xi8>
    %996 = "memref.subview"(%995) <{"operandSegmentSizes" = array<i32: 1, 0, 0, 0>, "static_offsets" = array<i64: 0, 1, 1, 0>, "static_sizes" = array<i64: 1, 32, 32, 16>, "static_strides" = array<i64: 1, 1, 1, 1>}> : (memref<1x34x34x16xi8>) -> memref<1x32x32x16xi8, strided<[18496, 544, 16, 1], offset: 560>>
    "scf.if"(%6) ({
      %997 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %998 = "memref.dim"(%537, %997) : (memref<1x32x32x16xi8>, index) -> index
      %999 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %1000 = "memref.dim"(%537, %999) : (memref<1x32x32x16xi8>, index) -> index
      %1001 = "arith.muli"(%998, %1000) : (index, index) -> index
      %1002 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %1003 = "memref.dim"(%537, %1002) : (memref<1x32x32x16xi8>, index) -> index
      %1004 = "arith.muli"(%1001, %1003) : (index, index) -> index
      %1005 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %1006 = "memref.dim"(%537, %1005) : (memref<1x32x32x16xi8>, index) -> index
      %1007 = "arith.muli"(%1004, %1006) : (index, index) -> index
      %1008 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %1009 = "arith.muli"(%1007, %1008) : (index, index) -> index
      %1010 = "memref.extract_aligned_pointer_as_index"(%537) : (memref<1x32x32x16xi8>) -> index
      %1011 = "memref.extract_aligned_pointer_as_index"(%996) : (memref<1x32x32x16xi8, strided<[18496, 544, 16, 1], offset: 560>>) -> index
      "func.call"(%1010, %1011, %1009) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_clear_l1}> : () -> ()
    %1012 = "memref.get_global"() <{"name" = @__constant_16x3x3x16xi8_0}> : () -> memref<16x3x3x16xi8>
    %1013 = "memref.get_global"() <{"name" = @__constant_16xi32_1}> : () -> memref<16xi32>
    %1014 = "memref.get_global"() <{"name" = @_static_const_5}> : () -> memref<1x32x32x16xi32>
    %1015 = "arith.constant"() <{"value" = 16 : index}> : () -> index
    %1016 = "arith.constant"() <{"value" = 4 : index}> : () -> index
    %1017 = "arith.muli"(%1015, %1016) : (index, index) -> index
    %1018 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %1019 = "func.call"(%1017, %1018) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %1020 = "llvm.load"(%1019) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %1021 = "llvm.extractvalue"(%1020) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %1022 = "llvm.extractvalue"(%1020) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %1023 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %1024 = "llvm.insertvalue"(%1023, %1021) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %1025 = "llvm.insertvalue"(%1024, %1022) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %1026 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %1027 = "llvm.insertvalue"(%1025, %1026) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %1028 = "builtin.unrealized_conversion_cast"(%1015) : (index) -> i32
    %1029 = "llvm.insertvalue"(%1027, %1028) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %1030 = "builtin.unrealized_conversion_cast"(%1029) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>) -> memref<16xi32>
    %1031 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %1032 = "arith.constant"() <{"value" = 34 : index}> : () -> index
    %1033 = "arith.constant"() <{"value" = 34 : index}> : () -> index
    %1034 = "arith.constant"() <{"value" = 16 : index}> : () -> index
    %1035 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %1036 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %1037 = "arith.constant"() <{"value" = 34 : index}> : () -> index
    %1038 = "arith.constant"() <{"value" = 34 : index}> : () -> index
    %1039 = "arith.constant"() <{"value" = 2 : index}> : () -> index
    %1040 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %1041 = "arith.constant"() <{"value" = 18496 : index}> : () -> index
    %1042 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %1043 = "arith.constant"() <{"value" = 9248 : index}> : () -> index
    %1044 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %1045 = "arith.constant"() <{"value" = 272 : index}> : () -> index
    %1046 = "arith.constant"() <{"value" = 18496 : index}> : () -> index
    %1047 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %1048 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %1049 = "arith.subi"(%1036, %1047) : (index, index) -> index
    %1050 = "arith.muli"(%1049, %1046) : (index, index) -> index
    %1051 = "arith.addi"(%1048, %1050) : (index, index) -> index
    %1052 = "arith.subi"(%1037, %1047) : (index, index) -> index
    %1053 = "arith.muli"(%1052, %1045) : (index, index) -> index
    %1054 = "arith.addi"(%1051, %1053) : (index, index) -> index
    %1055 = "arith.subi"(%1038, %1047) : (index, index) -> index
    %1056 = "arith.muli"(%1055, %1044) : (index, index) -> index
    %1057 = "arith.addi"(%1054, %1056) : (index, index) -> index
    %1058 = "arith.subi"(%1039, %1047) : (index, index) -> index
    %1059 = "arith.muli"(%1058, %1043) : (index, index) -> index
    %1060 = "arith.addi"(%1057, %1059) : (index, index) -> index
    %1061 = "arith.subi"(%1040, %1047) : (index, index) -> index
    %1062 = "arith.muli"(%1061, %1042) : (index, index) -> index
    %1063 = "arith.addi"(%1060, %1062) : (index, index) -> index
    %1064 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %1065 = "arith.addi"(%1063, %1064) : (index, index) -> index
    %1066 = "arith.muli"(%1047, %1065) : (index, index) -> index
    %1067 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %1068 = "arith.muli"(%1067, %1064) : (index, index) -> index
    %1069 = "arith.addi"(%1066, %1068) : (index, index) -> index
    %1070 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %1071 = "func.call"(%1069, %1070) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %1072 = "llvm.load"(%1071) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %1073 = "llvm.extractvalue"(%1072) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %1074 = "llvm.extractvalue"(%1072) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %1075 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1076 = "llvm.insertvalue"(%1075, %1073) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1077 = "llvm.insertvalue"(%1076, %1074) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1078 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %1079 = "llvm.insertvalue"(%1077, %1078) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1080 = "builtin.unrealized_conversion_cast"(%1031) : (index) -> i32
    %1081 = "llvm.insertvalue"(%1079, %1080) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1082 = "builtin.unrealized_conversion_cast"(%1032) : (index) -> i32
    %1083 = "llvm.insertvalue"(%1081, %1082) <{"position" = array<i64: 3, 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1084 = "builtin.unrealized_conversion_cast"(%1033) : (index) -> i32
    %1085 = "llvm.insertvalue"(%1083, %1084) <{"position" = array<i64: 3, 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1086 = "builtin.unrealized_conversion_cast"(%1034) : (index) -> i32
    %1087 = "llvm.insertvalue"(%1085, %1086) <{"position" = array<i64: 3, 3>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1088 = "builtin.unrealized_conversion_cast"(%1087) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>) -> memref<1x34x34x16xi8>
    %1089 = "arith.constant"() <{"value" = 16 : index}> : () -> index
    %1090 = "arith.constant"() <{"value" = 3 : index}> : () -> index
    %1091 = "arith.constant"() <{"value" = 3 : index}> : () -> index
    %1092 = "arith.constant"() <{"value" = 16 : index}> : () -> index
    %1093 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %1094 = "arith.constant"() <{"value" = 2 : index}> : () -> index
    %1095 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %1096 = "arith.constant"() <{"value" = 3 : index}> : () -> index
    %1097 = "arith.constant"() <{"value" = 3 : index}> : () -> index
    %1098 = "arith.constant"() <{"value" = 2 : index}> : () -> index
    %1099 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %1100 = "arith.constant"() <{"value" = 1152 : index}> : () -> index
    %1101 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %1102 = "arith.constant"() <{"value" = 576 : index}> : () -> index
    %1103 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %1104 = "arith.constant"() <{"value" = 192 : index}> : () -> index
    %1105 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %1106 = "arith.constant"() <{"value" = 1152 : index}> : () -> index
    %1107 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %1108 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %1109 = "arith.subi"(%1094, %1107) : (index, index) -> index
    %1110 = "arith.muli"(%1109, %1106) : (index, index) -> index
    %1111 = "arith.addi"(%1108, %1110) : (index, index) -> index
    %1112 = "arith.subi"(%1095, %1107) : (index, index) -> index
    %1113 = "arith.muli"(%1112, %1105) : (index, index) -> index
    %1114 = "arith.addi"(%1111, %1113) : (index, index) -> index
    %1115 = "arith.subi"(%1096, %1107) : (index, index) -> index
    %1116 = "arith.muli"(%1115, %1104) : (index, index) -> index
    %1117 = "arith.addi"(%1114, %1116) : (index, index) -> index
    %1118 = "arith.subi"(%1097, %1107) : (index, index) -> index
    %1119 = "arith.muli"(%1118, %1103) : (index, index) -> index
    %1120 = "arith.addi"(%1117, %1119) : (index, index) -> index
    %1121 = "arith.subi"(%1098, %1107) : (index, index) -> index
    %1122 = "arith.muli"(%1121, %1102) : (index, index) -> index
    %1123 = "arith.addi"(%1120, %1122) : (index, index) -> index
    %1124 = "arith.subi"(%1099, %1107) : (index, index) -> index
    %1125 = "arith.muli"(%1124, %1101) : (index, index) -> index
    %1126 = "arith.addi"(%1123, %1125) : (index, index) -> index
    %1127 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %1128 = "arith.addi"(%1126, %1127) : (index, index) -> index
    %1129 = "arith.muli"(%1107, %1128) : (index, index) -> index
    %1130 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %1131 = "arith.muli"(%1130, %1127) : (index, index) -> index
    %1132 = "arith.addi"(%1129, %1131) : (index, index) -> index
    %1133 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %1134 = "func.call"(%1132, %1133) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %1135 = "llvm.load"(%1134) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %1136 = "llvm.extractvalue"(%1135) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %1137 = "llvm.extractvalue"(%1135) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %1138 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1139 = "llvm.insertvalue"(%1138, %1136) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1140 = "llvm.insertvalue"(%1139, %1137) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1141 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %1142 = "llvm.insertvalue"(%1140, %1141) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1143 = "builtin.unrealized_conversion_cast"(%1089) : (index) -> i32
    %1144 = "llvm.insertvalue"(%1142, %1143) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1145 = "builtin.unrealized_conversion_cast"(%1090) : (index) -> i32
    %1146 = "llvm.insertvalue"(%1144, %1145) <{"position" = array<i64: 3, 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1147 = "builtin.unrealized_conversion_cast"(%1091) : (index) -> i32
    %1148 = "llvm.insertvalue"(%1146, %1147) <{"position" = array<i64: 3, 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1149 = "builtin.unrealized_conversion_cast"(%1092) : (index) -> i32
    %1150 = "llvm.insertvalue"(%1148, %1149) <{"position" = array<i64: 3, 3>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1151 = "builtin.unrealized_conversion_cast"(%1150) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>) -> memref<16x3x3x16xi8>
    %1152 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %1153 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %1154 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %1155 = "arith.constant"() <{"value" = 16 : index}> : () -> index
    %1156 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %1157 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %1158 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %1159 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %1160 = "arith.constant"() <{"value" = 2 : index}> : () -> index
    %1161 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %1162 = "arith.constant"() <{"value" = 65536 : index}> : () -> index
    %1163 = "arith.constant"() <{"value" = 4 : index}> : () -> index
    %1164 = "arith.constant"() <{"value" = 32768 : index}> : () -> index
    %1165 = "arith.constant"() <{"value" = 1024 : index}> : () -> index
    %1166 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %1167 = "arith.constant"() <{"value" = 65536 : index}> : () -> index
    %1168 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %1169 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %1170 = "arith.subi"(%1157, %1168) : (index, index) -> index
    %1171 = "arith.muli"(%1170, %1167) : (index, index) -> index
    %1172 = "arith.addi"(%1169, %1171) : (index, index) -> index
    %1173 = "arith.subi"(%1158, %1168) : (index, index) -> index
    %1174 = "arith.muli"(%1173, %1166) : (index, index) -> index
    %1175 = "arith.addi"(%1172, %1174) : (index, index) -> index
    %1176 = "arith.subi"(%1159, %1168) : (index, index) -> index
    %1177 = "arith.muli"(%1176, %1165) : (index, index) -> index
    %1178 = "arith.addi"(%1175, %1177) : (index, index) -> index
    %1179 = "arith.subi"(%1160, %1168) : (index, index) -> index
    %1180 = "arith.muli"(%1179, %1164) : (index, index) -> index
    %1181 = "arith.addi"(%1178, %1180) : (index, index) -> index
    %1182 = "arith.subi"(%1161, %1168) : (index, index) -> index
    %1183 = "arith.muli"(%1182, %1163) : (index, index) -> index
    %1184 = "arith.addi"(%1181, %1183) : (index, index) -> index
    %1185 = "arith.constant"() <{"value" = 4 : index}> : () -> index
    %1186 = "arith.addi"(%1184, %1185) : (index, index) -> index
    %1187 = "arith.muli"(%1168, %1186) : (index, index) -> index
    %1188 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %1189 = "arith.muli"(%1188, %1185) : (index, index) -> index
    %1190 = "arith.addi"(%1187, %1189) : (index, index) -> index
    %1191 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %1192 = "func.call"(%1190, %1191) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %1193 = "llvm.load"(%1192) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %1194 = "llvm.extractvalue"(%1193) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %1195 = "llvm.extractvalue"(%1193) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %1196 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1197 = "llvm.insertvalue"(%1196, %1194) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1198 = "llvm.insertvalue"(%1197, %1195) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1199 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %1200 = "llvm.insertvalue"(%1198, %1199) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1201 = "builtin.unrealized_conversion_cast"(%1152) : (index) -> i32
    %1202 = "llvm.insertvalue"(%1200, %1201) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1203 = "builtin.unrealized_conversion_cast"(%1153) : (index) -> i32
    %1204 = "llvm.insertvalue"(%1202, %1203) <{"position" = array<i64: 3, 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1205 = "builtin.unrealized_conversion_cast"(%1154) : (index) -> i32
    %1206 = "llvm.insertvalue"(%1204, %1205) <{"position" = array<i64: 3, 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1207 = "builtin.unrealized_conversion_cast"(%1155) : (index) -> i32
    %1208 = "llvm.insertvalue"(%1206, %1207) <{"position" = array<i64: 3, 3>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1209 = "builtin.unrealized_conversion_cast"(%1208) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>) -> memref<1x32x32x16xi32>
    "scf.if"(%6) ({
      %1210 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %1211 = "memref.dim"(%1012, %1210) : (memref<16x3x3x16xi8>, index) -> index
      %1212 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %1213 = "memref.dim"(%1012, %1212) : (memref<16x3x3x16xi8>, index) -> index
      %1214 = "arith.muli"(%1211, %1213) : (index, index) -> index
      %1215 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %1216 = "memref.dim"(%1012, %1215) : (memref<16x3x3x16xi8>, index) -> index
      %1217 = "arith.muli"(%1214, %1216) : (index, index) -> index
      %1218 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %1219 = "memref.dim"(%1012, %1218) : (memref<16x3x3x16xi8>, index) -> index
      %1220 = "arith.muli"(%1217, %1219) : (index, index) -> index
      %1221 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %1222 = "arith.muli"(%1220, %1221) : (index, index) -> index
      %1223 = "memref.extract_aligned_pointer_as_index"(%1012) : (memref<16x3x3x16xi8>) -> index
      %1224 = "memref.extract_aligned_pointer_as_index"(%1151) : (memref<16x3x3x16xi8>) -> index
      "func.call"(%1223, %1224, %1222) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      %1225 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %1226 = "memref.dim"(%995, %1225) : (memref<1x34x34x16xi8>, index) -> index
      %1227 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %1228 = "memref.dim"(%995, %1227) : (memref<1x34x34x16xi8>, index) -> index
      %1229 = "arith.muli"(%1226, %1228) : (index, index) -> index
      %1230 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %1231 = "memref.dim"(%995, %1230) : (memref<1x34x34x16xi8>, index) -> index
      %1232 = "arith.muli"(%1229, %1231) : (index, index) -> index
      %1233 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %1234 = "memref.dim"(%995, %1233) : (memref<1x34x34x16xi8>, index) -> index
      %1235 = "arith.muli"(%1232, %1234) : (index, index) -> index
      %1236 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %1237 = "arith.muli"(%1235, %1236) : (index, index) -> index
      %1238 = "memref.extract_aligned_pointer_as_index"(%995) : (memref<1x34x34x16xi8>) -> index
      %1239 = "memref.extract_aligned_pointer_as_index"(%1088) : (memref<1x34x34x16xi8>) -> index
      "func.call"(%1238, %1239, %1237) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      %1240 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %1241 = "memref.dim"(%1013, %1240) : (memref<16xi32>, index) -> index
      %1242 = "arith.constant"() <{"value" = 4 : index}> : () -> index
      %1243 = "arith.muli"(%1241, %1242) : (index, index) -> index
      %1244 = "memref.extract_aligned_pointer_as_index"(%1013) : (memref<16xi32>) -> index
      %1245 = "memref.extract_aligned_pointer_as_index"(%1030) : (memref<16xi32>) -> index
      "func.call"(%1244, %1245, %1243) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_cluster_hw_barrier}> : () -> ()
    "scf.if"(%4) ({
      %1246 = "memref.extract_aligned_pointer_as_index"(%1088) : (memref<1x34x34x16xi8>) -> index
      %1247 = "memref.extract_aligned_pointer_as_index"(%1151) : (memref<16x3x3x16xi8>) -> index
      %1248 = "memref.extract_aligned_pointer_as_index"(%1030) : (memref<16xi32>) -> index
      %1249 = "memref.extract_aligned_pointer_as_index"(%1030) : (memref<16xi32>) -> index
      %1250 = "memref.extract_aligned_pointer_as_index"(%1209) : (memref<1x32x32x16xi32>) -> index
      %1251 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1252 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %1253 = "arith.constant"() <{"value" = 3 : i32}> : () -> i32
      %1254 = "arith.constant"() <{"value" = 3 : i32}> : () -> i32
      %1255 = "arith.constant"() <{"value" = 2 : i32}> : () -> i32
      %1256 = "arith.constant"() <{"value" = 2 : i32}> : () -> i32
      %1257 = "arith.constant"() <{"value" = 4 : i32}> : () -> i32
      %1258 = "arith.constant"() <{"value" = 32 : i32}> : () -> i32
      %1259 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %1260 = "arith.constant"() <{"value" = 272 : i32}> : () -> i32
      %1261 = "arith.constant"() <{"value" = 9248 : i32}> : () -> i32
      %1262 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1263 = "arith.constant"() <{"value" = 2176 : i32}> : () -> i32
      %1264 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %1265 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1266 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %1267 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %1268 = "arith.constant"() <{"value" = 36 : i32}> : () -> i32
      %1269 = "arith.constant"() <{"value" = 128 : i32}> : () -> i32
      %1270 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1271 = "arith.constant"() <{"value" = 64 : i32}> : () -> i32
      %1272 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1273 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1274 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1275 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1276 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1277 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1278 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1279 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1280 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1281 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1282 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %1283 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %1284 = "arith.constant"() <{"value" = 2 : i32}> : () -> i32
      %1285 = "arith.constant"() <{"value" = 128 : i32}> : () -> i32
      %1286 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1287 = "arith.constant"() <{"value" = 32 : i32}> : () -> i32
      %1288 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1289 = "arith.constant"() <{"value" = -1 : i32}> : () -> i32
      %1290 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1291 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %1292 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %1293 = "arith.constant"() <{"value" = 2 : i32}> : () -> i32
      %1294 = "arith.constant"() <{"value" = 128 : i32}> : () -> i32
      %1295 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1296 = "arith.constant"() <{"value" = 32768 : i32}> : () -> i32
      %1297 = "arith.constant"() <{"value" = 256 : i32}> : () -> i32
      %1298 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %1299 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %1300 = "arith.constant"() <{"value" = 18 : i32}> : () -> i32
      %1301 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %1302 = "arith.constant"() <{"value" = 256 : i32}> : () -> i32
      %1303 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1304 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %1305 = "arith.constant"() <{"value" = 255 : i32}> : () -> i32
      %1306 = "arith.andi"(%10, %1305) : (i32, i32) -> i32
      %1307 = "arith.andi"(%11, %1305) : (i32, i32) -> i32
      %1308 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1309 = "arith.shli"(%1306, %1308) : (i32, i32) -> i32
      %1310 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %1311 = "arith.shli"(%1307, %1310) : (i32, i32) -> i32
      %1312 = "arith.ori"(%1309, %1311) : (i32, i32) -> i32
      %1313 = "arith.index_cast"(%1246) : (index) -> i32
      %1314 = "arith.constant"() <{"value" = 960 : i32}> : () -> i32
      "llvm.inline_asm"(%1314, %1313) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1315 = "arith.constant"() <{"value" = 961 : i32}> : () -> i32
      "llvm.inline_asm"(%1315, %1251) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1316 = "arith.constant"() <{"value" = 962 : i32}> : () -> i32
      "llvm.inline_asm"(%1316, %1252) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1317 = "arith.constant"() <{"value" = 963 : i32}> : () -> i32
      "llvm.inline_asm"(%1317, %1253) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1318 = "arith.constant"() <{"value" = 964 : i32}> : () -> i32
      "llvm.inline_asm"(%1318, %1254) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1319 = "arith.constant"() <{"value" = 965 : i32}> : () -> i32
      "llvm.inline_asm"(%1319, %1255) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1320 = "arith.constant"() <{"value" = 966 : i32}> : () -> i32
      "llvm.inline_asm"(%1320, %1256) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1321 = "arith.constant"() <{"value" = 967 : i32}> : () -> i32
      "llvm.inline_asm"(%1321, %1257) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1322 = "arith.constant"() <{"value" = 968 : i32}> : () -> i32
      "llvm.inline_asm"(%1322, %1258) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1323 = "arith.constant"() <{"value" = 969 : i32}> : () -> i32
      "llvm.inline_asm"(%1323, %1259) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1324 = "arith.constant"() <{"value" = 970 : i32}> : () -> i32
      "llvm.inline_asm"(%1324, %1260) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1325 = "arith.constant"() <{"value" = 971 : i32}> : () -> i32
      "llvm.inline_asm"(%1325, %1261) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1326 = "arith.constant"() <{"value" = 972 : i32}> : () -> i32
      "llvm.inline_asm"(%1326, %1262) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1327 = "arith.constant"() <{"value" = 973 : i32}> : () -> i32
      "llvm.inline_asm"(%1327, %1263) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1328 = "arith.constant"() <{"value" = 974 : i32}> : () -> i32
      "llvm.inline_asm"(%1328, %1264) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1329 = "arith.index_cast"(%1247) : (index) -> i32
      %1330 = "arith.constant"() <{"value" = 975 : i32}> : () -> i32
      "llvm.inline_asm"(%1330, %1329) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1331 = "arith.constant"() <{"value" = 976 : i32}> : () -> i32
      "llvm.inline_asm"(%1331, %1265) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1332 = "arith.constant"() <{"value" = 977 : i32}> : () -> i32
      "llvm.inline_asm"(%1332, %1266) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1333 = "arith.constant"() <{"value" = 978 : i32}> : () -> i32
      "llvm.inline_asm"(%1333, %1267) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1334 = "arith.constant"() <{"value" = 979 : i32}> : () -> i32
      "llvm.inline_asm"(%1334, %1268) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1335 = "arith.constant"() <{"value" = 980 : i32}> : () -> i32
      "llvm.inline_asm"(%1335, %1269) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1336 = "arith.constant"() <{"value" = 981 : i32}> : () -> i32
      "llvm.inline_asm"(%1336, %1270) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1337 = "arith.constant"() <{"value" = 982 : i32}> : () -> i32
      "llvm.inline_asm"(%1337, %1271) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1338 = "arith.constant"() <{"value" = 983 : i32}> : () -> i32
      "llvm.inline_asm"(%1338, %1272) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1339 = "arith.index_cast"(%1248) : (index) -> i32
      %1340 = "arith.constant"() <{"value" = 984 : i32}> : () -> i32
      "llvm.inline_asm"(%1340, %1339) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1341 = "arith.constant"() <{"value" = 985 : i32}> : () -> i32
      "llvm.inline_asm"(%1341, %1273) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1342 = "arith.constant"() <{"value" = 986 : i32}> : () -> i32
      "llvm.inline_asm"(%1342, %1274) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1343 = "arith.constant"() <{"value" = 987 : i32}> : () -> i32
      "llvm.inline_asm"(%1343, %1275) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1344 = "arith.constant"() <{"value" = 988 : i32}> : () -> i32
      "llvm.inline_asm"(%1344, %1276) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1345 = "arith.constant"() <{"value" = 989 : i32}> : () -> i32
      "llvm.inline_asm"(%1345, %1277) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1346 = "arith.constant"() <{"value" = 990 : i32}> : () -> i32
      "llvm.inline_asm"(%1346, %1278) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1347 = "arith.constant"() <{"value" = 991 : i32}> : () -> i32
      "llvm.inline_asm"(%1347, %1279) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1348 = "arith.constant"() <{"value" = 992 : i32}> : () -> i32
      "llvm.inline_asm"(%1348, %1280) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1349 = "arith.index_cast"(%1249) : (index) -> i32
      %1350 = "arith.constant"() <{"value" = 993 : i32}> : () -> i32
      "llvm.inline_asm"(%1350, %1349) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1351 = "arith.constant"() <{"value" = 994 : i32}> : () -> i32
      "llvm.inline_asm"(%1351, %1281) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1352 = "arith.constant"() <{"value" = 995 : i32}> : () -> i32
      "llvm.inline_asm"(%1352, %1282) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1353 = "arith.constant"() <{"value" = 996 : i32}> : () -> i32
      "llvm.inline_asm"(%1353, %1283) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1354 = "arith.constant"() <{"value" = 997 : i32}> : () -> i32
      "llvm.inline_asm"(%1354, %1284) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1355 = "arith.constant"() <{"value" = 998 : i32}> : () -> i32
      "llvm.inline_asm"(%1355, %1285) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1356 = "arith.constant"() <{"value" = 999 : i32}> : () -> i32
      "llvm.inline_asm"(%1356, %1286) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1357 = "arith.constant"() <{"value" = 1000 : i32}> : () -> i32
      "llvm.inline_asm"(%1357, %1287) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1358 = "arith.constant"() <{"value" = 1001 : i32}> : () -> i32
      "llvm.inline_asm"(%1358, %1288) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1359 = "arith.constant"() <{"value" = 1002 : i32}> : () -> i32
      "llvm.inline_asm"(%1359, %1289) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1360 = "arith.index_cast"(%1250) : (index) -> i32
      %1361 = "arith.constant"() <{"value" = 1003 : i32}> : () -> i32
      "llvm.inline_asm"(%1361, %1360) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1362 = "arith.constant"() <{"value" = 1004 : i32}> : () -> i32
      "llvm.inline_asm"(%1362, %1290) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1363 = "arith.constant"() <{"value" = 1005 : i32}> : () -> i32
      "llvm.inline_asm"(%1363, %1291) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1364 = "arith.constant"() <{"value" = 1006 : i32}> : () -> i32
      "llvm.inline_asm"(%1364, %1292) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1365 = "arith.constant"() <{"value" = 1007 : i32}> : () -> i32
      "llvm.inline_asm"(%1365, %1293) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1366 = "arith.constant"() <{"value" = 1008 : i32}> : () -> i32
      "llvm.inline_asm"(%1366, %1294) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1367 = "arith.constant"() <{"value" = 1009 : i32}> : () -> i32
      "llvm.inline_asm"(%1367, %1295) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1368 = "arith.constant"() <{"value" = 1010 : i32}> : () -> i32
      "llvm.inline_asm"(%1368, %1296) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1369 = "arith.constant"() <{"value" = 1011 : i32}> : () -> i32
      "llvm.inline_asm"(%1369, %1297) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1370 = "arith.constant"() <{"value" = 1012 : i32}> : () -> i32
      "llvm.inline_asm"(%1370, %1298) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1371 = "arith.constant"() <{"value" = 1013 : i32}> : () -> i32
      "llvm.inline_asm"(%1371, %1299) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1372 = "arith.constant"() <{"value" = 1017 : i32}> : () -> i32
      "llvm.inline_asm"(%1372, %1300) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1373 = "arith.constant"() <{"value" = 1018 : i32}> : () -> i32
      "llvm.inline_asm"(%1373, %1301) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1374 = "arith.constant"() <{"value" = 1019 : i32}> : () -> i32
      "llvm.inline_asm"(%1374, %1302) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1375 = "arith.constant"() <{"value" = 1020 : i32}> : () -> i32
      "llvm.inline_asm"(%1375, %1312) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1376 = "arith.constant"() <{"value" = 1021 : i32}> : () -> i32
      "llvm.inline_asm"(%1376, %1303) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1377 = "arith.constant"() <{"value" = 1022 : i32}> : () -> i32
      "llvm.inline_asm"(%1377, %1303) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1378 = "arith.constant"() <{"value" = 1023 : i32}> : () -> i32
      "llvm.inline_asm"(%1378, %1303) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1379 = "arith.constant"() <{"value" = 1024 : i32}> : () -> i32
      "llvm.inline_asm"(%1379, %1303) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1380 = "arith.constant"() <{"value" = 1025 : i32}> : () -> i32
      "llvm.inline_asm"(%1380, %1303) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1381 = "arith.constant"() <{"value" = 1026 : i32}> : () -> i32
      "llvm.inline_asm"(%1381, %1303) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1382 = "arith.constant"() <{"value" = 1027 : i32}> : () -> i32
      "llvm.inline_asm"(%1382, %1303) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1383 = "arith.constant"() <{"value" = 1028 : i32}> : () -> i32
      "llvm.inline_asm"(%1383, %1303) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1384 = "arith.constant"() <{"value" = 1029 : i32}> : () -> i32
      "llvm.inline_asm"(%1384, %1303) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1385 = "arith.constant"() <{"value" = 1030 : i32}> : () -> i32
      "llvm.inline_asm"(%1385, %1303) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1386 = "arith.constant"() <{"value" = 1031 : i32}> : () -> i32
      "llvm.inline_asm"(%1386, %1303) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1387 = "arith.constant"() <{"value" = 1032 : i32}> : () -> i32
      "llvm.inline_asm"(%1387, %1303) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1388 = "arith.constant"() <{"value" = 1033 : i32}> : () -> i32
      "llvm.inline_asm"(%1388, %1303) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1389 = "arith.constant"() <{"value" = 1034 : i32}> : () -> i32
      "llvm.inline_asm"(%1389, %1304) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1390 = "arith.constant"() <{"value" = 1 : i5}> : () -> i5
      %1391 = "arith.constant"() <{"value" = 1014 : i32}> : () -> i32
      "llvm.inline_asm"(%1391, %1390) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i5) -> ()
      %1392 = "arith.constant"() <{"value" = 1035 : i32}> : () -> i32
      "llvm.inline_asm"(%1392, %1390) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i5) -> ()
      %1393 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1394 = "arith.constant"() <{"value" = 1035 : i32}> : () -> i32
      "llvm.inline_asm"(%1394, %1393) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      "llvm.inline_asm"(%1394, %1393) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1395 = "arith.constant"() <{"value" = 1014 : i32}> : () -> i32
      "llvm.inline_asm"(%1395, %1393) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      "llvm.inline_asm"(%1395, %1393) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_cluster_hw_barrier}> : () -> ()
    "scf.if"(%6) ({
      %1396 = "memref.extract_aligned_pointer_as_index"(%1209) : (memref<1x32x32x16xi32>) -> index
      %1397 = "memref.extract_aligned_pointer_as_index"(%1014) : (memref<1x32x32x16xi32>) -> index
      %1398 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %1399 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %1400 = "memref.dim"(%1209, %1399) : (memref<1x32x32x16xi32>, index) -> index
      %1401 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %1402 = "memref.dim"(%1209, %1401) : (memref<1x32x32x16xi32>, index) -> index
      %1403 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %1404 = "memref.dim"(%1209, %1403) : (memref<1x32x32x16xi32>, index) -> index
      %1405 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %1406 = "memref.dim"(%1209, %1405) : (memref<1x32x32x16xi32>, index) -> index
      %1407 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %1408 = "arith.constant"() <{"value" = 32 : index}> : () -> index
      %1409 = "arith.constant"() <{"value" = 32 : index}> : () -> index
      %1410 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %1411 = "arith.constant"() <{"value" = 8 : index}> : () -> index
      %1412 = "arith.constant"() <{"value" = 65536 : index}> : () -> index
      %1413 = "arith.constant"() <{"value" = 4 : index}> : () -> index
      %1414 = "arith.constant"() <{"value" = 32768 : index}> : () -> index
      %1415 = "arith.constant"() <{"value" = 1024 : index}> : () -> index
      %1416 = "arith.constant"() <{"value" = 32 : index}> : () -> index
      %1417 = "arith.constant"() <{"value" = 65536 : index}> : () -> index
      %1418 = "arith.constant"() <{"value" = 65536 : index}> : () -> index
      %1419 = "arith.constant"() <{"value" = 4 : index}> : () -> index
      %1420 = "arith.constant"() <{"value" = 32768 : index}> : () -> index
      %1421 = "arith.constant"() <{"value" = 1024 : index}> : () -> index
      %1422 = "arith.constant"() <{"value" = 32 : index}> : () -> index
      %1423 = "arith.constant"() <{"value" = 65536 : index}> : () -> index
      %1424 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %1425 = "memref.dim"(%1209, %1424) : (memref<1x32x32x16xi32>, index) -> index
      %1426 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %1427 = "memref.dim"(%1209, %1426) : (memref<1x32x32x16xi32>, index) -> index
      %1428 = "arith.muli"(%1425, %1427) : (index, index) -> index
      %1429 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %1430 = "memref.dim"(%1209, %1429) : (memref<1x32x32x16xi32>, index) -> index
      %1431 = "arith.muli"(%1428, %1430) : (index, index) -> index
      %1432 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %1433 = "memref.dim"(%1209, %1432) : (memref<1x32x32x16xi32>, index) -> index
      %1434 = "arith.muli"(%1431, %1433) : (index, index) -> index
      %1435 = "arith.constant"() <{"value" = 4 : index}> : () -> index
      %1436 = "arith.muli"(%1434, %1435) : (index, index) -> index
      "func.call"(%1396, %1397, %1436) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_clear_l1}> : () -> ()
    %1437 = "memref.get_global"() <{"name" = @_static_const_6}> : () -> memref<1x32x32x16xi32>
    %1438 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %1439 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %1440 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %1441 = "arith.constant"() <{"value" = 16 : index}> : () -> index
    %1442 = "arith.constant"() <{"value" = 4 : index}> : () -> index
    %1443 = "arith.muli"(%1438, %1442) : (index, index) -> index
    %1444 = "arith.muli"(%1439, %1443) : (index, index) -> index
    %1445 = "arith.muli"(%1440, %1444) : (index, index) -> index
    %1446 = "arith.muli"(%1441, %1445) : (index, index) -> index
    %1447 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %1448 = "func.call"(%1446, %1447) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %1449 = "llvm.load"(%1448) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %1450 = "llvm.extractvalue"(%1449) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %1451 = "llvm.extractvalue"(%1449) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %1452 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1453 = "llvm.insertvalue"(%1452, %1450) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1454 = "llvm.insertvalue"(%1453, %1451) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1455 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %1456 = "llvm.insertvalue"(%1454, %1455) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1457 = "builtin.unrealized_conversion_cast"(%1438) : (index) -> i32
    %1458 = "llvm.insertvalue"(%1456, %1457) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1459 = "builtin.unrealized_conversion_cast"(%1439) : (index) -> i32
    %1460 = "llvm.insertvalue"(%1458, %1459) <{"position" = array<i64: 3, 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1461 = "builtin.unrealized_conversion_cast"(%1440) : (index) -> i32
    %1462 = "llvm.insertvalue"(%1460, %1461) <{"position" = array<i64: 3, 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1463 = "builtin.unrealized_conversion_cast"(%1441) : (index) -> i32
    %1464 = "llvm.insertvalue"(%1462, %1463) <{"position" = array<i64: 3, 3>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1465 = "builtin.unrealized_conversion_cast"(%1464) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>) -> memref<1x32x32x16xi32>
    "scf.if"(%6) ({
      %1466 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %1467 = "memref.dim"(%32, %1466) : (memref<1x32x32x16xi8>, index) -> index
      %1468 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %1469 = "memref.dim"(%32, %1468) : (memref<1x32x32x16xi8>, index) -> index
      %1470 = "arith.muli"(%1467, %1469) : (index, index) -> index
      %1471 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %1472 = "memref.dim"(%32, %1471) : (memref<1x32x32x16xi8>, index) -> index
      %1473 = "arith.muli"(%1470, %1472) : (index, index) -> index
      %1474 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %1475 = "memref.dim"(%32, %1474) : (memref<1x32x32x16xi8>, index) -> index
      %1476 = "arith.muli"(%1473, %1475) : (index, index) -> index
      %1477 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %1478 = "arith.muli"(%1476, %1477) : (index, index) -> index
      %1479 = "memref.extract_aligned_pointer_as_index"(%32) : (memref<1x32x32x16xi8>) -> index
      %1480 = "memref.extract_aligned_pointer_as_index"(%76) : (memref<1x32x32x16xi8>) -> index
      "func.call"(%1479, %1480, %1478) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_cluster_hw_barrier}> : () -> ()
    "scf.if"(%4) ({
      %1481 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %1482 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %1483 = "memref.extract_aligned_pointer_as_index"(%1465) : (memref<1x32x32x16xi32>) -> index
      %1484 = "memref.extract_aligned_pointer_as_index"(%76) : (memref<1x32x32x16xi8>) -> index
      %1485 = "memref.extract_aligned_pointer_as_index"(%76) : (memref<1x32x32x16xi8>) -> index
      %1486 = "arith.constant"() <{"value" = 268435520 : i32}> : () -> i32
      %1487 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1488 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %1489 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %1490 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %1491 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %1492 = "arith.constant"() <{"value" = 2 : i32}> : () -> i32
      %1493 = "arith.constant"() <{"value" = 4 : i32}> : () -> i32
      %1494 = "arith.constant"() <{"value" = 32 : i32}> : () -> i32
      %1495 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1496 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1497 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1498 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1499 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1500 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1501 = "arith.constant"() <{"value" = 268435520 : i32}> : () -> i32
      %1502 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1503 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %1504 = "arith.constant"() <{"value" = 2 : i32}> : () -> i32
      %1505 = "arith.constant"() <{"value" = 4 : i32}> : () -> i32
      %1506 = "arith.constant"() <{"value" = 32 : i32}> : () -> i32
      %1507 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1508 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1509 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1510 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1511 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %1512 = "arith.constant"() <{"value" = 2 : i32}> : () -> i32
      %1513 = "arith.constant"() <{"value" = 4 : i32}> : () -> i32
      %1514 = "arith.constant"() <{"value" = 32 : i32}> : () -> i32
      %1515 = "arith.constant"() <{"value" = 32 : i32}> : () -> i32
      %1516 = "arith.constant"() <{"value" = 16384 : i32}> : () -> i32
      %1517 = "arith.constant"() <{"value" = 64 : i32}> : () -> i32
      %1518 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1519 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %1520 = "arith.constant"() <{"value" = 2 : i32}> : () -> i32
      %1521 = "arith.constant"() <{"value" = 4 : i32}> : () -> i32
      %1522 = "arith.constant"() <{"value" = 32 : i32}> : () -> i32
      %1523 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %1524 = "arith.constant"() <{"value" = 4096 : i32}> : () -> i32
      %1525 = "arith.constant"() <{"value" = 16 : i32}> : () -> i32
      %1526 = "arith.constant"() <{"value" = -1 : i32}> : () -> i32
      %1527 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1528 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1529 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1530 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1531 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1532 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1533 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1534 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1535 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %1536 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %1537 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %1538 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %1539 = "arith.constant"() <{"value" = 256 : i32}> : () -> i32
      %1540 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1541 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %1542 = "arith.constant"() <{"value" = 127 : i32}> : () -> i32
      %1543 = "arith.constant"() <{"value" = -128 : i32}> : () -> i32
      %1544 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %1545 = "arith.constant"() <{"value" = 10 : i32}> : () -> i32
      %1546 = "arith.constant"() <{"value" = 1073741824 : i32}> : () -> i32
      %1547 = "arith.constant"() <{"value" = -128 : i32}> : () -> i32
      %1548 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1549 = "arith.constant"() <{"value" = 255 : i32}> : () -> i32
      %1550 = "arith.andi"(%1542, %1549) : (i32, i32) -> i32
      %1551 = "arith.andi"(%1543, %1549) : (i32, i32) -> i32
      %1552 = "arith.andi"(%1547, %1549) : (i32, i32) -> i32
      %1553 = "arith.andi"(%1548, %1549) : (i32, i32) -> i32
      %1554 = "arith.constant"() <{"value" = 24 : i32}> : () -> i32
      %1555 = "arith.shli"(%1551, %1554) : (i32, i32) -> i32
      %1556 = "arith.constant"() <{"value" = 16 : i32}> : () -> i32
      %1557 = "arith.shli"(%1550, %1556) : (i32, i32) -> i32
      %1558 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %1559 = "arith.shli"(%1553, %1558) : (i32, i32) -> i32
      %1560 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1561 = "arith.shli"(%1552, %1560) : (i32, i32) -> i32
      %1562 = "arith.ori"(%1555, %1557) : (i32, i32) -> i32
      %1563 = "arith.ori"(%1559, %1561) : (i32, i32) -> i32
      %1564 = "arith.ori"(%1562, %1563) : (i32, i32) -> i32
      %1565 = "arith.constant"() <{"value" = 24 : i32}> : () -> i32
      %1566 = "arith.shli"(%1545, %1565) : (i32, i32) -> i32
      %1567 = "arith.constant"() <{"value" = 16 : i32}> : () -> i32
      %1568 = "arith.shli"(%1545, %1567) : (i32, i32) -> i32
      %1569 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %1570 = "arith.shli"(%1545, %1569) : (i32, i32) -> i32
      %1571 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1572 = "arith.shli"(%1545, %1571) : (i32, i32) -> i32
      %1573 = "arith.ori"(%1566, %1568) : (i32, i32) -> i32
      %1574 = "arith.ori"(%1570, %1572) : (i32, i32) -> i32
      %1575 = "arith.ori"(%1573, %1574) : (i32, i32) -> i32
      %1576 = "arith.constant"() <{"value" = 256 : i32}> : () -> i32
      %1577 = "arith.constant"() <{"value" = 960 : i32}> : () -> i32
      "llvm.inline_asm"(%1577, %1486) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1578 = "arith.constant"() <{"value" = 961 : i32}> : () -> i32
      "llvm.inline_asm"(%1578, %1487) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1579 = "arith.constant"() <{"value" = 962 : i32}> : () -> i32
      "llvm.inline_asm"(%1579, %1488) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1580 = "arith.constant"() <{"value" = 963 : i32}> : () -> i32
      "llvm.inline_asm"(%1580, %1489) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1581 = "arith.constant"() <{"value" = 964 : i32}> : () -> i32
      "llvm.inline_asm"(%1581, %1490) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1582 = "arith.constant"() <{"value" = 965 : i32}> : () -> i32
      "llvm.inline_asm"(%1582, %1491) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1583 = "arith.constant"() <{"value" = 966 : i32}> : () -> i32
      "llvm.inline_asm"(%1583, %1492) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1584 = "arith.constant"() <{"value" = 967 : i32}> : () -> i32
      "llvm.inline_asm"(%1584, %1493) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1585 = "arith.constant"() <{"value" = 968 : i32}> : () -> i32
      "llvm.inline_asm"(%1585, %1494) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1586 = "arith.constant"() <{"value" = 969 : i32}> : () -> i32
      "llvm.inline_asm"(%1586, %1495) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1587 = "arith.constant"() <{"value" = 970 : i32}> : () -> i32
      "llvm.inline_asm"(%1587, %1496) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1588 = "arith.constant"() <{"value" = 971 : i32}> : () -> i32
      "llvm.inline_asm"(%1588, %1497) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1589 = "arith.constant"() <{"value" = 972 : i32}> : () -> i32
      "llvm.inline_asm"(%1589, %1498) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1590 = "arith.constant"() <{"value" = 973 : i32}> : () -> i32
      "llvm.inline_asm"(%1590, %1499) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1591 = "arith.constant"() <{"value" = 974 : i32}> : () -> i32
      "llvm.inline_asm"(%1591, %1500) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1592 = "arith.constant"() <{"value" = 975 : i32}> : () -> i32
      "llvm.inline_asm"(%1592, %1501) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1593 = "arith.constant"() <{"value" = 976 : i32}> : () -> i32
      "llvm.inline_asm"(%1593, %1502) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1594 = "arith.constant"() <{"value" = 977 : i32}> : () -> i32
      "llvm.inline_asm"(%1594, %1503) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1595 = "arith.constant"() <{"value" = 978 : i32}> : () -> i32
      "llvm.inline_asm"(%1595, %1504) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1596 = "arith.constant"() <{"value" = 979 : i32}> : () -> i32
      "llvm.inline_asm"(%1596, %1505) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1597 = "arith.constant"() <{"value" = 980 : i32}> : () -> i32
      "llvm.inline_asm"(%1597, %1506) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1598 = "arith.constant"() <{"value" = 981 : i32}> : () -> i32
      "llvm.inline_asm"(%1598, %1507) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1599 = "arith.constant"() <{"value" = 982 : i32}> : () -> i32
      "llvm.inline_asm"(%1599, %1508) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1600 = "arith.constant"() <{"value" = 983 : i32}> : () -> i32
      "llvm.inline_asm"(%1600, %1509) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1601 = "arith.index_cast"(%1483) : (index) -> i32
      %1602 = "arith.constant"() <{"value" = 984 : i32}> : () -> i32
      "llvm.inline_asm"(%1602, %1601) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1603 = "arith.constant"() <{"value" = 985 : i32}> : () -> i32
      "llvm.inline_asm"(%1603, %1510) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1604 = "arith.constant"() <{"value" = 986 : i32}> : () -> i32
      "llvm.inline_asm"(%1604, %1511) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1605 = "arith.constant"() <{"value" = 987 : i32}> : () -> i32
      "llvm.inline_asm"(%1605, %1512) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1606 = "arith.constant"() <{"value" = 988 : i32}> : () -> i32
      "llvm.inline_asm"(%1606, %1513) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1607 = "arith.constant"() <{"value" = 989 : i32}> : () -> i32
      "llvm.inline_asm"(%1607, %1514) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1608 = "arith.constant"() <{"value" = 990 : i32}> : () -> i32
      "llvm.inline_asm"(%1608, %1515) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1609 = "arith.constant"() <{"value" = 991 : i32}> : () -> i32
      "llvm.inline_asm"(%1609, %1516) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1610 = "arith.constant"() <{"value" = 992 : i32}> : () -> i32
      "llvm.inline_asm"(%1610, %1517) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1611 = "arith.index_cast"(%1484) : (index) -> i32
      %1612 = "arith.constant"() <{"value" = 993 : i32}> : () -> i32
      "llvm.inline_asm"(%1612, %1611) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1613 = "arith.constant"() <{"value" = 994 : i32}> : () -> i32
      "llvm.inline_asm"(%1613, %1518) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1614 = "arith.constant"() <{"value" = 995 : i32}> : () -> i32
      "llvm.inline_asm"(%1614, %1519) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1615 = "arith.constant"() <{"value" = 996 : i32}> : () -> i32
      "llvm.inline_asm"(%1615, %1520) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1616 = "arith.constant"() <{"value" = 997 : i32}> : () -> i32
      "llvm.inline_asm"(%1616, %1521) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1617 = "arith.constant"() <{"value" = 998 : i32}> : () -> i32
      "llvm.inline_asm"(%1617, %1522) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1618 = "arith.constant"() <{"value" = 999 : i32}> : () -> i32
      "llvm.inline_asm"(%1618, %1523) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1619 = "arith.constant"() <{"value" = 1000 : i32}> : () -> i32
      "llvm.inline_asm"(%1619, %1524) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1620 = "arith.constant"() <{"value" = 1001 : i32}> : () -> i32
      "llvm.inline_asm"(%1620, %1525) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1621 = "arith.constant"() <{"value" = 1002 : i32}> : () -> i32
      "llvm.inline_asm"(%1621, %1526) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1622 = "arith.index_cast"(%1485) : (index) -> i32
      %1623 = "arith.constant"() <{"value" = 1003 : i32}> : () -> i32
      "llvm.inline_asm"(%1623, %1622) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1624 = "arith.constant"() <{"value" = 1004 : i32}> : () -> i32
      "llvm.inline_asm"(%1624, %1527) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1625 = "arith.constant"() <{"value" = 1005 : i32}> : () -> i32
      "llvm.inline_asm"(%1625, %1528) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1626 = "arith.constant"() <{"value" = 1006 : i32}> : () -> i32
      "llvm.inline_asm"(%1626, %1529) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1627 = "arith.constant"() <{"value" = 1007 : i32}> : () -> i32
      "llvm.inline_asm"(%1627, %1530) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1628 = "arith.constant"() <{"value" = 1008 : i32}> : () -> i32
      "llvm.inline_asm"(%1628, %1531) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1629 = "arith.constant"() <{"value" = 1009 : i32}> : () -> i32
      "llvm.inline_asm"(%1629, %1532) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1630 = "arith.constant"() <{"value" = 1010 : i32}> : () -> i32
      "llvm.inline_asm"(%1630, %1533) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1631 = "arith.constant"() <{"value" = 1011 : i32}> : () -> i32
      "llvm.inline_asm"(%1631, %1534) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1632 = "arith.constant"() <{"value" = 1012 : i32}> : () -> i32
      "llvm.inline_asm"(%1632, %1535) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1633 = "arith.constant"() <{"value" = 1013 : i32}> : () -> i32
      "llvm.inline_asm"(%1633, %1536) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1634 = "arith.constant"() <{"value" = 1017 : i32}> : () -> i32
      "llvm.inline_asm"(%1634, %1537) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1635 = "arith.constant"() <{"value" = 1018 : i32}> : () -> i32
      "llvm.inline_asm"(%1635, %1538) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1636 = "arith.constant"() <{"value" = 1019 : i32}> : () -> i32
      "llvm.inline_asm"(%1636, %1539) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1637 = "arith.constant"() <{"value" = 1020 : i32}> : () -> i32
      "llvm.inline_asm"(%1637, %1540) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1638 = "arith.constant"() <{"value" = 1021 : i32}> : () -> i32
      "llvm.inline_asm"(%1638, %1564) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1639 = "arith.constant"() <{"value" = 1022 : i32}> : () -> i32
      "llvm.inline_asm"(%1639, %1544) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1640 = "arith.constant"() <{"value" = 1023 : i32}> : () -> i32
      "llvm.inline_asm"(%1640, %1575) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1641 = "arith.constant"() <{"value" = 1024 : i32}> : () -> i32
      "llvm.inline_asm"(%1641, %1575) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1642 = "arith.constant"() <{"value" = 1025 : i32}> : () -> i32
      "llvm.inline_asm"(%1642, %1546) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1643 = "arith.constant"() <{"value" = 1026 : i32}> : () -> i32
      "llvm.inline_asm"(%1643, %1546) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1644 = "arith.constant"() <{"value" = 1027 : i32}> : () -> i32
      "llvm.inline_asm"(%1644, %1546) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1645 = "arith.constant"() <{"value" = 1028 : i32}> : () -> i32
      "llvm.inline_asm"(%1645, %1546) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1646 = "arith.constant"() <{"value" = 1029 : i32}> : () -> i32
      "llvm.inline_asm"(%1646, %1546) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1647 = "arith.constant"() <{"value" = 1030 : i32}> : () -> i32
      "llvm.inline_asm"(%1647, %1546) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1648 = "arith.constant"() <{"value" = 1031 : i32}> : () -> i32
      "llvm.inline_asm"(%1648, %1546) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1649 = "arith.constant"() <{"value" = 1032 : i32}> : () -> i32
      "llvm.inline_asm"(%1649, %1546) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1650 = "arith.constant"() <{"value" = 1033 : i32}> : () -> i32
      "llvm.inline_asm"(%1650, %1576) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1651 = "arith.constant"() <{"value" = 1034 : i32}> : () -> i32
      "llvm.inline_asm"(%1651, %1540) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1652 = "arith.constant"() <{"value" = 1 : i5}> : () -> i5
      %1653 = "arith.constant"() <{"value" = 1014 : i32}> : () -> i32
      "llvm.inline_asm"(%1653, %1652) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i5) -> ()
      %1654 = "arith.constant"() <{"value" = 1035 : i32}> : () -> i32
      "llvm.inline_asm"(%1654, %1652) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i5) -> ()
      %1655 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1656 = "arith.constant"() <{"value" = 1035 : i32}> : () -> i32
      "llvm.inline_asm"(%1656, %1655) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      "llvm.inline_asm"(%1656, %1655) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1657 = "arith.constant"() <{"value" = 1014 : i32}> : () -> i32
      "llvm.inline_asm"(%1657, %1655) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      "llvm.inline_asm"(%1657, %1655) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_cluster_hw_barrier}> : () -> ()
    "scf.if"(%6) ({
      %1658 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %1659 = "memref.dim"(%1465, %1658) : (memref<1x32x32x16xi32>, index) -> index
      %1660 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %1661 = "memref.dim"(%1465, %1660) : (memref<1x32x32x16xi32>, index) -> index
      %1662 = "arith.muli"(%1659, %1661) : (index, index) -> index
      %1663 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %1664 = "memref.dim"(%1465, %1663) : (memref<1x32x32x16xi32>, index) -> index
      %1665 = "arith.muli"(%1662, %1664) : (index, index) -> index
      %1666 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %1667 = "memref.dim"(%1465, %1666) : (memref<1x32x32x16xi32>, index) -> index
      %1668 = "arith.muli"(%1665, %1667) : (index, index) -> index
      %1669 = "arith.constant"() <{"value" = 4 : index}> : () -> index
      %1670 = "arith.muli"(%1668, %1669) : (index, index) -> index
      %1671 = "memref.extract_aligned_pointer_as_index"(%1465) : (memref<1x32x32x16xi32>) -> index
      %1672 = "memref.extract_aligned_pointer_as_index"(%1437) : (memref<1x32x32x16xi32>) -> index
      "func.call"(%1671, %1672, %1670) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_clear_l1}> : () -> ()
    %1673 = "memref.get_global"() <{"name" = @_static_const_7}> : () -> memref<1x32x32x16xi32>
    %1674 = "memref.get_global"() <{"name" = @_static_const_8}> : () -> memref<1x32x32x16xi32>
    %1675 = "memref.get_global"() <{"name" = @_static_const_9}> : () -> memref<1x32x32x16xi8>
    %1676 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %1677 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %1678 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %1679 = "arith.constant"() <{"value" = 16 : index}> : () -> index
    %1680 = "arith.constant"() <{"value" = 4 : index}> : () -> index
    %1681 = "arith.muli"(%1676, %1680) : (index, index) -> index
    %1682 = "arith.muli"(%1677, %1681) : (index, index) -> index
    %1683 = "arith.muli"(%1678, %1682) : (index, index) -> index
    %1684 = "arith.muli"(%1679, %1683) : (index, index) -> index
    %1685 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %1686 = "func.call"(%1684, %1685) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %1687 = "llvm.load"(%1686) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %1688 = "llvm.extractvalue"(%1687) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %1689 = "llvm.extractvalue"(%1687) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %1690 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1691 = "llvm.insertvalue"(%1690, %1688) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1692 = "llvm.insertvalue"(%1691, %1689) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1693 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %1694 = "llvm.insertvalue"(%1692, %1693) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1695 = "builtin.unrealized_conversion_cast"(%1676) : (index) -> i32
    %1696 = "llvm.insertvalue"(%1694, %1695) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1697 = "builtin.unrealized_conversion_cast"(%1677) : (index) -> i32
    %1698 = "llvm.insertvalue"(%1696, %1697) <{"position" = array<i64: 3, 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1699 = "builtin.unrealized_conversion_cast"(%1678) : (index) -> i32
    %1700 = "llvm.insertvalue"(%1698, %1699) <{"position" = array<i64: 3, 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1701 = "builtin.unrealized_conversion_cast"(%1679) : (index) -> i32
    %1702 = "llvm.insertvalue"(%1700, %1701) <{"position" = array<i64: 3, 3>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1703 = "builtin.unrealized_conversion_cast"(%1702) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>) -> memref<1x32x32x16xi32>
    %1704 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %1705 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %1706 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %1707 = "arith.constant"() <{"value" = 16 : index}> : () -> index
    %1708 = "arith.constant"() <{"value" = 4 : index}> : () -> index
    %1709 = "arith.muli"(%1704, %1708) : (index, index) -> index
    %1710 = "arith.muli"(%1705, %1709) : (index, index) -> index
    %1711 = "arith.muli"(%1706, %1710) : (index, index) -> index
    %1712 = "arith.muli"(%1707, %1711) : (index, index) -> index
    %1713 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %1714 = "func.call"(%1712, %1713) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %1715 = "llvm.load"(%1714) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %1716 = "llvm.extractvalue"(%1715) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %1717 = "llvm.extractvalue"(%1715) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %1718 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1719 = "llvm.insertvalue"(%1718, %1716) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1720 = "llvm.insertvalue"(%1719, %1717) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1721 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %1722 = "llvm.insertvalue"(%1720, %1721) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1723 = "builtin.unrealized_conversion_cast"(%1704) : (index) -> i32
    %1724 = "llvm.insertvalue"(%1722, %1723) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1725 = "builtin.unrealized_conversion_cast"(%1705) : (index) -> i32
    %1726 = "llvm.insertvalue"(%1724, %1725) <{"position" = array<i64: 3, 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1727 = "builtin.unrealized_conversion_cast"(%1706) : (index) -> i32
    %1728 = "llvm.insertvalue"(%1726, %1727) <{"position" = array<i64: 3, 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1729 = "builtin.unrealized_conversion_cast"(%1707) : (index) -> i32
    %1730 = "llvm.insertvalue"(%1728, %1729) <{"position" = array<i64: 3, 3>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1731 = "builtin.unrealized_conversion_cast"(%1730) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>) -> memref<1x32x32x16xi32>
    %1732 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %1733 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %1734 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %1735 = "arith.constant"() <{"value" = 16 : index}> : () -> index
    %1736 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %1737 = "arith.muli"(%1732, %1736) : (index, index) -> index
    %1738 = "arith.muli"(%1733, %1737) : (index, index) -> index
    %1739 = "arith.muli"(%1734, %1738) : (index, index) -> index
    %1740 = "arith.muli"(%1735, %1739) : (index, index) -> index
    %1741 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %1742 = "func.call"(%1740, %1741) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %1743 = "llvm.load"(%1742) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %1744 = "llvm.extractvalue"(%1743) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %1745 = "llvm.extractvalue"(%1743) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %1746 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1747 = "llvm.insertvalue"(%1746, %1744) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1748 = "llvm.insertvalue"(%1747, %1745) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1749 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %1750 = "llvm.insertvalue"(%1748, %1749) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1751 = "builtin.unrealized_conversion_cast"(%1732) : (index) -> i32
    %1752 = "llvm.insertvalue"(%1750, %1751) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1753 = "builtin.unrealized_conversion_cast"(%1733) : (index) -> i32
    %1754 = "llvm.insertvalue"(%1752, %1753) <{"position" = array<i64: 3, 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1755 = "builtin.unrealized_conversion_cast"(%1734) : (index) -> i32
    %1756 = "llvm.insertvalue"(%1754, %1755) <{"position" = array<i64: 3, 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1757 = "builtin.unrealized_conversion_cast"(%1735) : (index) -> i32
    %1758 = "llvm.insertvalue"(%1756, %1757) <{"position" = array<i64: 3, 3>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %1759 = "builtin.unrealized_conversion_cast"(%1758) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>) -> memref<1x32x32x16xi8>
    "scf.if"(%6) ({
      %1760 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %1761 = "memref.dim"(%1674, %1760) : (memref<1x32x32x16xi32>, index) -> index
      %1762 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %1763 = "memref.dim"(%1674, %1762) : (memref<1x32x32x16xi32>, index) -> index
      %1764 = "arith.muli"(%1761, %1763) : (index, index) -> index
      %1765 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %1766 = "memref.dim"(%1674, %1765) : (memref<1x32x32x16xi32>, index) -> index
      %1767 = "arith.muli"(%1764, %1766) : (index, index) -> index
      %1768 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %1769 = "memref.dim"(%1674, %1768) : (memref<1x32x32x16xi32>, index) -> index
      %1770 = "arith.muli"(%1767, %1769) : (index, index) -> index
      %1771 = "arith.constant"() <{"value" = 4 : index}> : () -> index
      %1772 = "arith.muli"(%1770, %1771) : (index, index) -> index
      %1773 = "memref.extract_aligned_pointer_as_index"(%1674) : (memref<1x32x32x16xi32>) -> index
      %1774 = "memref.extract_aligned_pointer_as_index"(%1731) : (memref<1x32x32x16xi32>) -> index
      "func.call"(%1773, %1774, %1772) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      %1775 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %1776 = "memref.dim"(%1673, %1775) : (memref<1x32x32x16xi32>, index) -> index
      %1777 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %1778 = "memref.dim"(%1673, %1777) : (memref<1x32x32x16xi32>, index) -> index
      %1779 = "arith.muli"(%1776, %1778) : (index, index) -> index
      %1780 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %1781 = "memref.dim"(%1673, %1780) : (memref<1x32x32x16xi32>, index) -> index
      %1782 = "arith.muli"(%1779, %1781) : (index, index) -> index
      %1783 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %1784 = "memref.dim"(%1673, %1783) : (memref<1x32x32x16xi32>, index) -> index
      %1785 = "arith.muli"(%1782, %1784) : (index, index) -> index
      %1786 = "arith.constant"() <{"value" = 4 : index}> : () -> index
      %1787 = "arith.muli"(%1785, %1786) : (index, index) -> index
      %1788 = "memref.extract_aligned_pointer_as_index"(%1673) : (memref<1x32x32x16xi32>) -> index
      %1789 = "memref.extract_aligned_pointer_as_index"(%1703) : (memref<1x32x32x16xi32>) -> index
      "func.call"(%1788, %1789, %1787) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_cluster_hw_barrier}> : () -> ()
    "scf.if"(%4) ({
      %1790 = "memref.extract_aligned_pointer_as_index"(%1703) : (memref<1x32x32x16xi32>) -> index
      %1791 = "memref.extract_aligned_pointer_as_index"(%1731) : (memref<1x32x32x16xi32>) -> index
      %1792 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %1793 = "memref.extract_aligned_pointer_as_index"(%1731) : (memref<1x32x32x16xi32>) -> index
      %1794 = "memref.extract_aligned_pointer_as_index"(%1759) : (memref<1x32x32x16xi8>) -> index
      %1795 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1796 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %1797 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %1798 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %1799 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %1800 = "arith.constant"() <{"value" = 2 : i32}> : () -> i32
      %1801 = "arith.constant"() <{"value" = 4 : i32}> : () -> i32
      %1802 = "arith.constant"() <{"value" = 32 : i32}> : () -> i32
      %1803 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1804 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1805 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1806 = "arith.constant"() <{"value" = 32 : i32}> : () -> i32
      %1807 = "arith.constant"() <{"value" = 16384 : i32}> : () -> i32
      %1808 = "arith.constant"() <{"value" = 64 : i32}> : () -> i32
      %1809 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1810 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %1811 = "arith.constant"() <{"value" = 2 : i32}> : () -> i32
      %1812 = "arith.constant"() <{"value" = 4 : i32}> : () -> i32
      %1813 = "arith.constant"() <{"value" = 32 : i32}> : () -> i32
      %1814 = "arith.constant"() <{"value" = 32 : i32}> : () -> i32
      %1815 = "arith.constant"() <{"value" = 16384 : i32}> : () -> i32
      %1816 = "arith.constant"() <{"value" = 64 : i32}> : () -> i32
      %1817 = "arith.constant"() <{"value" = 268435520 : i32}> : () -> i32
      %1818 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1819 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %1820 = "arith.constant"() <{"value" = 2 : i32}> : () -> i32
      %1821 = "arith.constant"() <{"value" = 4 : i32}> : () -> i32
      %1822 = "arith.constant"() <{"value" = 32 : i32}> : () -> i32
      %1823 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %1824 = "arith.constant"() <{"value" = 4096 : i32}> : () -> i32
      %1825 = "arith.constant"() <{"value" = 16 : i32}> : () -> i32
      %1826 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1827 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %1828 = "arith.constant"() <{"value" = 2 : i32}> : () -> i32
      %1829 = "arith.constant"() <{"value" = 4 : i32}> : () -> i32
      %1830 = "arith.constant"() <{"value" = 32 : i32}> : () -> i32
      %1831 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1832 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1833 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1834 = "arith.constant"() <{"value" = -1 : i32}> : () -> i32
      %1835 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1836 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1837 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1838 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1839 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1840 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1841 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1842 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1843 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %1844 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %1845 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %1846 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %1847 = "arith.constant"() <{"value" = 256 : i32}> : () -> i32
      %1848 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1849 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %1850 = "arith.constant"() <{"value" = 127 : i32}> : () -> i32
      %1851 = "arith.constant"() <{"value" = -128 : i32}> : () -> i32
      %1852 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %1853 = "arith.constant"() <{"value" = 48 : i32}> : () -> i32
      %1854 = "arith.constant"() <{"value" = 1098017566 : i32}> : () -> i32
      %1855 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1856 = "arith.constant"() <{"value" = -128 : i32}> : () -> i32
      %1857 = "arith.constant"() <{"value" = 255 : i32}> : () -> i32
      %1858 = "arith.andi"(%1850, %1857) : (i32, i32) -> i32
      %1859 = "arith.andi"(%1851, %1857) : (i32, i32) -> i32
      %1860 = "arith.andi"(%1855, %1857) : (i32, i32) -> i32
      %1861 = "arith.andi"(%1856, %1857) : (i32, i32) -> i32
      %1862 = "arith.constant"() <{"value" = 24 : i32}> : () -> i32
      %1863 = "arith.shli"(%1859, %1862) : (i32, i32) -> i32
      %1864 = "arith.constant"() <{"value" = 16 : i32}> : () -> i32
      %1865 = "arith.shli"(%1858, %1864) : (i32, i32) -> i32
      %1866 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %1867 = "arith.shli"(%1861, %1866) : (i32, i32) -> i32
      %1868 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1869 = "arith.shli"(%1860, %1868) : (i32, i32) -> i32
      %1870 = "arith.ori"(%1863, %1865) : (i32, i32) -> i32
      %1871 = "arith.ori"(%1867, %1869) : (i32, i32) -> i32
      %1872 = "arith.ori"(%1870, %1871) : (i32, i32) -> i32
      %1873 = "arith.constant"() <{"value" = 24 : i32}> : () -> i32
      %1874 = "arith.shli"(%1853, %1873) : (i32, i32) -> i32
      %1875 = "arith.constant"() <{"value" = 16 : i32}> : () -> i32
      %1876 = "arith.shli"(%1853, %1875) : (i32, i32) -> i32
      %1877 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %1878 = "arith.shli"(%1853, %1877) : (i32, i32) -> i32
      %1879 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1880 = "arith.shli"(%1853, %1879) : (i32, i32) -> i32
      %1881 = "arith.ori"(%1874, %1876) : (i32, i32) -> i32
      %1882 = "arith.ori"(%1878, %1880) : (i32, i32) -> i32
      %1883 = "arith.ori"(%1881, %1882) : (i32, i32) -> i32
      %1884 = "arith.constant"() <{"value" = 256 : i32}> : () -> i32
      %1885 = "arith.index_cast"(%1790) : (index) -> i32
      %1886 = "arith.constant"() <{"value" = 960 : i32}> : () -> i32
      "llvm.inline_asm"(%1886, %1885) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1887 = "arith.constant"() <{"value" = 961 : i32}> : () -> i32
      "llvm.inline_asm"(%1887, %1795) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1888 = "arith.constant"() <{"value" = 962 : i32}> : () -> i32
      "llvm.inline_asm"(%1888, %1796) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1889 = "arith.constant"() <{"value" = 963 : i32}> : () -> i32
      "llvm.inline_asm"(%1889, %1797) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1890 = "arith.constant"() <{"value" = 964 : i32}> : () -> i32
      "llvm.inline_asm"(%1890, %1798) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1891 = "arith.constant"() <{"value" = 965 : i32}> : () -> i32
      "llvm.inline_asm"(%1891, %1799) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1892 = "arith.constant"() <{"value" = 966 : i32}> : () -> i32
      "llvm.inline_asm"(%1892, %1800) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1893 = "arith.constant"() <{"value" = 967 : i32}> : () -> i32
      "llvm.inline_asm"(%1893, %1801) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1894 = "arith.constant"() <{"value" = 968 : i32}> : () -> i32
      "llvm.inline_asm"(%1894, %1802) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1895 = "arith.constant"() <{"value" = 969 : i32}> : () -> i32
      "llvm.inline_asm"(%1895, %1803) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1896 = "arith.constant"() <{"value" = 970 : i32}> : () -> i32
      "llvm.inline_asm"(%1896, %1804) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1897 = "arith.constant"() <{"value" = 971 : i32}> : () -> i32
      "llvm.inline_asm"(%1897, %1805) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1898 = "arith.constant"() <{"value" = 972 : i32}> : () -> i32
      "llvm.inline_asm"(%1898, %1806) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1899 = "arith.constant"() <{"value" = 973 : i32}> : () -> i32
      "llvm.inline_asm"(%1899, %1807) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1900 = "arith.constant"() <{"value" = 974 : i32}> : () -> i32
      "llvm.inline_asm"(%1900, %1808) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1901 = "arith.index_cast"(%1791) : (index) -> i32
      %1902 = "arith.constant"() <{"value" = 975 : i32}> : () -> i32
      "llvm.inline_asm"(%1902, %1901) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1903 = "arith.constant"() <{"value" = 976 : i32}> : () -> i32
      "llvm.inline_asm"(%1903, %1809) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1904 = "arith.constant"() <{"value" = 977 : i32}> : () -> i32
      "llvm.inline_asm"(%1904, %1810) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1905 = "arith.constant"() <{"value" = 978 : i32}> : () -> i32
      "llvm.inline_asm"(%1905, %1811) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1906 = "arith.constant"() <{"value" = 979 : i32}> : () -> i32
      "llvm.inline_asm"(%1906, %1812) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1907 = "arith.constant"() <{"value" = 980 : i32}> : () -> i32
      "llvm.inline_asm"(%1907, %1813) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1908 = "arith.constant"() <{"value" = 981 : i32}> : () -> i32
      "llvm.inline_asm"(%1908, %1814) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1909 = "arith.constant"() <{"value" = 982 : i32}> : () -> i32
      "llvm.inline_asm"(%1909, %1815) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1910 = "arith.constant"() <{"value" = 983 : i32}> : () -> i32
      "llvm.inline_asm"(%1910, %1816) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1911 = "arith.constant"() <{"value" = 984 : i32}> : () -> i32
      "llvm.inline_asm"(%1911, %1817) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1912 = "arith.constant"() <{"value" = 985 : i32}> : () -> i32
      "llvm.inline_asm"(%1912, %1818) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1913 = "arith.constant"() <{"value" = 986 : i32}> : () -> i32
      "llvm.inline_asm"(%1913, %1819) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1914 = "arith.constant"() <{"value" = 987 : i32}> : () -> i32
      "llvm.inline_asm"(%1914, %1820) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1915 = "arith.constant"() <{"value" = 988 : i32}> : () -> i32
      "llvm.inline_asm"(%1915, %1821) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1916 = "arith.constant"() <{"value" = 989 : i32}> : () -> i32
      "llvm.inline_asm"(%1916, %1822) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1917 = "arith.constant"() <{"value" = 990 : i32}> : () -> i32
      "llvm.inline_asm"(%1917, %1823) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1918 = "arith.constant"() <{"value" = 991 : i32}> : () -> i32
      "llvm.inline_asm"(%1918, %1824) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1919 = "arith.constant"() <{"value" = 992 : i32}> : () -> i32
      "llvm.inline_asm"(%1919, %1825) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1920 = "arith.index_cast"(%1793) : (index) -> i32
      %1921 = "arith.constant"() <{"value" = 993 : i32}> : () -> i32
      "llvm.inline_asm"(%1921, %1920) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1922 = "arith.constant"() <{"value" = 994 : i32}> : () -> i32
      "llvm.inline_asm"(%1922, %1826) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1923 = "arith.constant"() <{"value" = 995 : i32}> : () -> i32
      "llvm.inline_asm"(%1923, %1827) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1924 = "arith.constant"() <{"value" = 996 : i32}> : () -> i32
      "llvm.inline_asm"(%1924, %1828) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1925 = "arith.constant"() <{"value" = 997 : i32}> : () -> i32
      "llvm.inline_asm"(%1925, %1829) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1926 = "arith.constant"() <{"value" = 998 : i32}> : () -> i32
      "llvm.inline_asm"(%1926, %1830) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1927 = "arith.constant"() <{"value" = 999 : i32}> : () -> i32
      "llvm.inline_asm"(%1927, %1831) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1928 = "arith.constant"() <{"value" = 1000 : i32}> : () -> i32
      "llvm.inline_asm"(%1928, %1832) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1929 = "arith.constant"() <{"value" = 1001 : i32}> : () -> i32
      "llvm.inline_asm"(%1929, %1833) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1930 = "arith.constant"() <{"value" = 1002 : i32}> : () -> i32
      "llvm.inline_asm"(%1930, %1834) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1931 = "arith.index_cast"(%1794) : (index) -> i32
      %1932 = "arith.constant"() <{"value" = 1003 : i32}> : () -> i32
      "llvm.inline_asm"(%1932, %1931) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1933 = "arith.constant"() <{"value" = 1004 : i32}> : () -> i32
      "llvm.inline_asm"(%1933, %1835) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1934 = "arith.constant"() <{"value" = 1005 : i32}> : () -> i32
      "llvm.inline_asm"(%1934, %1836) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1935 = "arith.constant"() <{"value" = 1006 : i32}> : () -> i32
      "llvm.inline_asm"(%1935, %1837) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1936 = "arith.constant"() <{"value" = 1007 : i32}> : () -> i32
      "llvm.inline_asm"(%1936, %1838) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1937 = "arith.constant"() <{"value" = 1008 : i32}> : () -> i32
      "llvm.inline_asm"(%1937, %1839) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1938 = "arith.constant"() <{"value" = 1009 : i32}> : () -> i32
      "llvm.inline_asm"(%1938, %1840) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1939 = "arith.constant"() <{"value" = 1010 : i32}> : () -> i32
      "llvm.inline_asm"(%1939, %1841) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1940 = "arith.constant"() <{"value" = 1011 : i32}> : () -> i32
      "llvm.inline_asm"(%1940, %1842) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1941 = "arith.constant"() <{"value" = 1012 : i32}> : () -> i32
      "llvm.inline_asm"(%1941, %1843) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1942 = "arith.constant"() <{"value" = 1013 : i32}> : () -> i32
      "llvm.inline_asm"(%1942, %1844) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1943 = "arith.constant"() <{"value" = 1017 : i32}> : () -> i32
      "llvm.inline_asm"(%1943, %1845) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1944 = "arith.constant"() <{"value" = 1018 : i32}> : () -> i32
      "llvm.inline_asm"(%1944, %1846) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1945 = "arith.constant"() <{"value" = 1019 : i32}> : () -> i32
      "llvm.inline_asm"(%1945, %1847) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1946 = "arith.constant"() <{"value" = 1020 : i32}> : () -> i32
      "llvm.inline_asm"(%1946, %1848) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1947 = "arith.constant"() <{"value" = 1021 : i32}> : () -> i32
      "llvm.inline_asm"(%1947, %1872) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1948 = "arith.constant"() <{"value" = 1022 : i32}> : () -> i32
      "llvm.inline_asm"(%1948, %1852) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1949 = "arith.constant"() <{"value" = 1023 : i32}> : () -> i32
      "llvm.inline_asm"(%1949, %1883) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1950 = "arith.constant"() <{"value" = 1024 : i32}> : () -> i32
      "llvm.inline_asm"(%1950, %1883) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1951 = "arith.constant"() <{"value" = 1025 : i32}> : () -> i32
      "llvm.inline_asm"(%1951, %1854) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1952 = "arith.constant"() <{"value" = 1026 : i32}> : () -> i32
      "llvm.inline_asm"(%1952, %1854) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1953 = "arith.constant"() <{"value" = 1027 : i32}> : () -> i32
      "llvm.inline_asm"(%1953, %1854) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1954 = "arith.constant"() <{"value" = 1028 : i32}> : () -> i32
      "llvm.inline_asm"(%1954, %1854) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1955 = "arith.constant"() <{"value" = 1029 : i32}> : () -> i32
      "llvm.inline_asm"(%1955, %1854) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1956 = "arith.constant"() <{"value" = 1030 : i32}> : () -> i32
      "llvm.inline_asm"(%1956, %1854) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1957 = "arith.constant"() <{"value" = 1031 : i32}> : () -> i32
      "llvm.inline_asm"(%1957, %1854) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1958 = "arith.constant"() <{"value" = 1032 : i32}> : () -> i32
      "llvm.inline_asm"(%1958, %1854) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1959 = "arith.constant"() <{"value" = 1033 : i32}> : () -> i32
      "llvm.inline_asm"(%1959, %1884) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1960 = "arith.constant"() <{"value" = 1034 : i32}> : () -> i32
      "llvm.inline_asm"(%1960, %1848) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1961 = "arith.constant"() <{"value" = 1 : i5}> : () -> i5
      %1962 = "arith.constant"() <{"value" = 1014 : i32}> : () -> i32
      "llvm.inline_asm"(%1962, %1961) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i5) -> ()
      %1963 = "arith.constant"() <{"value" = 1035 : i32}> : () -> i32
      "llvm.inline_asm"(%1963, %1961) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i5) -> ()
      %1964 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %1965 = "arith.constant"() <{"value" = 1035 : i32}> : () -> i32
      "llvm.inline_asm"(%1965, %1964) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      "llvm.inline_asm"(%1965, %1964) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %1966 = "arith.constant"() <{"value" = 1014 : i32}> : () -> i32
      "llvm.inline_asm"(%1966, %1964) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      "llvm.inline_asm"(%1966, %1964) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_cluster_hw_barrier}> : () -> ()
    "scf.if"(%6) ({
      %1967 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %1968 = "memref.dim"(%1759, %1967) : (memref<1x32x32x16xi8>, index) -> index
      %1969 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %1970 = "memref.dim"(%1759, %1969) : (memref<1x32x32x16xi8>, index) -> index
      %1971 = "arith.muli"(%1968, %1970) : (index, index) -> index
      %1972 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %1973 = "memref.dim"(%1759, %1972) : (memref<1x32x32x16xi8>, index) -> index
      %1974 = "arith.muli"(%1971, %1973) : (index, index) -> index
      %1975 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %1976 = "memref.dim"(%1759, %1975) : (memref<1x32x32x16xi8>, index) -> index
      %1977 = "arith.muli"(%1974, %1976) : (index, index) -> index
      %1978 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %1979 = "arith.muli"(%1977, %1978) : (index, index) -> index
      %1980 = "memref.extract_aligned_pointer_as_index"(%1759) : (memref<1x32x32x16xi8>) -> index
      %1981 = "memref.extract_aligned_pointer_as_index"(%1675) : (memref<1x32x32x16xi8>) -> index
      "func.call"(%1980, %1981, %1979) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    %1982 = "memref.get_global"() <{"name" = @_static_const_10}> : () -> memref<1x33x33x16xi8>
    %1983 = "memref.subview"(%1982) <{"operandSegmentSizes" = array<i32: 1, 0, 0, 0>, "static_offsets" = array<i64: 0, 0, 0, 0>, "static_sizes" = array<i64: 1, 32, 32, 16>, "static_strides" = array<i64: 1, 1, 1, 1>}> : (memref<1x33x33x16xi8>) -> memref<1x32x32x16xi8, strided<[17424, 528, 16, 1]>>
    "scf.if"(%6) ({
      %1984 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %1985 = "memref.dim"(%1675, %1984) : (memref<1x32x32x16xi8>, index) -> index
      %1986 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %1987 = "memref.dim"(%1675, %1986) : (memref<1x32x32x16xi8>, index) -> index
      %1988 = "arith.muli"(%1985, %1987) : (index, index) -> index
      %1989 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %1990 = "memref.dim"(%1675, %1989) : (memref<1x32x32x16xi8>, index) -> index
      %1991 = "arith.muli"(%1988, %1990) : (index, index) -> index
      %1992 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %1993 = "memref.dim"(%1675, %1992) : (memref<1x32x32x16xi8>, index) -> index
      %1994 = "arith.muli"(%1991, %1993) : (index, index) -> index
      %1995 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %1996 = "arith.muli"(%1994, %1995) : (index, index) -> index
      %1997 = "memref.extract_aligned_pointer_as_index"(%1675) : (memref<1x32x32x16xi8>) -> index
      %1998 = "memref.extract_aligned_pointer_as_index"(%1983) : (memref<1x32x32x16xi8, strided<[17424, 528, 16, 1]>>) -> index
      "func.call"(%1997, %1998, %1996) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_clear_l1}> : () -> ()
    %1999 = "memref.get_global"() <{"name" = @__constant_32x3x3x16xi8}> : () -> memref<32x3x3x16xi8>
    %2000 = "memref.get_global"() <{"name" = @__constant_32xi32}> : () -> memref<32xi32>
    %2001 = "memref.get_global"() <{"name" = @_static_const_11}> : () -> memref<1x16x16x32xi8>
    %2002 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %2003 = "arith.constant"() <{"value" = 4 : index}> : () -> index
    %2004 = "arith.muli"(%2002, %2003) : (index, index) -> index
    %2005 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %2006 = "func.call"(%2004, %2005) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %2007 = "llvm.load"(%2006) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %2008 = "llvm.extractvalue"(%2007) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %2009 = "llvm.extractvalue"(%2007) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %2010 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %2011 = "llvm.insertvalue"(%2010, %2008) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %2012 = "llvm.insertvalue"(%2011, %2009) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %2013 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %2014 = "llvm.insertvalue"(%2012, %2013) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %2015 = "builtin.unrealized_conversion_cast"(%2002) : (index) -> i32
    %2016 = "llvm.insertvalue"(%2014, %2015) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %2017 = "builtin.unrealized_conversion_cast"(%2016) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>) -> memref<32xi32>
    %2018 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %2019 = "arith.constant"() <{"value" = 33 : index}> : () -> index
    %2020 = "arith.constant"() <{"value" = 33 : index}> : () -> index
    %2021 = "arith.constant"() <{"value" = 16 : index}> : () -> index
    %2022 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %2023 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %2024 = "arith.constant"() <{"value" = 33 : index}> : () -> index
    %2025 = "arith.constant"() <{"value" = 33 : index}> : () -> index
    %2026 = "arith.constant"() <{"value" = 2 : index}> : () -> index
    %2027 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %2028 = "arith.constant"() <{"value" = 17424 : index}> : () -> index
    %2029 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %2030 = "arith.constant"() <{"value" = 8712 : index}> : () -> index
    %2031 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %2032 = "arith.constant"() <{"value" = 264 : index}> : () -> index
    %2033 = "arith.constant"() <{"value" = 17424 : index}> : () -> index
    %2034 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %2035 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %2036 = "arith.subi"(%2023, %2034) : (index, index) -> index
    %2037 = "arith.muli"(%2036, %2033) : (index, index) -> index
    %2038 = "arith.addi"(%2035, %2037) : (index, index) -> index
    %2039 = "arith.subi"(%2024, %2034) : (index, index) -> index
    %2040 = "arith.muli"(%2039, %2032) : (index, index) -> index
    %2041 = "arith.addi"(%2038, %2040) : (index, index) -> index
    %2042 = "arith.subi"(%2025, %2034) : (index, index) -> index
    %2043 = "arith.muli"(%2042, %2031) : (index, index) -> index
    %2044 = "arith.addi"(%2041, %2043) : (index, index) -> index
    %2045 = "arith.subi"(%2026, %2034) : (index, index) -> index
    %2046 = "arith.muli"(%2045, %2030) : (index, index) -> index
    %2047 = "arith.addi"(%2044, %2046) : (index, index) -> index
    %2048 = "arith.subi"(%2027, %2034) : (index, index) -> index
    %2049 = "arith.muli"(%2048, %2029) : (index, index) -> index
    %2050 = "arith.addi"(%2047, %2049) : (index, index) -> index
    %2051 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %2052 = "arith.addi"(%2050, %2051) : (index, index) -> index
    %2053 = "arith.muli"(%2034, %2052) : (index, index) -> index
    %2054 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %2055 = "arith.muli"(%2054, %2051) : (index, index) -> index
    %2056 = "arith.addi"(%2053, %2055) : (index, index) -> index
    %2057 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %2058 = "func.call"(%2056, %2057) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %2059 = "llvm.load"(%2058) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %2060 = "llvm.extractvalue"(%2059) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %2061 = "llvm.extractvalue"(%2059) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %2062 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2063 = "llvm.insertvalue"(%2062, %2060) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2064 = "llvm.insertvalue"(%2063, %2061) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2065 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %2066 = "llvm.insertvalue"(%2064, %2065) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2067 = "builtin.unrealized_conversion_cast"(%2018) : (index) -> i32
    %2068 = "llvm.insertvalue"(%2066, %2067) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2069 = "builtin.unrealized_conversion_cast"(%2019) : (index) -> i32
    %2070 = "llvm.insertvalue"(%2068, %2069) <{"position" = array<i64: 3, 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2071 = "builtin.unrealized_conversion_cast"(%2020) : (index) -> i32
    %2072 = "llvm.insertvalue"(%2070, %2071) <{"position" = array<i64: 3, 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2073 = "builtin.unrealized_conversion_cast"(%2021) : (index) -> i32
    %2074 = "llvm.insertvalue"(%2072, %2073) <{"position" = array<i64: 3, 3>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2075 = "builtin.unrealized_conversion_cast"(%2074) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>) -> memref<1x33x33x16xi8>
    %2076 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %2077 = "arith.constant"() <{"value" = 3 : index}> : () -> index
    %2078 = "arith.constant"() <{"value" = 3 : index}> : () -> index
    %2079 = "arith.constant"() <{"value" = 16 : index}> : () -> index
    %2080 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %2081 = "arith.constant"() <{"value" = 4 : index}> : () -> index
    %2082 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %2083 = "arith.constant"() <{"value" = 3 : index}> : () -> index
    %2084 = "arith.constant"() <{"value" = 3 : index}> : () -> index
    %2085 = "arith.constant"() <{"value" = 2 : index}> : () -> index
    %2086 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %2087 = "arith.constant"() <{"value" = 1152 : index}> : () -> index
    %2088 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %2089 = "arith.constant"() <{"value" = 576 : index}> : () -> index
    %2090 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %2091 = "arith.constant"() <{"value" = 192 : index}> : () -> index
    %2092 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %2093 = "arith.constant"() <{"value" = 1152 : index}> : () -> index
    %2094 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %2095 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %2096 = "arith.subi"(%2081, %2094) : (index, index) -> index
    %2097 = "arith.muli"(%2096, %2093) : (index, index) -> index
    %2098 = "arith.addi"(%2095, %2097) : (index, index) -> index
    %2099 = "arith.subi"(%2082, %2094) : (index, index) -> index
    %2100 = "arith.muli"(%2099, %2092) : (index, index) -> index
    %2101 = "arith.addi"(%2098, %2100) : (index, index) -> index
    %2102 = "arith.subi"(%2083, %2094) : (index, index) -> index
    %2103 = "arith.muli"(%2102, %2091) : (index, index) -> index
    %2104 = "arith.addi"(%2101, %2103) : (index, index) -> index
    %2105 = "arith.subi"(%2084, %2094) : (index, index) -> index
    %2106 = "arith.muli"(%2105, %2090) : (index, index) -> index
    %2107 = "arith.addi"(%2104, %2106) : (index, index) -> index
    %2108 = "arith.subi"(%2085, %2094) : (index, index) -> index
    %2109 = "arith.muli"(%2108, %2089) : (index, index) -> index
    %2110 = "arith.addi"(%2107, %2109) : (index, index) -> index
    %2111 = "arith.subi"(%2086, %2094) : (index, index) -> index
    %2112 = "arith.muli"(%2111, %2088) : (index, index) -> index
    %2113 = "arith.addi"(%2110, %2112) : (index, index) -> index
    %2114 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %2115 = "arith.addi"(%2113, %2114) : (index, index) -> index
    %2116 = "arith.muli"(%2094, %2115) : (index, index) -> index
    %2117 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %2118 = "arith.muli"(%2117, %2114) : (index, index) -> index
    %2119 = "arith.addi"(%2116, %2118) : (index, index) -> index
    %2120 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %2121 = "func.call"(%2119, %2120) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %2122 = "llvm.load"(%2121) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %2123 = "llvm.extractvalue"(%2122) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %2124 = "llvm.extractvalue"(%2122) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %2125 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2126 = "llvm.insertvalue"(%2125, %2123) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2127 = "llvm.insertvalue"(%2126, %2124) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2128 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %2129 = "llvm.insertvalue"(%2127, %2128) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2130 = "builtin.unrealized_conversion_cast"(%2076) : (index) -> i32
    %2131 = "llvm.insertvalue"(%2129, %2130) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2132 = "builtin.unrealized_conversion_cast"(%2077) : (index) -> i32
    %2133 = "llvm.insertvalue"(%2131, %2132) <{"position" = array<i64: 3, 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2134 = "builtin.unrealized_conversion_cast"(%2078) : (index) -> i32
    %2135 = "llvm.insertvalue"(%2133, %2134) <{"position" = array<i64: 3, 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2136 = "builtin.unrealized_conversion_cast"(%2079) : (index) -> i32
    %2137 = "llvm.insertvalue"(%2135, %2136) <{"position" = array<i64: 3, 3>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2138 = "builtin.unrealized_conversion_cast"(%2137) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>) -> memref<32x3x3x16xi8>
    %2139 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %2140 = "arith.constant"() <{"value" = 16 : index}> : () -> index
    %2141 = "arith.constant"() <{"value" = 16 : index}> : () -> index
    %2142 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %2143 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %2144 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %2145 = "arith.constant"() <{"value" = 16 : index}> : () -> index
    %2146 = "arith.constant"() <{"value" = 16 : index}> : () -> index
    %2147 = "arith.constant"() <{"value" = 4 : index}> : () -> index
    %2148 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %2149 = "arith.constant"() <{"value" = 8192 : index}> : () -> index
    %2150 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %2151 = "arith.constant"() <{"value" = 2048 : index}> : () -> index
    %2152 = "arith.constant"() <{"value" = 128 : index}> : () -> index
    %2153 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %2154 = "arith.constant"() <{"value" = 8192 : index}> : () -> index
    %2155 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %2156 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %2157 = "arith.subi"(%2144, %2155) : (index, index) -> index
    %2158 = "arith.muli"(%2157, %2154) : (index, index) -> index
    %2159 = "arith.addi"(%2156, %2158) : (index, index) -> index
    %2160 = "arith.subi"(%2145, %2155) : (index, index) -> index
    %2161 = "arith.muli"(%2160, %2153) : (index, index) -> index
    %2162 = "arith.addi"(%2159, %2161) : (index, index) -> index
    %2163 = "arith.subi"(%2146, %2155) : (index, index) -> index
    %2164 = "arith.muli"(%2163, %2152) : (index, index) -> index
    %2165 = "arith.addi"(%2162, %2164) : (index, index) -> index
    %2166 = "arith.subi"(%2147, %2155) : (index, index) -> index
    %2167 = "arith.muli"(%2166, %2151) : (index, index) -> index
    %2168 = "arith.addi"(%2165, %2167) : (index, index) -> index
    %2169 = "arith.subi"(%2148, %2155) : (index, index) -> index
    %2170 = "arith.muli"(%2169, %2150) : (index, index) -> index
    %2171 = "arith.addi"(%2168, %2170) : (index, index) -> index
    %2172 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %2173 = "arith.addi"(%2171, %2172) : (index, index) -> index
    %2174 = "arith.muli"(%2155, %2173) : (index, index) -> index
    %2175 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %2176 = "arith.muli"(%2175, %2172) : (index, index) -> index
    %2177 = "arith.addi"(%2174, %2176) : (index, index) -> index
    %2178 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %2179 = "func.call"(%2177, %2178) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %2180 = "llvm.load"(%2179) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %2181 = "llvm.extractvalue"(%2180) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %2182 = "llvm.extractvalue"(%2180) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %2183 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2184 = "llvm.insertvalue"(%2183, %2181) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2185 = "llvm.insertvalue"(%2184, %2182) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2186 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %2187 = "llvm.insertvalue"(%2185, %2186) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2188 = "builtin.unrealized_conversion_cast"(%2139) : (index) -> i32
    %2189 = "llvm.insertvalue"(%2187, %2188) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2190 = "builtin.unrealized_conversion_cast"(%2140) : (index) -> i32
    %2191 = "llvm.insertvalue"(%2189, %2190) <{"position" = array<i64: 3, 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2192 = "builtin.unrealized_conversion_cast"(%2141) : (index) -> i32
    %2193 = "llvm.insertvalue"(%2191, %2192) <{"position" = array<i64: 3, 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2194 = "builtin.unrealized_conversion_cast"(%2142) : (index) -> i32
    %2195 = "llvm.insertvalue"(%2193, %2194) <{"position" = array<i64: 3, 3>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2196 = "builtin.unrealized_conversion_cast"(%2195) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>) -> memref<1x16x16x32xi8>
    "scf.if"(%6) ({
      %2197 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %2198 = "memref.dim"(%1999, %2197) : (memref<32x3x3x16xi8>, index) -> index
      %2199 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %2200 = "memref.dim"(%1999, %2199) : (memref<32x3x3x16xi8>, index) -> index
      %2201 = "arith.muli"(%2198, %2200) : (index, index) -> index
      %2202 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %2203 = "memref.dim"(%1999, %2202) : (memref<32x3x3x16xi8>, index) -> index
      %2204 = "arith.muli"(%2201, %2203) : (index, index) -> index
      %2205 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %2206 = "memref.dim"(%1999, %2205) : (memref<32x3x3x16xi8>, index) -> index
      %2207 = "arith.muli"(%2204, %2206) : (index, index) -> index
      %2208 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %2209 = "arith.muli"(%2207, %2208) : (index, index) -> index
      %2210 = "memref.extract_aligned_pointer_as_index"(%1999) : (memref<32x3x3x16xi8>) -> index
      %2211 = "memref.extract_aligned_pointer_as_index"(%2138) : (memref<32x3x3x16xi8>) -> index
      "func.call"(%2210, %2211, %2209) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      %2212 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %2213 = "memref.dim"(%1982, %2212) : (memref<1x33x33x16xi8>, index) -> index
      %2214 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %2215 = "memref.dim"(%1982, %2214) : (memref<1x33x33x16xi8>, index) -> index
      %2216 = "arith.muli"(%2213, %2215) : (index, index) -> index
      %2217 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %2218 = "memref.dim"(%1982, %2217) : (memref<1x33x33x16xi8>, index) -> index
      %2219 = "arith.muli"(%2216, %2218) : (index, index) -> index
      %2220 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %2221 = "memref.dim"(%1982, %2220) : (memref<1x33x33x16xi8>, index) -> index
      %2222 = "arith.muli"(%2219, %2221) : (index, index) -> index
      %2223 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %2224 = "arith.muli"(%2222, %2223) : (index, index) -> index
      %2225 = "memref.extract_aligned_pointer_as_index"(%1982) : (memref<1x33x33x16xi8>) -> index
      %2226 = "memref.extract_aligned_pointer_as_index"(%2075) : (memref<1x33x33x16xi8>) -> index
      "func.call"(%2225, %2226, %2224) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      %2227 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %2228 = "memref.dim"(%2000, %2227) : (memref<32xi32>, index) -> index
      %2229 = "arith.constant"() <{"value" = 4 : index}> : () -> index
      %2230 = "arith.muli"(%2228, %2229) : (index, index) -> index
      %2231 = "memref.extract_aligned_pointer_as_index"(%2000) : (memref<32xi32>) -> index
      %2232 = "memref.extract_aligned_pointer_as_index"(%2017) : (memref<32xi32>) -> index
      "func.call"(%2231, %2232, %2230) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_cluster_hw_barrier}> : () -> ()
    "scf.if"(%4) ({
      %2233 = "memref.extract_aligned_pointer_as_index"(%2075) : (memref<1x33x33x16xi8>) -> index
      %2234 = "memref.extract_aligned_pointer_as_index"(%2138) : (memref<32x3x3x16xi8>) -> index
      %2235 = "memref.extract_aligned_pointer_as_index"(%2196) : (memref<1x16x16x32xi8>) -> index
      %2236 = "memref.extract_aligned_pointer_as_index"(%2017) : (memref<32xi32>) -> index
      %2237 = "memref.extract_aligned_pointer_as_index"(%2017) : (memref<32xi32>) -> index
      %2238 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %2239 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %2240 = "arith.constant"() <{"value" = 3 : i32}> : () -> i32
      %2241 = "arith.constant"() <{"value" = 3 : i32}> : () -> i32
      %2242 = "arith.constant"() <{"value" = 2 : i32}> : () -> i32
      %2243 = "arith.constant"() <{"value" = 4 : i32}> : () -> i32
      %2244 = "arith.constant"() <{"value" = 2 : i32}> : () -> i32
      %2245 = "arith.constant"() <{"value" = 16 : i32}> : () -> i32
      %2246 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %2247 = "arith.constant"() <{"value" = 264 : i32}> : () -> i32
      %2248 = "arith.constant"() <{"value" = 8712 : i32}> : () -> i32
      %2249 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %2250 = "arith.constant"() <{"value" = 4224 : i32}> : () -> i32
      %2251 = "arith.constant"() <{"value" = 16 : i32}> : () -> i32
      %2252 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %2253 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %2254 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %2255 = "arith.constant"() <{"value" = 72 : i32}> : () -> i32
      %2256 = "arith.constant"() <{"value" = 32 : i32}> : () -> i32
      %2257 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %2258 = "arith.constant"() <{"value" = 64 : i32}> : () -> i32
      %2259 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %2260 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %2261 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %2262 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %2263 = "arith.constant"() <{"value" = 4 : i32}> : () -> i32
      %2264 = "arith.constant"() <{"value" = 32 : i32}> : () -> i32
      %2265 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %2266 = "arith.constant"() <{"value" = 2048 : i32}> : () -> i32
      %2267 = "arith.constant"() <{"value" = 64 : i32}> : () -> i32
      %2268 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %2269 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %2270 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %2271 = "arith.constant"() <{"value" = 4 : i32}> : () -> i32
      %2272 = "arith.constant"() <{"value" = 32 : i32}> : () -> i32
      %2273 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %2274 = "arith.constant"() <{"value" = 32 : i32}> : () -> i32
      %2275 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %2276 = "arith.constant"() <{"value" = -1 : i32}> : () -> i32
      %2277 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %2278 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %2279 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %2280 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %2281 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %2282 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %2283 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %2284 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %2285 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %2286 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %2287 = "arith.constant"() <{"value" = 18 : i32}> : () -> i32
      %2288 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %2289 = "arith.constant"() <{"value" = 128 : i32}> : () -> i32
      %2290 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %2291 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %2292 = "arith.constant"() <{"value" = 255 : i32}> : () -> i32
      %2293 = "arith.andi"(%10, %2292) : (i32, i32) -> i32
      %2294 = "arith.andi"(%11, %2292) : (i32, i32) -> i32
      %2295 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %2296 = "arith.shli"(%2293, %2295) : (i32, i32) -> i32
      %2297 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %2298 = "arith.shli"(%2294, %2297) : (i32, i32) -> i32
      %2299 = "arith.ori"(%2296, %2298) : (i32, i32) -> i32
      %2300 = "arith.constant"() <{"value" = 127 : i32}> : () -> i32
      %2301 = "arith.constant"() <{"value" = -128 : i32}> : () -> i32
      %2302 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %2303 = "arith.constant"() <{"value" = 39 : i32}> : () -> i32
      %2304 = "arith.constant"() <{"value" = 1511721700 : i32}> : () -> i32
      %2305 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %2306 = "arith.constant"() <{"value" = -128 : i32}> : () -> i32
      %2307 = "arith.constant"() <{"value" = 255 : i32}> : () -> i32
      %2308 = "arith.andi"(%2300, %2307) : (i32, i32) -> i32
      %2309 = "arith.andi"(%2301, %2307) : (i32, i32) -> i32
      %2310 = "arith.andi"(%2305, %2307) : (i32, i32) -> i32
      %2311 = "arith.andi"(%2306, %2307) : (i32, i32) -> i32
      %2312 = "arith.constant"() <{"value" = 24 : i32}> : () -> i32
      %2313 = "arith.shli"(%2309, %2312) : (i32, i32) -> i32
      %2314 = "arith.constant"() <{"value" = 16 : i32}> : () -> i32
      %2315 = "arith.shli"(%2308, %2314) : (i32, i32) -> i32
      %2316 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %2317 = "arith.shli"(%2311, %2316) : (i32, i32) -> i32
      %2318 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %2319 = "arith.shli"(%2310, %2318) : (i32, i32) -> i32
      %2320 = "arith.ori"(%2313, %2315) : (i32, i32) -> i32
      %2321 = "arith.ori"(%2317, %2319) : (i32, i32) -> i32
      %2322 = "arith.ori"(%2320, %2321) : (i32, i32) -> i32
      %2323 = "arith.constant"() <{"value" = 24 : i32}> : () -> i32
      %2324 = "arith.shli"(%2303, %2323) : (i32, i32) -> i32
      %2325 = "arith.constant"() <{"value" = 16 : i32}> : () -> i32
      %2326 = "arith.shli"(%2303, %2325) : (i32, i32) -> i32
      %2327 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %2328 = "arith.shli"(%2303, %2327) : (i32, i32) -> i32
      %2329 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %2330 = "arith.shli"(%2303, %2329) : (i32, i32) -> i32
      %2331 = "arith.ori"(%2324, %2326) : (i32, i32) -> i32
      %2332 = "arith.ori"(%2328, %2330) : (i32, i32) -> i32
      %2333 = "arith.ori"(%2331, %2332) : (i32, i32) -> i32
      %2334 = "arith.constant"() <{"value" = 128 : i32}> : () -> i32
      %2335 = "arith.index_cast"(%2233) : (index) -> i32
      %2336 = "arith.constant"() <{"value" = 960 : i32}> : () -> i32
      "llvm.inline_asm"(%2336, %2335) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2337 = "arith.constant"() <{"value" = 961 : i32}> : () -> i32
      "llvm.inline_asm"(%2337, %2238) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2338 = "arith.constant"() <{"value" = 962 : i32}> : () -> i32
      "llvm.inline_asm"(%2338, %2239) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2339 = "arith.constant"() <{"value" = 963 : i32}> : () -> i32
      "llvm.inline_asm"(%2339, %2240) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2340 = "arith.constant"() <{"value" = 964 : i32}> : () -> i32
      "llvm.inline_asm"(%2340, %2241) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2341 = "arith.constant"() <{"value" = 965 : i32}> : () -> i32
      "llvm.inline_asm"(%2341, %2242) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2342 = "arith.constant"() <{"value" = 966 : i32}> : () -> i32
      "llvm.inline_asm"(%2342, %2243) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2343 = "arith.constant"() <{"value" = 967 : i32}> : () -> i32
      "llvm.inline_asm"(%2343, %2244) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2344 = "arith.constant"() <{"value" = 968 : i32}> : () -> i32
      "llvm.inline_asm"(%2344, %2245) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2345 = "arith.constant"() <{"value" = 969 : i32}> : () -> i32
      "llvm.inline_asm"(%2345, %2246) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2346 = "arith.constant"() <{"value" = 970 : i32}> : () -> i32
      "llvm.inline_asm"(%2346, %2247) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2347 = "arith.constant"() <{"value" = 971 : i32}> : () -> i32
      "llvm.inline_asm"(%2347, %2248) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2348 = "arith.constant"() <{"value" = 972 : i32}> : () -> i32
      "llvm.inline_asm"(%2348, %2249) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2349 = "arith.constant"() <{"value" = 973 : i32}> : () -> i32
      "llvm.inline_asm"(%2349, %2250) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2350 = "arith.constant"() <{"value" = 974 : i32}> : () -> i32
      "llvm.inline_asm"(%2350, %2251) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2351 = "arith.index_cast"(%2234) : (index) -> i32
      %2352 = "arith.constant"() <{"value" = 975 : i32}> : () -> i32
      "llvm.inline_asm"(%2352, %2351) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2353 = "arith.constant"() <{"value" = 976 : i32}> : () -> i32
      "llvm.inline_asm"(%2353, %2252) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2354 = "arith.constant"() <{"value" = 977 : i32}> : () -> i32
      "llvm.inline_asm"(%2354, %2253) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2355 = "arith.constant"() <{"value" = 978 : i32}> : () -> i32
      "llvm.inline_asm"(%2355, %2254) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2356 = "arith.constant"() <{"value" = 979 : i32}> : () -> i32
      "llvm.inline_asm"(%2356, %2255) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2357 = "arith.constant"() <{"value" = 980 : i32}> : () -> i32
      "llvm.inline_asm"(%2357, %2256) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2358 = "arith.constant"() <{"value" = 981 : i32}> : () -> i32
      "llvm.inline_asm"(%2358, %2257) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2359 = "arith.constant"() <{"value" = 982 : i32}> : () -> i32
      "llvm.inline_asm"(%2359, %2258) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2360 = "arith.constant"() <{"value" = 983 : i32}> : () -> i32
      "llvm.inline_asm"(%2360, %2259) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2361 = "arith.index_cast"(%2235) : (index) -> i32
      %2362 = "arith.constant"() <{"value" = 984 : i32}> : () -> i32
      "llvm.inline_asm"(%2362, %2361) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2363 = "arith.constant"() <{"value" = 985 : i32}> : () -> i32
      "llvm.inline_asm"(%2363, %2260) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2364 = "arith.constant"() <{"value" = 986 : i32}> : () -> i32
      "llvm.inline_asm"(%2364, %2261) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2365 = "arith.constant"() <{"value" = 987 : i32}> : () -> i32
      "llvm.inline_asm"(%2365, %2262) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2366 = "arith.constant"() <{"value" = 988 : i32}> : () -> i32
      "llvm.inline_asm"(%2366, %2263) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2367 = "arith.constant"() <{"value" = 989 : i32}> : () -> i32
      "llvm.inline_asm"(%2367, %2264) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2368 = "arith.constant"() <{"value" = 990 : i32}> : () -> i32
      "llvm.inline_asm"(%2368, %2265) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2369 = "arith.constant"() <{"value" = 991 : i32}> : () -> i32
      "llvm.inline_asm"(%2369, %2266) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2370 = "arith.constant"() <{"value" = 992 : i32}> : () -> i32
      "llvm.inline_asm"(%2370, %2267) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2371 = "arith.index_cast"(%2236) : (index) -> i32
      %2372 = "arith.constant"() <{"value" = 993 : i32}> : () -> i32
      "llvm.inline_asm"(%2372, %2371) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2373 = "arith.constant"() <{"value" = 994 : i32}> : () -> i32
      "llvm.inline_asm"(%2373, %2268) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2374 = "arith.constant"() <{"value" = 995 : i32}> : () -> i32
      "llvm.inline_asm"(%2374, %2269) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2375 = "arith.constant"() <{"value" = 996 : i32}> : () -> i32
      "llvm.inline_asm"(%2375, %2270) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2376 = "arith.constant"() <{"value" = 997 : i32}> : () -> i32
      "llvm.inline_asm"(%2376, %2271) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2377 = "arith.constant"() <{"value" = 998 : i32}> : () -> i32
      "llvm.inline_asm"(%2377, %2272) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2378 = "arith.constant"() <{"value" = 999 : i32}> : () -> i32
      "llvm.inline_asm"(%2378, %2273) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2379 = "arith.constant"() <{"value" = 1000 : i32}> : () -> i32
      "llvm.inline_asm"(%2379, %2274) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2380 = "arith.constant"() <{"value" = 1001 : i32}> : () -> i32
      "llvm.inline_asm"(%2380, %2275) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2381 = "arith.constant"() <{"value" = 1002 : i32}> : () -> i32
      "llvm.inline_asm"(%2381, %2276) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2382 = "arith.index_cast"(%2237) : (index) -> i32
      %2383 = "arith.constant"() <{"value" = 1003 : i32}> : () -> i32
      "llvm.inline_asm"(%2383, %2382) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2384 = "arith.constant"() <{"value" = 1004 : i32}> : () -> i32
      "llvm.inline_asm"(%2384, %2277) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2385 = "arith.constant"() <{"value" = 1005 : i32}> : () -> i32
      "llvm.inline_asm"(%2385, %2278) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2386 = "arith.constant"() <{"value" = 1006 : i32}> : () -> i32
      "llvm.inline_asm"(%2386, %2279) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2387 = "arith.constant"() <{"value" = 1007 : i32}> : () -> i32
      "llvm.inline_asm"(%2387, %2280) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2388 = "arith.constant"() <{"value" = 1008 : i32}> : () -> i32
      "llvm.inline_asm"(%2388, %2281) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2389 = "arith.constant"() <{"value" = 1009 : i32}> : () -> i32
      "llvm.inline_asm"(%2389, %2282) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2390 = "arith.constant"() <{"value" = 1010 : i32}> : () -> i32
      "llvm.inline_asm"(%2390, %2283) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2391 = "arith.constant"() <{"value" = 1011 : i32}> : () -> i32
      "llvm.inline_asm"(%2391, %2284) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2392 = "arith.constant"() <{"value" = 1012 : i32}> : () -> i32
      "llvm.inline_asm"(%2392, %2285) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2393 = "arith.constant"() <{"value" = 1013 : i32}> : () -> i32
      "llvm.inline_asm"(%2393, %2286) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2394 = "arith.constant"() <{"value" = 1017 : i32}> : () -> i32
      "llvm.inline_asm"(%2394, %2287) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2395 = "arith.constant"() <{"value" = 1018 : i32}> : () -> i32
      "llvm.inline_asm"(%2395, %2288) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2396 = "arith.constant"() <{"value" = 1019 : i32}> : () -> i32
      "llvm.inline_asm"(%2396, %2289) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2397 = "arith.constant"() <{"value" = 1020 : i32}> : () -> i32
      "llvm.inline_asm"(%2397, %2299) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2398 = "arith.constant"() <{"value" = 1021 : i32}> : () -> i32
      "llvm.inline_asm"(%2398, %2322) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2399 = "arith.constant"() <{"value" = 1022 : i32}> : () -> i32
      "llvm.inline_asm"(%2399, %2302) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2400 = "arith.constant"() <{"value" = 1023 : i32}> : () -> i32
      "llvm.inline_asm"(%2400, %2333) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2401 = "arith.constant"() <{"value" = 1024 : i32}> : () -> i32
      "llvm.inline_asm"(%2401, %2333) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2402 = "arith.constant"() <{"value" = 1025 : i32}> : () -> i32
      "llvm.inline_asm"(%2402, %2304) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2403 = "arith.constant"() <{"value" = 1026 : i32}> : () -> i32
      "llvm.inline_asm"(%2403, %2304) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2404 = "arith.constant"() <{"value" = 1027 : i32}> : () -> i32
      "llvm.inline_asm"(%2404, %2304) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2405 = "arith.constant"() <{"value" = 1028 : i32}> : () -> i32
      "llvm.inline_asm"(%2405, %2304) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2406 = "arith.constant"() <{"value" = 1029 : i32}> : () -> i32
      "llvm.inline_asm"(%2406, %2304) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2407 = "arith.constant"() <{"value" = 1030 : i32}> : () -> i32
      "llvm.inline_asm"(%2407, %2304) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2408 = "arith.constant"() <{"value" = 1031 : i32}> : () -> i32
      "llvm.inline_asm"(%2408, %2304) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2409 = "arith.constant"() <{"value" = 1032 : i32}> : () -> i32
      "llvm.inline_asm"(%2409, %2304) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2410 = "arith.constant"() <{"value" = 1033 : i32}> : () -> i32
      "llvm.inline_asm"(%2410, %2334) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2411 = "arith.constant"() <{"value" = 1034 : i32}> : () -> i32
      "llvm.inline_asm"(%2411, %2290) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2412 = "arith.constant"() <{"value" = 1 : i5}> : () -> i5
      %2413 = "arith.constant"() <{"value" = 1014 : i32}> : () -> i32
      "llvm.inline_asm"(%2413, %2412) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i5) -> ()
      %2414 = "arith.constant"() <{"value" = 1035 : i32}> : () -> i32
      "llvm.inline_asm"(%2414, %2412) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i5) -> ()
      %2415 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %2416 = "arith.constant"() <{"value" = 1035 : i32}> : () -> i32
      "llvm.inline_asm"(%2416, %2415) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      "llvm.inline_asm"(%2416, %2415) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2417 = "arith.constant"() <{"value" = 1014 : i32}> : () -> i32
      "llvm.inline_asm"(%2417, %2415) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      "llvm.inline_asm"(%2417, %2415) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_cluster_hw_barrier}> : () -> ()
    "scf.if"(%6) ({
      %2418 = "memref.extract_aligned_pointer_as_index"(%2196) : (memref<1x16x16x32xi8>) -> index
      %2419 = "memref.extract_aligned_pointer_as_index"(%2001) : (memref<1x16x16x32xi8>) -> index
      %2420 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %2421 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %2422 = "memref.dim"(%2196, %2421) : (memref<1x16x16x32xi8>, index) -> index
      %2423 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %2424 = "memref.dim"(%2196, %2423) : (memref<1x16x16x32xi8>, index) -> index
      %2425 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %2426 = "memref.dim"(%2196, %2425) : (memref<1x16x16x32xi8>, index) -> index
      %2427 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %2428 = "memref.dim"(%2196, %2427) : (memref<1x16x16x32xi8>, index) -> index
      %2429 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %2430 = "arith.constant"() <{"value" = 16 : index}> : () -> index
      %2431 = "arith.constant"() <{"value" = 16 : index}> : () -> index
      %2432 = "arith.constant"() <{"value" = 4 : index}> : () -> index
      %2433 = "arith.constant"() <{"value" = 8 : index}> : () -> index
      %2434 = "arith.constant"() <{"value" = 8192 : index}> : () -> index
      %2435 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %2436 = "arith.constant"() <{"value" = 2048 : index}> : () -> index
      %2437 = "arith.constant"() <{"value" = 128 : index}> : () -> index
      %2438 = "arith.constant"() <{"value" = 8 : index}> : () -> index
      %2439 = "arith.constant"() <{"value" = 8192 : index}> : () -> index
      %2440 = "arith.constant"() <{"value" = 8192 : index}> : () -> index
      %2441 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %2442 = "arith.constant"() <{"value" = 2048 : index}> : () -> index
      %2443 = "arith.constant"() <{"value" = 128 : index}> : () -> index
      %2444 = "arith.constant"() <{"value" = 8 : index}> : () -> index
      %2445 = "arith.constant"() <{"value" = 8192 : index}> : () -> index
      %2446 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %2447 = "memref.dim"(%2196, %2446) : (memref<1x16x16x32xi8>, index) -> index
      %2448 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %2449 = "memref.dim"(%2196, %2448) : (memref<1x16x16x32xi8>, index) -> index
      %2450 = "arith.muli"(%2447, %2449) : (index, index) -> index
      %2451 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %2452 = "memref.dim"(%2196, %2451) : (memref<1x16x16x32xi8>, index) -> index
      %2453 = "arith.muli"(%2450, %2452) : (index, index) -> index
      %2454 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %2455 = "memref.dim"(%2196, %2454) : (memref<1x16x16x32xi8>, index) -> index
      %2456 = "arith.muli"(%2453, %2455) : (index, index) -> index
      %2457 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %2458 = "arith.muli"(%2456, %2457) : (index, index) -> index
      "func.call"(%2418, %2419, %2458) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    %2459 = "memref.get_global"() <{"name" = @_static_const_12}> : () -> memref<1x18x18x32xi8>
    %2460 = "memref.subview"(%2459) <{"operandSegmentSizes" = array<i32: 1, 0, 0, 0>, "static_offsets" = array<i64: 0, 1, 1, 0>, "static_sizes" = array<i64: 1, 16, 16, 32>, "static_strides" = array<i64: 1, 1, 1, 1>}> : (memref<1x18x18x32xi8>) -> memref<1x16x16x32xi8, strided<[10368, 576, 32, 1], offset: 608>>
    "scf.if"(%6) ({
      %2461 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %2462 = "memref.dim"(%2001, %2461) : (memref<1x16x16x32xi8>, index) -> index
      %2463 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %2464 = "memref.dim"(%2001, %2463) : (memref<1x16x16x32xi8>, index) -> index
      %2465 = "arith.muli"(%2462, %2464) : (index, index) -> index
      %2466 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %2467 = "memref.dim"(%2001, %2466) : (memref<1x16x16x32xi8>, index) -> index
      %2468 = "arith.muli"(%2465, %2467) : (index, index) -> index
      %2469 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %2470 = "memref.dim"(%2001, %2469) : (memref<1x16x16x32xi8>, index) -> index
      %2471 = "arith.muli"(%2468, %2470) : (index, index) -> index
      %2472 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %2473 = "arith.muli"(%2471, %2472) : (index, index) -> index
      %2474 = "memref.extract_aligned_pointer_as_index"(%2001) : (memref<1x16x16x32xi8>) -> index
      %2475 = "memref.extract_aligned_pointer_as_index"(%2460) : (memref<1x16x16x32xi8, strided<[10368, 576, 32, 1], offset: 608>>) -> index
      "func.call"(%2474, %2475, %2473) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_clear_l1}> : () -> ()
    %2476 = "memref.get_global"() <{"name" = @__constant_32x3x3x32xi8}> : () -> memref<32x3x3x32xi8>
    %2477 = "memref.get_global"() <{"name" = @__constant_32xi32_0}> : () -> memref<32xi32>
    %2478 = "memref.get_global"() <{"name" = @_static_const_13}> : () -> memref<1x16x16x32xi32>
    %2479 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %2480 = "arith.constant"() <{"value" = 4 : index}> : () -> index
    %2481 = "arith.muli"(%2479, %2480) : (index, index) -> index
    %2482 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %2483 = "func.call"(%2481, %2482) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %2484 = "llvm.load"(%2483) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %2485 = "llvm.extractvalue"(%2484) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %2486 = "llvm.extractvalue"(%2484) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %2487 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %2488 = "llvm.insertvalue"(%2487, %2485) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %2489 = "llvm.insertvalue"(%2488, %2486) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %2490 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %2491 = "llvm.insertvalue"(%2489, %2490) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %2492 = "builtin.unrealized_conversion_cast"(%2479) : (index) -> i32
    %2493 = "llvm.insertvalue"(%2491, %2492) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %2494 = "builtin.unrealized_conversion_cast"(%2493) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>) -> memref<32xi32>
    %2495 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %2496 = "arith.constant"() <{"value" = 18 : index}> : () -> index
    %2497 = "arith.constant"() <{"value" = 18 : index}> : () -> index
    %2498 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %2499 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %2500 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %2501 = "arith.constant"() <{"value" = 18 : index}> : () -> index
    %2502 = "arith.constant"() <{"value" = 18 : index}> : () -> index
    %2503 = "arith.constant"() <{"value" = 4 : index}> : () -> index
    %2504 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %2505 = "arith.constant"() <{"value" = 10368 : index}> : () -> index
    %2506 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %2507 = "arith.constant"() <{"value" = 2592 : index}> : () -> index
    %2508 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %2509 = "arith.constant"() <{"value" = 144 : index}> : () -> index
    %2510 = "arith.constant"() <{"value" = 10368 : index}> : () -> index
    %2511 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %2512 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %2513 = "arith.subi"(%2500, %2511) : (index, index) -> index
    %2514 = "arith.muli"(%2513, %2510) : (index, index) -> index
    %2515 = "arith.addi"(%2512, %2514) : (index, index) -> index
    %2516 = "arith.subi"(%2501, %2511) : (index, index) -> index
    %2517 = "arith.muli"(%2516, %2509) : (index, index) -> index
    %2518 = "arith.addi"(%2515, %2517) : (index, index) -> index
    %2519 = "arith.subi"(%2502, %2511) : (index, index) -> index
    %2520 = "arith.muli"(%2519, %2508) : (index, index) -> index
    %2521 = "arith.addi"(%2518, %2520) : (index, index) -> index
    %2522 = "arith.subi"(%2503, %2511) : (index, index) -> index
    %2523 = "arith.muli"(%2522, %2507) : (index, index) -> index
    %2524 = "arith.addi"(%2521, %2523) : (index, index) -> index
    %2525 = "arith.subi"(%2504, %2511) : (index, index) -> index
    %2526 = "arith.muli"(%2525, %2506) : (index, index) -> index
    %2527 = "arith.addi"(%2524, %2526) : (index, index) -> index
    %2528 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %2529 = "arith.addi"(%2527, %2528) : (index, index) -> index
    %2530 = "arith.muli"(%2511, %2529) : (index, index) -> index
    %2531 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %2532 = "arith.muli"(%2531, %2528) : (index, index) -> index
    %2533 = "arith.addi"(%2530, %2532) : (index, index) -> index
    %2534 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %2535 = "func.call"(%2533, %2534) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %2536 = "llvm.load"(%2535) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %2537 = "llvm.extractvalue"(%2536) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %2538 = "llvm.extractvalue"(%2536) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %2539 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2540 = "llvm.insertvalue"(%2539, %2537) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2541 = "llvm.insertvalue"(%2540, %2538) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2542 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %2543 = "llvm.insertvalue"(%2541, %2542) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2544 = "builtin.unrealized_conversion_cast"(%2495) : (index) -> i32
    %2545 = "llvm.insertvalue"(%2543, %2544) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2546 = "builtin.unrealized_conversion_cast"(%2496) : (index) -> i32
    %2547 = "llvm.insertvalue"(%2545, %2546) <{"position" = array<i64: 3, 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2548 = "builtin.unrealized_conversion_cast"(%2497) : (index) -> i32
    %2549 = "llvm.insertvalue"(%2547, %2548) <{"position" = array<i64: 3, 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2550 = "builtin.unrealized_conversion_cast"(%2498) : (index) -> i32
    %2551 = "llvm.insertvalue"(%2549, %2550) <{"position" = array<i64: 3, 3>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2552 = "builtin.unrealized_conversion_cast"(%2551) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>) -> memref<1x18x18x32xi8>
    %2553 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %2554 = "arith.constant"() <{"value" = 3 : index}> : () -> index
    %2555 = "arith.constant"() <{"value" = 3 : index}> : () -> index
    %2556 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %2557 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %2558 = "arith.constant"() <{"value" = 4 : index}> : () -> index
    %2559 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %2560 = "arith.constant"() <{"value" = 3 : index}> : () -> index
    %2561 = "arith.constant"() <{"value" = 3 : index}> : () -> index
    %2562 = "arith.constant"() <{"value" = 4 : index}> : () -> index
    %2563 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %2564 = "arith.constant"() <{"value" = 2304 : index}> : () -> index
    %2565 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %2566 = "arith.constant"() <{"value" = 576 : index}> : () -> index
    %2567 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %2568 = "arith.constant"() <{"value" = 192 : index}> : () -> index
    %2569 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %2570 = "arith.constant"() <{"value" = 2304 : index}> : () -> index
    %2571 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %2572 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %2573 = "arith.subi"(%2558, %2571) : (index, index) -> index
    %2574 = "arith.muli"(%2573, %2570) : (index, index) -> index
    %2575 = "arith.addi"(%2572, %2574) : (index, index) -> index
    %2576 = "arith.subi"(%2559, %2571) : (index, index) -> index
    %2577 = "arith.muli"(%2576, %2569) : (index, index) -> index
    %2578 = "arith.addi"(%2575, %2577) : (index, index) -> index
    %2579 = "arith.subi"(%2560, %2571) : (index, index) -> index
    %2580 = "arith.muli"(%2579, %2568) : (index, index) -> index
    %2581 = "arith.addi"(%2578, %2580) : (index, index) -> index
    %2582 = "arith.subi"(%2561, %2571) : (index, index) -> index
    %2583 = "arith.muli"(%2582, %2567) : (index, index) -> index
    %2584 = "arith.addi"(%2581, %2583) : (index, index) -> index
    %2585 = "arith.subi"(%2562, %2571) : (index, index) -> index
    %2586 = "arith.muli"(%2585, %2566) : (index, index) -> index
    %2587 = "arith.addi"(%2584, %2586) : (index, index) -> index
    %2588 = "arith.subi"(%2563, %2571) : (index, index) -> index
    %2589 = "arith.muli"(%2588, %2565) : (index, index) -> index
    %2590 = "arith.addi"(%2587, %2589) : (index, index) -> index
    %2591 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %2592 = "arith.addi"(%2590, %2591) : (index, index) -> index
    %2593 = "arith.muli"(%2571, %2592) : (index, index) -> index
    %2594 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %2595 = "arith.muli"(%2594, %2591) : (index, index) -> index
    %2596 = "arith.addi"(%2593, %2595) : (index, index) -> index
    %2597 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %2598 = "func.call"(%2596, %2597) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %2599 = "llvm.load"(%2598) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %2600 = "llvm.extractvalue"(%2599) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %2601 = "llvm.extractvalue"(%2599) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %2602 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2603 = "llvm.insertvalue"(%2602, %2600) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2604 = "llvm.insertvalue"(%2603, %2601) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2605 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %2606 = "llvm.insertvalue"(%2604, %2605) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2607 = "builtin.unrealized_conversion_cast"(%2553) : (index) -> i32
    %2608 = "llvm.insertvalue"(%2606, %2607) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2609 = "builtin.unrealized_conversion_cast"(%2554) : (index) -> i32
    %2610 = "llvm.insertvalue"(%2608, %2609) <{"position" = array<i64: 3, 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2611 = "builtin.unrealized_conversion_cast"(%2555) : (index) -> i32
    %2612 = "llvm.insertvalue"(%2610, %2611) <{"position" = array<i64: 3, 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2613 = "builtin.unrealized_conversion_cast"(%2556) : (index) -> i32
    %2614 = "llvm.insertvalue"(%2612, %2613) <{"position" = array<i64: 3, 3>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2615 = "builtin.unrealized_conversion_cast"(%2614) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>) -> memref<32x3x3x32xi8>
    %2616 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %2617 = "arith.constant"() <{"value" = 16 : index}> : () -> index
    %2618 = "arith.constant"() <{"value" = 16 : index}> : () -> index
    %2619 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %2620 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %2621 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %2622 = "arith.constant"() <{"value" = 16 : index}> : () -> index
    %2623 = "arith.constant"() <{"value" = 16 : index}> : () -> index
    %2624 = "arith.constant"() <{"value" = 4 : index}> : () -> index
    %2625 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %2626 = "arith.constant"() <{"value" = 32768 : index}> : () -> index
    %2627 = "arith.constant"() <{"value" = 4 : index}> : () -> index
    %2628 = "arith.constant"() <{"value" = 8192 : index}> : () -> index
    %2629 = "arith.constant"() <{"value" = 512 : index}> : () -> index
    %2630 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %2631 = "arith.constant"() <{"value" = 32768 : index}> : () -> index
    %2632 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %2633 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %2634 = "arith.subi"(%2621, %2632) : (index, index) -> index
    %2635 = "arith.muli"(%2634, %2631) : (index, index) -> index
    %2636 = "arith.addi"(%2633, %2635) : (index, index) -> index
    %2637 = "arith.subi"(%2622, %2632) : (index, index) -> index
    %2638 = "arith.muli"(%2637, %2630) : (index, index) -> index
    %2639 = "arith.addi"(%2636, %2638) : (index, index) -> index
    %2640 = "arith.subi"(%2623, %2632) : (index, index) -> index
    %2641 = "arith.muli"(%2640, %2629) : (index, index) -> index
    %2642 = "arith.addi"(%2639, %2641) : (index, index) -> index
    %2643 = "arith.subi"(%2624, %2632) : (index, index) -> index
    %2644 = "arith.muli"(%2643, %2628) : (index, index) -> index
    %2645 = "arith.addi"(%2642, %2644) : (index, index) -> index
    %2646 = "arith.subi"(%2625, %2632) : (index, index) -> index
    %2647 = "arith.muli"(%2646, %2627) : (index, index) -> index
    %2648 = "arith.addi"(%2645, %2647) : (index, index) -> index
    %2649 = "arith.constant"() <{"value" = 4 : index}> : () -> index
    %2650 = "arith.addi"(%2648, %2649) : (index, index) -> index
    %2651 = "arith.muli"(%2632, %2650) : (index, index) -> index
    %2652 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %2653 = "arith.muli"(%2652, %2649) : (index, index) -> index
    %2654 = "arith.addi"(%2651, %2653) : (index, index) -> index
    %2655 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %2656 = "func.call"(%2654, %2655) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %2657 = "llvm.load"(%2656) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %2658 = "llvm.extractvalue"(%2657) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %2659 = "llvm.extractvalue"(%2657) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %2660 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2661 = "llvm.insertvalue"(%2660, %2658) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2662 = "llvm.insertvalue"(%2661, %2659) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2663 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %2664 = "llvm.insertvalue"(%2662, %2663) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2665 = "builtin.unrealized_conversion_cast"(%2616) : (index) -> i32
    %2666 = "llvm.insertvalue"(%2664, %2665) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2667 = "builtin.unrealized_conversion_cast"(%2617) : (index) -> i32
    %2668 = "llvm.insertvalue"(%2666, %2667) <{"position" = array<i64: 3, 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2669 = "builtin.unrealized_conversion_cast"(%2618) : (index) -> i32
    %2670 = "llvm.insertvalue"(%2668, %2669) <{"position" = array<i64: 3, 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2671 = "builtin.unrealized_conversion_cast"(%2619) : (index) -> i32
    %2672 = "llvm.insertvalue"(%2670, %2671) <{"position" = array<i64: 3, 3>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2673 = "builtin.unrealized_conversion_cast"(%2672) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>) -> memref<1x16x16x32xi32>
    "scf.if"(%6) ({
      %2674 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %2675 = "memref.dim"(%2476, %2674) : (memref<32x3x3x32xi8>, index) -> index
      %2676 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %2677 = "memref.dim"(%2476, %2676) : (memref<32x3x3x32xi8>, index) -> index
      %2678 = "arith.muli"(%2675, %2677) : (index, index) -> index
      %2679 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %2680 = "memref.dim"(%2476, %2679) : (memref<32x3x3x32xi8>, index) -> index
      %2681 = "arith.muli"(%2678, %2680) : (index, index) -> index
      %2682 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %2683 = "memref.dim"(%2476, %2682) : (memref<32x3x3x32xi8>, index) -> index
      %2684 = "arith.muli"(%2681, %2683) : (index, index) -> index
      %2685 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %2686 = "arith.muli"(%2684, %2685) : (index, index) -> index
      %2687 = "memref.extract_aligned_pointer_as_index"(%2476) : (memref<32x3x3x32xi8>) -> index
      %2688 = "memref.extract_aligned_pointer_as_index"(%2615) : (memref<32x3x3x32xi8>) -> index
      "func.call"(%2687, %2688, %2686) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      %2689 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %2690 = "memref.dim"(%2459, %2689) : (memref<1x18x18x32xi8>, index) -> index
      %2691 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %2692 = "memref.dim"(%2459, %2691) : (memref<1x18x18x32xi8>, index) -> index
      %2693 = "arith.muli"(%2690, %2692) : (index, index) -> index
      %2694 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %2695 = "memref.dim"(%2459, %2694) : (memref<1x18x18x32xi8>, index) -> index
      %2696 = "arith.muli"(%2693, %2695) : (index, index) -> index
      %2697 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %2698 = "memref.dim"(%2459, %2697) : (memref<1x18x18x32xi8>, index) -> index
      %2699 = "arith.muli"(%2696, %2698) : (index, index) -> index
      %2700 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %2701 = "arith.muli"(%2699, %2700) : (index, index) -> index
      %2702 = "memref.extract_aligned_pointer_as_index"(%2459) : (memref<1x18x18x32xi8>) -> index
      %2703 = "memref.extract_aligned_pointer_as_index"(%2552) : (memref<1x18x18x32xi8>) -> index
      "func.call"(%2702, %2703, %2701) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      %2704 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %2705 = "memref.dim"(%2477, %2704) : (memref<32xi32>, index) -> index
      %2706 = "arith.constant"() <{"value" = 4 : index}> : () -> index
      %2707 = "arith.muli"(%2705, %2706) : (index, index) -> index
      %2708 = "memref.extract_aligned_pointer_as_index"(%2477) : (memref<32xi32>) -> index
      %2709 = "memref.extract_aligned_pointer_as_index"(%2494) : (memref<32xi32>) -> index
      "func.call"(%2708, %2709, %2707) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_cluster_hw_barrier}> : () -> ()
    "scf.if"(%4) ({
      %2710 = "memref.extract_aligned_pointer_as_index"(%2552) : (memref<1x18x18x32xi8>) -> index
      %2711 = "memref.extract_aligned_pointer_as_index"(%2615) : (memref<32x3x3x32xi8>) -> index
      %2712 = "memref.extract_aligned_pointer_as_index"(%2494) : (memref<32xi32>) -> index
      %2713 = "memref.extract_aligned_pointer_as_index"(%2494) : (memref<32xi32>) -> index
      %2714 = "memref.extract_aligned_pointer_as_index"(%2673) : (memref<1x16x16x32xi32>) -> index
      %2715 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %2716 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %2717 = "arith.constant"() <{"value" = 3 : i32}> : () -> i32
      %2718 = "arith.constant"() <{"value" = 3 : i32}> : () -> i32
      %2719 = "arith.constant"() <{"value" = 4 : i32}> : () -> i32
      %2720 = "arith.constant"() <{"value" = 4 : i32}> : () -> i32
      %2721 = "arith.constant"() <{"value" = 2 : i32}> : () -> i32
      %2722 = "arith.constant"() <{"value" = 16 : i32}> : () -> i32
      %2723 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %2724 = "arith.constant"() <{"value" = 144 : i32}> : () -> i32
      %2725 = "arith.constant"() <{"value" = 2592 : i32}> : () -> i32
      %2726 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %2727 = "arith.constant"() <{"value" = 1152 : i32}> : () -> i32
      %2728 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %2729 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %2730 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %2731 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %2732 = "arith.constant"() <{"value" = 144 : i32}> : () -> i32
      %2733 = "arith.constant"() <{"value" = 32 : i32}> : () -> i32
      %2734 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %2735 = "arith.constant"() <{"value" = 64 : i32}> : () -> i32
      %2736 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %2737 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %2738 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %2739 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %2740 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %2741 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %2742 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %2743 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %2744 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %2745 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %2746 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %2747 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %2748 = "arith.constant"() <{"value" = 4 : i32}> : () -> i32
      %2749 = "arith.constant"() <{"value" = 32 : i32}> : () -> i32
      %2750 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %2751 = "arith.constant"() <{"value" = 32 : i32}> : () -> i32
      %2752 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %2753 = "arith.constant"() <{"value" = -1 : i32}> : () -> i32
      %2754 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %2755 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %2756 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %2757 = "arith.constant"() <{"value" = 4 : i32}> : () -> i32
      %2758 = "arith.constant"() <{"value" = 32 : i32}> : () -> i32
      %2759 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %2760 = "arith.constant"() <{"value" = 8192 : i32}> : () -> i32
      %2761 = "arith.constant"() <{"value" = 256 : i32}> : () -> i32
      %2762 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %2763 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %2764 = "arith.constant"() <{"value" = 36 : i32}> : () -> i32
      %2765 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %2766 = "arith.constant"() <{"value" = 128 : i32}> : () -> i32
      %2767 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %2768 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %2769 = "arith.constant"() <{"value" = 255 : i32}> : () -> i32
      %2770 = "arith.andi"(%10, %2769) : (i32, i32) -> i32
      %2771 = "arith.andi"(%11, %2769) : (i32, i32) -> i32
      %2772 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %2773 = "arith.shli"(%2770, %2772) : (i32, i32) -> i32
      %2774 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %2775 = "arith.shli"(%2771, %2774) : (i32, i32) -> i32
      %2776 = "arith.ori"(%2773, %2775) : (i32, i32) -> i32
      %2777 = "arith.index_cast"(%2710) : (index) -> i32
      %2778 = "arith.constant"() <{"value" = 960 : i32}> : () -> i32
      "llvm.inline_asm"(%2778, %2777) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2779 = "arith.constant"() <{"value" = 961 : i32}> : () -> i32
      "llvm.inline_asm"(%2779, %2715) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2780 = "arith.constant"() <{"value" = 962 : i32}> : () -> i32
      "llvm.inline_asm"(%2780, %2716) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2781 = "arith.constant"() <{"value" = 963 : i32}> : () -> i32
      "llvm.inline_asm"(%2781, %2717) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2782 = "arith.constant"() <{"value" = 964 : i32}> : () -> i32
      "llvm.inline_asm"(%2782, %2718) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2783 = "arith.constant"() <{"value" = 965 : i32}> : () -> i32
      "llvm.inline_asm"(%2783, %2719) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2784 = "arith.constant"() <{"value" = 966 : i32}> : () -> i32
      "llvm.inline_asm"(%2784, %2720) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2785 = "arith.constant"() <{"value" = 967 : i32}> : () -> i32
      "llvm.inline_asm"(%2785, %2721) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2786 = "arith.constant"() <{"value" = 968 : i32}> : () -> i32
      "llvm.inline_asm"(%2786, %2722) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2787 = "arith.constant"() <{"value" = 969 : i32}> : () -> i32
      "llvm.inline_asm"(%2787, %2723) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2788 = "arith.constant"() <{"value" = 970 : i32}> : () -> i32
      "llvm.inline_asm"(%2788, %2724) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2789 = "arith.constant"() <{"value" = 971 : i32}> : () -> i32
      "llvm.inline_asm"(%2789, %2725) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2790 = "arith.constant"() <{"value" = 972 : i32}> : () -> i32
      "llvm.inline_asm"(%2790, %2726) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2791 = "arith.constant"() <{"value" = 973 : i32}> : () -> i32
      "llvm.inline_asm"(%2791, %2727) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2792 = "arith.constant"() <{"value" = 974 : i32}> : () -> i32
      "llvm.inline_asm"(%2792, %2728) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2793 = "arith.index_cast"(%2711) : (index) -> i32
      %2794 = "arith.constant"() <{"value" = 975 : i32}> : () -> i32
      "llvm.inline_asm"(%2794, %2793) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2795 = "arith.constant"() <{"value" = 976 : i32}> : () -> i32
      "llvm.inline_asm"(%2795, %2729) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2796 = "arith.constant"() <{"value" = 977 : i32}> : () -> i32
      "llvm.inline_asm"(%2796, %2730) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2797 = "arith.constant"() <{"value" = 978 : i32}> : () -> i32
      "llvm.inline_asm"(%2797, %2731) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2798 = "arith.constant"() <{"value" = 979 : i32}> : () -> i32
      "llvm.inline_asm"(%2798, %2732) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2799 = "arith.constant"() <{"value" = 980 : i32}> : () -> i32
      "llvm.inline_asm"(%2799, %2733) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2800 = "arith.constant"() <{"value" = 981 : i32}> : () -> i32
      "llvm.inline_asm"(%2800, %2734) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2801 = "arith.constant"() <{"value" = 982 : i32}> : () -> i32
      "llvm.inline_asm"(%2801, %2735) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2802 = "arith.constant"() <{"value" = 983 : i32}> : () -> i32
      "llvm.inline_asm"(%2802, %2736) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2803 = "arith.index_cast"(%2712) : (index) -> i32
      %2804 = "arith.constant"() <{"value" = 984 : i32}> : () -> i32
      "llvm.inline_asm"(%2804, %2803) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2805 = "arith.constant"() <{"value" = 985 : i32}> : () -> i32
      "llvm.inline_asm"(%2805, %2737) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2806 = "arith.constant"() <{"value" = 986 : i32}> : () -> i32
      "llvm.inline_asm"(%2806, %2738) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2807 = "arith.constant"() <{"value" = 987 : i32}> : () -> i32
      "llvm.inline_asm"(%2807, %2739) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2808 = "arith.constant"() <{"value" = 988 : i32}> : () -> i32
      "llvm.inline_asm"(%2808, %2740) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2809 = "arith.constant"() <{"value" = 989 : i32}> : () -> i32
      "llvm.inline_asm"(%2809, %2741) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2810 = "arith.constant"() <{"value" = 990 : i32}> : () -> i32
      "llvm.inline_asm"(%2810, %2742) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2811 = "arith.constant"() <{"value" = 991 : i32}> : () -> i32
      "llvm.inline_asm"(%2811, %2743) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2812 = "arith.constant"() <{"value" = 992 : i32}> : () -> i32
      "llvm.inline_asm"(%2812, %2744) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2813 = "arith.index_cast"(%2713) : (index) -> i32
      %2814 = "arith.constant"() <{"value" = 993 : i32}> : () -> i32
      "llvm.inline_asm"(%2814, %2813) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2815 = "arith.constant"() <{"value" = 994 : i32}> : () -> i32
      "llvm.inline_asm"(%2815, %2745) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2816 = "arith.constant"() <{"value" = 995 : i32}> : () -> i32
      "llvm.inline_asm"(%2816, %2746) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2817 = "arith.constant"() <{"value" = 996 : i32}> : () -> i32
      "llvm.inline_asm"(%2817, %2747) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2818 = "arith.constant"() <{"value" = 997 : i32}> : () -> i32
      "llvm.inline_asm"(%2818, %2748) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2819 = "arith.constant"() <{"value" = 998 : i32}> : () -> i32
      "llvm.inline_asm"(%2819, %2749) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2820 = "arith.constant"() <{"value" = 999 : i32}> : () -> i32
      "llvm.inline_asm"(%2820, %2750) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2821 = "arith.constant"() <{"value" = 1000 : i32}> : () -> i32
      "llvm.inline_asm"(%2821, %2751) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2822 = "arith.constant"() <{"value" = 1001 : i32}> : () -> i32
      "llvm.inline_asm"(%2822, %2752) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2823 = "arith.constant"() <{"value" = 1002 : i32}> : () -> i32
      "llvm.inline_asm"(%2823, %2753) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2824 = "arith.index_cast"(%2714) : (index) -> i32
      %2825 = "arith.constant"() <{"value" = 1003 : i32}> : () -> i32
      "llvm.inline_asm"(%2825, %2824) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2826 = "arith.constant"() <{"value" = 1004 : i32}> : () -> i32
      "llvm.inline_asm"(%2826, %2754) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2827 = "arith.constant"() <{"value" = 1005 : i32}> : () -> i32
      "llvm.inline_asm"(%2827, %2755) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2828 = "arith.constant"() <{"value" = 1006 : i32}> : () -> i32
      "llvm.inline_asm"(%2828, %2756) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2829 = "arith.constant"() <{"value" = 1007 : i32}> : () -> i32
      "llvm.inline_asm"(%2829, %2757) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2830 = "arith.constant"() <{"value" = 1008 : i32}> : () -> i32
      "llvm.inline_asm"(%2830, %2758) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2831 = "arith.constant"() <{"value" = 1009 : i32}> : () -> i32
      "llvm.inline_asm"(%2831, %2759) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2832 = "arith.constant"() <{"value" = 1010 : i32}> : () -> i32
      "llvm.inline_asm"(%2832, %2760) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2833 = "arith.constant"() <{"value" = 1011 : i32}> : () -> i32
      "llvm.inline_asm"(%2833, %2761) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2834 = "arith.constant"() <{"value" = 1012 : i32}> : () -> i32
      "llvm.inline_asm"(%2834, %2762) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2835 = "arith.constant"() <{"value" = 1013 : i32}> : () -> i32
      "llvm.inline_asm"(%2835, %2763) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2836 = "arith.constant"() <{"value" = 1017 : i32}> : () -> i32
      "llvm.inline_asm"(%2836, %2764) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2837 = "arith.constant"() <{"value" = 1018 : i32}> : () -> i32
      "llvm.inline_asm"(%2837, %2765) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2838 = "arith.constant"() <{"value" = 1019 : i32}> : () -> i32
      "llvm.inline_asm"(%2838, %2766) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2839 = "arith.constant"() <{"value" = 1020 : i32}> : () -> i32
      "llvm.inline_asm"(%2839, %2776) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2840 = "arith.constant"() <{"value" = 1021 : i32}> : () -> i32
      "llvm.inline_asm"(%2840, %2767) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2841 = "arith.constant"() <{"value" = 1022 : i32}> : () -> i32
      "llvm.inline_asm"(%2841, %2767) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2842 = "arith.constant"() <{"value" = 1023 : i32}> : () -> i32
      "llvm.inline_asm"(%2842, %2767) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2843 = "arith.constant"() <{"value" = 1024 : i32}> : () -> i32
      "llvm.inline_asm"(%2843, %2767) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2844 = "arith.constant"() <{"value" = 1025 : i32}> : () -> i32
      "llvm.inline_asm"(%2844, %2767) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2845 = "arith.constant"() <{"value" = 1026 : i32}> : () -> i32
      "llvm.inline_asm"(%2845, %2767) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2846 = "arith.constant"() <{"value" = 1027 : i32}> : () -> i32
      "llvm.inline_asm"(%2846, %2767) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2847 = "arith.constant"() <{"value" = 1028 : i32}> : () -> i32
      "llvm.inline_asm"(%2847, %2767) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2848 = "arith.constant"() <{"value" = 1029 : i32}> : () -> i32
      "llvm.inline_asm"(%2848, %2767) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2849 = "arith.constant"() <{"value" = 1030 : i32}> : () -> i32
      "llvm.inline_asm"(%2849, %2767) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2850 = "arith.constant"() <{"value" = 1031 : i32}> : () -> i32
      "llvm.inline_asm"(%2850, %2767) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2851 = "arith.constant"() <{"value" = 1032 : i32}> : () -> i32
      "llvm.inline_asm"(%2851, %2767) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2852 = "arith.constant"() <{"value" = 1033 : i32}> : () -> i32
      "llvm.inline_asm"(%2852, %2767) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2853 = "arith.constant"() <{"value" = 1034 : i32}> : () -> i32
      "llvm.inline_asm"(%2853, %2768) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2854 = "arith.constant"() <{"value" = 1 : i5}> : () -> i5
      %2855 = "arith.constant"() <{"value" = 1014 : i32}> : () -> i32
      "llvm.inline_asm"(%2855, %2854) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i5) -> ()
      %2856 = "arith.constant"() <{"value" = 1035 : i32}> : () -> i32
      "llvm.inline_asm"(%2856, %2854) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i5) -> ()
      %2857 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %2858 = "arith.constant"() <{"value" = 1035 : i32}> : () -> i32
      "llvm.inline_asm"(%2858, %2857) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      "llvm.inline_asm"(%2858, %2857) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %2859 = "arith.constant"() <{"value" = 1014 : i32}> : () -> i32
      "llvm.inline_asm"(%2859, %2857) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      "llvm.inline_asm"(%2859, %2857) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_cluster_hw_barrier}> : () -> ()
    "scf.if"(%6) ({
      %2860 = "memref.extract_aligned_pointer_as_index"(%2673) : (memref<1x16x16x32xi32>) -> index
      %2861 = "memref.extract_aligned_pointer_as_index"(%2478) : (memref<1x16x16x32xi32>) -> index
      %2862 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %2863 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %2864 = "memref.dim"(%2673, %2863) : (memref<1x16x16x32xi32>, index) -> index
      %2865 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %2866 = "memref.dim"(%2673, %2865) : (memref<1x16x16x32xi32>, index) -> index
      %2867 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %2868 = "memref.dim"(%2673, %2867) : (memref<1x16x16x32xi32>, index) -> index
      %2869 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %2870 = "memref.dim"(%2673, %2869) : (memref<1x16x16x32xi32>, index) -> index
      %2871 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %2872 = "arith.constant"() <{"value" = 16 : index}> : () -> index
      %2873 = "arith.constant"() <{"value" = 16 : index}> : () -> index
      %2874 = "arith.constant"() <{"value" = 4 : index}> : () -> index
      %2875 = "arith.constant"() <{"value" = 8 : index}> : () -> index
      %2876 = "arith.constant"() <{"value" = 32768 : index}> : () -> index
      %2877 = "arith.constant"() <{"value" = 4 : index}> : () -> index
      %2878 = "arith.constant"() <{"value" = 8192 : index}> : () -> index
      %2879 = "arith.constant"() <{"value" = 512 : index}> : () -> index
      %2880 = "arith.constant"() <{"value" = 32 : index}> : () -> index
      %2881 = "arith.constant"() <{"value" = 32768 : index}> : () -> index
      %2882 = "arith.constant"() <{"value" = 32768 : index}> : () -> index
      %2883 = "arith.constant"() <{"value" = 4 : index}> : () -> index
      %2884 = "arith.constant"() <{"value" = 8192 : index}> : () -> index
      %2885 = "arith.constant"() <{"value" = 512 : index}> : () -> index
      %2886 = "arith.constant"() <{"value" = 32 : index}> : () -> index
      %2887 = "arith.constant"() <{"value" = 32768 : index}> : () -> index
      %2888 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %2889 = "memref.dim"(%2673, %2888) : (memref<1x16x16x32xi32>, index) -> index
      %2890 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %2891 = "memref.dim"(%2673, %2890) : (memref<1x16x16x32xi32>, index) -> index
      %2892 = "arith.muli"(%2889, %2891) : (index, index) -> index
      %2893 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %2894 = "memref.dim"(%2673, %2893) : (memref<1x16x16x32xi32>, index) -> index
      %2895 = "arith.muli"(%2892, %2894) : (index, index) -> index
      %2896 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %2897 = "memref.dim"(%2673, %2896) : (memref<1x16x16x32xi32>, index) -> index
      %2898 = "arith.muli"(%2895, %2897) : (index, index) -> index
      %2899 = "arith.constant"() <{"value" = 4 : index}> : () -> index
      %2900 = "arith.muli"(%2898, %2899) : (index, index) -> index
      "func.call"(%2860, %2861, %2900) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_clear_l1}> : () -> ()
    %2901 = "memref.get_global"() <{"name" = @__constant_32x1x1x16xi8}> : () -> memref<32x1x1x16xi8>
    %2902 = "memref.get_global"() <{"name" = @__constant_32xi32_1}> : () -> memref<32xi32>
    %2903 = "memref.get_global"() <{"name" = @_static_const_14}> : () -> memref<1x16x16x32xi32>
    %2904 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %2905 = "arith.constant"() <{"value" = 4 : index}> : () -> index
    %2906 = "arith.muli"(%2904, %2905) : (index, index) -> index
    %2907 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %2908 = "func.call"(%2906, %2907) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %2909 = "llvm.load"(%2908) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %2910 = "llvm.extractvalue"(%2909) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %2911 = "llvm.extractvalue"(%2909) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %2912 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %2913 = "llvm.insertvalue"(%2912, %2910) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %2914 = "llvm.insertvalue"(%2913, %2911) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %2915 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %2916 = "llvm.insertvalue"(%2914, %2915) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %2917 = "builtin.unrealized_conversion_cast"(%2904) : (index) -> i32
    %2918 = "llvm.insertvalue"(%2916, %2917) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %2919 = "builtin.unrealized_conversion_cast"(%2918) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>) -> memref<32xi32>
    %2920 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %2921 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %2922 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %2923 = "arith.constant"() <{"value" = 16 : index}> : () -> index
    %2924 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %2925 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %2926 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %2927 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %2928 = "arith.constant"() <{"value" = 2 : index}> : () -> index
    %2929 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %2930 = "arith.constant"() <{"value" = 16384 : index}> : () -> index
    %2931 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %2932 = "arith.constant"() <{"value" = 8192 : index}> : () -> index
    %2933 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %2934 = "arith.constant"() <{"value" = 256 : index}> : () -> index
    %2935 = "arith.constant"() <{"value" = 16384 : index}> : () -> index
    %2936 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %2937 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %2938 = "arith.subi"(%2925, %2936) : (index, index) -> index
    %2939 = "arith.muli"(%2938, %2935) : (index, index) -> index
    %2940 = "arith.addi"(%2937, %2939) : (index, index) -> index
    %2941 = "arith.subi"(%2926, %2936) : (index, index) -> index
    %2942 = "arith.muli"(%2941, %2934) : (index, index) -> index
    %2943 = "arith.addi"(%2940, %2942) : (index, index) -> index
    %2944 = "arith.subi"(%2927, %2936) : (index, index) -> index
    %2945 = "arith.muli"(%2944, %2933) : (index, index) -> index
    %2946 = "arith.addi"(%2943, %2945) : (index, index) -> index
    %2947 = "arith.subi"(%2928, %2936) : (index, index) -> index
    %2948 = "arith.muli"(%2947, %2932) : (index, index) -> index
    %2949 = "arith.addi"(%2946, %2948) : (index, index) -> index
    %2950 = "arith.subi"(%2929, %2936) : (index, index) -> index
    %2951 = "arith.muli"(%2950, %2931) : (index, index) -> index
    %2952 = "arith.addi"(%2949, %2951) : (index, index) -> index
    %2953 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %2954 = "arith.addi"(%2952, %2953) : (index, index) -> index
    %2955 = "arith.muli"(%2936, %2954) : (index, index) -> index
    %2956 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %2957 = "arith.muli"(%2956, %2953) : (index, index) -> index
    %2958 = "arith.addi"(%2955, %2957) : (index, index) -> index
    %2959 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %2960 = "func.call"(%2958, %2959) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %2961 = "llvm.load"(%2960) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %2962 = "llvm.extractvalue"(%2961) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %2963 = "llvm.extractvalue"(%2961) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %2964 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2965 = "llvm.insertvalue"(%2964, %2962) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2966 = "llvm.insertvalue"(%2965, %2963) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2967 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %2968 = "llvm.insertvalue"(%2966, %2967) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2969 = "builtin.unrealized_conversion_cast"(%2920) : (index) -> i32
    %2970 = "llvm.insertvalue"(%2968, %2969) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2971 = "builtin.unrealized_conversion_cast"(%2921) : (index) -> i32
    %2972 = "llvm.insertvalue"(%2970, %2971) <{"position" = array<i64: 3, 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2973 = "builtin.unrealized_conversion_cast"(%2922) : (index) -> i32
    %2974 = "llvm.insertvalue"(%2972, %2973) <{"position" = array<i64: 3, 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2975 = "builtin.unrealized_conversion_cast"(%2923) : (index) -> i32
    %2976 = "llvm.insertvalue"(%2974, %2975) <{"position" = array<i64: 3, 3>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %2977 = "builtin.unrealized_conversion_cast"(%2976) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>) -> memref<1x32x32x16xi8>
    %2978 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %2979 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %2980 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %2981 = "arith.constant"() <{"value" = 16 : index}> : () -> index
    %2982 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %2983 = "arith.constant"() <{"value" = 4 : index}> : () -> index
    %2984 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %2985 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %2986 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %2987 = "arith.constant"() <{"value" = 2 : index}> : () -> index
    %2988 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %2989 = "arith.constant"() <{"value" = 128 : index}> : () -> index
    %2990 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %2991 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %2992 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %2993 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %2994 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %2995 = "arith.constant"() <{"value" = 128 : index}> : () -> index
    %2996 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %2997 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %2998 = "arith.subi"(%2983, %2996) : (index, index) -> index
    %2999 = "arith.muli"(%2998, %2995) : (index, index) -> index
    %3000 = "arith.addi"(%2997, %2999) : (index, index) -> index
    %3001 = "arith.subi"(%2984, %2996) : (index, index) -> index
    %3002 = "arith.muli"(%3001, %2994) : (index, index) -> index
    %3003 = "arith.addi"(%3000, %3002) : (index, index) -> index
    %3004 = "arith.subi"(%2985, %2996) : (index, index) -> index
    %3005 = "arith.muli"(%3004, %2993) : (index, index) -> index
    %3006 = "arith.addi"(%3003, %3005) : (index, index) -> index
    %3007 = "arith.subi"(%2986, %2996) : (index, index) -> index
    %3008 = "arith.muli"(%3007, %2992) : (index, index) -> index
    %3009 = "arith.addi"(%3006, %3008) : (index, index) -> index
    %3010 = "arith.subi"(%2987, %2996) : (index, index) -> index
    %3011 = "arith.muli"(%3010, %2991) : (index, index) -> index
    %3012 = "arith.addi"(%3009, %3011) : (index, index) -> index
    %3013 = "arith.subi"(%2988, %2996) : (index, index) -> index
    %3014 = "arith.muli"(%3013, %2990) : (index, index) -> index
    %3015 = "arith.addi"(%3012, %3014) : (index, index) -> index
    %3016 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %3017 = "arith.addi"(%3015, %3016) : (index, index) -> index
    %3018 = "arith.muli"(%2996, %3017) : (index, index) -> index
    %3019 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %3020 = "arith.muli"(%3019, %3016) : (index, index) -> index
    %3021 = "arith.addi"(%3018, %3020) : (index, index) -> index
    %3022 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %3023 = "func.call"(%3021, %3022) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %3024 = "llvm.load"(%3023) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %3025 = "llvm.extractvalue"(%3024) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %3026 = "llvm.extractvalue"(%3024) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %3027 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3028 = "llvm.insertvalue"(%3027, %3025) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3029 = "llvm.insertvalue"(%3028, %3026) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3030 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %3031 = "llvm.insertvalue"(%3029, %3030) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3032 = "builtin.unrealized_conversion_cast"(%2978) : (index) -> i32
    %3033 = "llvm.insertvalue"(%3031, %3032) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3034 = "builtin.unrealized_conversion_cast"(%2979) : (index) -> i32
    %3035 = "llvm.insertvalue"(%3033, %3034) <{"position" = array<i64: 3, 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3036 = "builtin.unrealized_conversion_cast"(%2980) : (index) -> i32
    %3037 = "llvm.insertvalue"(%3035, %3036) <{"position" = array<i64: 3, 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3038 = "builtin.unrealized_conversion_cast"(%2981) : (index) -> i32
    %3039 = "llvm.insertvalue"(%3037, %3038) <{"position" = array<i64: 3, 3>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3040 = "builtin.unrealized_conversion_cast"(%3039) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>) -> memref<32x1x1x16xi8>
    %3041 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %3042 = "arith.constant"() <{"value" = 16 : index}> : () -> index
    %3043 = "arith.constant"() <{"value" = 16 : index}> : () -> index
    %3044 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %3045 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %3046 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %3047 = "arith.constant"() <{"value" = 16 : index}> : () -> index
    %3048 = "arith.constant"() <{"value" = 16 : index}> : () -> index
    %3049 = "arith.constant"() <{"value" = 4 : index}> : () -> index
    %3050 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %3051 = "arith.constant"() <{"value" = 32768 : index}> : () -> index
    %3052 = "arith.constant"() <{"value" = 4 : index}> : () -> index
    %3053 = "arith.constant"() <{"value" = 8192 : index}> : () -> index
    %3054 = "arith.constant"() <{"value" = 512 : index}> : () -> index
    %3055 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %3056 = "arith.constant"() <{"value" = 32768 : index}> : () -> index
    %3057 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %3058 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %3059 = "arith.subi"(%3046, %3057) : (index, index) -> index
    %3060 = "arith.muli"(%3059, %3056) : (index, index) -> index
    %3061 = "arith.addi"(%3058, %3060) : (index, index) -> index
    %3062 = "arith.subi"(%3047, %3057) : (index, index) -> index
    %3063 = "arith.muli"(%3062, %3055) : (index, index) -> index
    %3064 = "arith.addi"(%3061, %3063) : (index, index) -> index
    %3065 = "arith.subi"(%3048, %3057) : (index, index) -> index
    %3066 = "arith.muli"(%3065, %3054) : (index, index) -> index
    %3067 = "arith.addi"(%3064, %3066) : (index, index) -> index
    %3068 = "arith.subi"(%3049, %3057) : (index, index) -> index
    %3069 = "arith.muli"(%3068, %3053) : (index, index) -> index
    %3070 = "arith.addi"(%3067, %3069) : (index, index) -> index
    %3071 = "arith.subi"(%3050, %3057) : (index, index) -> index
    %3072 = "arith.muli"(%3071, %3052) : (index, index) -> index
    %3073 = "arith.addi"(%3070, %3072) : (index, index) -> index
    %3074 = "arith.constant"() <{"value" = 4 : index}> : () -> index
    %3075 = "arith.addi"(%3073, %3074) : (index, index) -> index
    %3076 = "arith.muli"(%3057, %3075) : (index, index) -> index
    %3077 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %3078 = "arith.muli"(%3077, %3074) : (index, index) -> index
    %3079 = "arith.addi"(%3076, %3078) : (index, index) -> index
    %3080 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %3081 = "func.call"(%3079, %3080) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %3082 = "llvm.load"(%3081) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %3083 = "llvm.extractvalue"(%3082) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %3084 = "llvm.extractvalue"(%3082) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %3085 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3086 = "llvm.insertvalue"(%3085, %3083) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3087 = "llvm.insertvalue"(%3086, %3084) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3088 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %3089 = "llvm.insertvalue"(%3087, %3088) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3090 = "builtin.unrealized_conversion_cast"(%3041) : (index) -> i32
    %3091 = "llvm.insertvalue"(%3089, %3090) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3092 = "builtin.unrealized_conversion_cast"(%3042) : (index) -> i32
    %3093 = "llvm.insertvalue"(%3091, %3092) <{"position" = array<i64: 3, 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3094 = "builtin.unrealized_conversion_cast"(%3043) : (index) -> i32
    %3095 = "llvm.insertvalue"(%3093, %3094) <{"position" = array<i64: 3, 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3096 = "builtin.unrealized_conversion_cast"(%3044) : (index) -> i32
    %3097 = "llvm.insertvalue"(%3095, %3096) <{"position" = array<i64: 3, 3>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3098 = "builtin.unrealized_conversion_cast"(%3097) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>) -> memref<1x16x16x32xi32>
    "scf.if"(%6) ({
      %3099 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %3100 = "memref.dim"(%2901, %3099) : (memref<32x1x1x16xi8>, index) -> index
      %3101 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %3102 = "memref.dim"(%2901, %3101) : (memref<32x1x1x16xi8>, index) -> index
      %3103 = "arith.muli"(%3100, %3102) : (index, index) -> index
      %3104 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %3105 = "memref.dim"(%2901, %3104) : (memref<32x1x1x16xi8>, index) -> index
      %3106 = "arith.muli"(%3103, %3105) : (index, index) -> index
      %3107 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %3108 = "memref.dim"(%2901, %3107) : (memref<32x1x1x16xi8>, index) -> index
      %3109 = "arith.muli"(%3106, %3108) : (index, index) -> index
      %3110 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %3111 = "arith.muli"(%3109, %3110) : (index, index) -> index
      %3112 = "memref.extract_aligned_pointer_as_index"(%2901) : (memref<32x1x1x16xi8>) -> index
      %3113 = "memref.extract_aligned_pointer_as_index"(%3040) : (memref<32x1x1x16xi8>) -> index
      "func.call"(%3112, %3113, %3111) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      %3114 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %3115 = "memref.dim"(%1675, %3114) : (memref<1x32x32x16xi8>, index) -> index
      %3116 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %3117 = "memref.dim"(%1675, %3116) : (memref<1x32x32x16xi8>, index) -> index
      %3118 = "arith.muli"(%3115, %3117) : (index, index) -> index
      %3119 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %3120 = "memref.dim"(%1675, %3119) : (memref<1x32x32x16xi8>, index) -> index
      %3121 = "arith.muli"(%3118, %3120) : (index, index) -> index
      %3122 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %3123 = "memref.dim"(%1675, %3122) : (memref<1x32x32x16xi8>, index) -> index
      %3124 = "arith.muli"(%3121, %3123) : (index, index) -> index
      %3125 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %3126 = "arith.muli"(%3124, %3125) : (index, index) -> index
      %3127 = "memref.extract_aligned_pointer_as_index"(%1675) : (memref<1x32x32x16xi8>) -> index
      %3128 = "memref.extract_aligned_pointer_as_index"(%2977) : (memref<1x32x32x16xi8>) -> index
      "func.call"(%3127, %3128, %3126) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      %3129 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %3130 = "memref.dim"(%2902, %3129) : (memref<32xi32>, index) -> index
      %3131 = "arith.constant"() <{"value" = 4 : index}> : () -> index
      %3132 = "arith.muli"(%3130, %3131) : (index, index) -> index
      %3133 = "memref.extract_aligned_pointer_as_index"(%2902) : (memref<32xi32>) -> index
      %3134 = "memref.extract_aligned_pointer_as_index"(%2919) : (memref<32xi32>) -> index
      "func.call"(%3133, %3134, %3132) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_cluster_hw_barrier}> : () -> ()
    "scf.if"(%4) ({
      %3135 = "memref.extract_aligned_pointer_as_index"(%2977) : (memref<1x32x32x16xi8>) -> index
      %3136 = "memref.extract_aligned_pointer_as_index"(%3040) : (memref<32x1x1x16xi8>) -> index
      %3137 = "memref.extract_aligned_pointer_as_index"(%3098) : (memref<1x16x16x32xi32>) -> index
      %3138 = "memref.extract_aligned_pointer_as_index"(%2919) : (memref<32xi32>) -> index
      %3139 = "memref.extract_aligned_pointer_as_index"(%2919) : (memref<32xi32>) -> index
      %3140 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3141 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %3142 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %3143 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %3144 = "arith.constant"() <{"value" = 2 : i32}> : () -> i32
      %3145 = "arith.constant"() <{"value" = 4 : i32}> : () -> i32
      %3146 = "arith.constant"() <{"value" = 2 : i32}> : () -> i32
      %3147 = "arith.constant"() <{"value" = 16 : i32}> : () -> i32
      %3148 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3149 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3150 = "arith.constant"() <{"value" = 8192 : i32}> : () -> i32
      %3151 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3152 = "arith.constant"() <{"value" = 4096 : i32}> : () -> i32
      %3153 = "arith.constant"() <{"value" = 16 : i32}> : () -> i32
      %3154 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3155 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %3156 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %3157 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %3158 = "arith.constant"() <{"value" = 32 : i32}> : () -> i32
      %3159 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3160 = "arith.constant"() <{"value" = 64 : i32}> : () -> i32
      %3161 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3162 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3163 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %3164 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %3165 = "arith.constant"() <{"value" = 4 : i32}> : () -> i32
      %3166 = "arith.constant"() <{"value" = 32 : i32}> : () -> i32
      %3167 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3168 = "arith.constant"() <{"value" = 8192 : i32}> : () -> i32
      %3169 = "arith.constant"() <{"value" = 256 : i32}> : () -> i32
      %3170 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3171 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %3172 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %3173 = "arith.constant"() <{"value" = 4 : i32}> : () -> i32
      %3174 = "arith.constant"() <{"value" = 32 : i32}> : () -> i32
      %3175 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3176 = "arith.constant"() <{"value" = 32 : i32}> : () -> i32
      %3177 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3178 = "arith.constant"() <{"value" = -1 : i32}> : () -> i32
      %3179 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3180 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3181 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3182 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3183 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3184 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3185 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3186 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3187 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %3188 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %3189 = "arith.constant"() <{"value" = 2 : i32}> : () -> i32
      %3190 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %3191 = "arith.constant"() <{"value" = 128 : i32}> : () -> i32
      %3192 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3193 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %3194 = "arith.constant"() <{"value" = 255 : i32}> : () -> i32
      %3195 = "arith.andi"(%10, %3194) : (i32, i32) -> i32
      %3196 = "arith.andi"(%11, %3194) : (i32, i32) -> i32
      %3197 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3198 = "arith.shli"(%3195, %3197) : (i32, i32) -> i32
      %3199 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %3200 = "arith.shli"(%3196, %3199) : (i32, i32) -> i32
      %3201 = "arith.ori"(%3198, %3200) : (i32, i32) -> i32
      %3202 = "arith.constant"() <{"value" = 127 : i32}> : () -> i32
      %3203 = "arith.constant"() <{"value" = -128 : i32}> : () -> i32
      %3204 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %3205 = "arith.constant"() <{"value" = 33 : i32}> : () -> i32
      %3206 = "arith.constant"() <{"value" = 1699529983 : i32}> : () -> i32
      %3207 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3208 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3209 = "arith.constant"() <{"value" = 255 : i32}> : () -> i32
      %3210 = "arith.andi"(%3202, %3209) : (i32, i32) -> i32
      %3211 = "arith.andi"(%3203, %3209) : (i32, i32) -> i32
      %3212 = "arith.andi"(%3207, %3209) : (i32, i32) -> i32
      %3213 = "arith.andi"(%3208, %3209) : (i32, i32) -> i32
      %3214 = "arith.constant"() <{"value" = 24 : i32}> : () -> i32
      %3215 = "arith.shli"(%3211, %3214) : (i32, i32) -> i32
      %3216 = "arith.constant"() <{"value" = 16 : i32}> : () -> i32
      %3217 = "arith.shli"(%3210, %3216) : (i32, i32) -> i32
      %3218 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %3219 = "arith.shli"(%3213, %3218) : (i32, i32) -> i32
      %3220 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3221 = "arith.shli"(%3212, %3220) : (i32, i32) -> i32
      %3222 = "arith.ori"(%3215, %3217) : (i32, i32) -> i32
      %3223 = "arith.ori"(%3219, %3221) : (i32, i32) -> i32
      %3224 = "arith.ori"(%3222, %3223) : (i32, i32) -> i32
      %3225 = "arith.constant"() <{"value" = 24 : i32}> : () -> i32
      %3226 = "arith.shli"(%3205, %3225) : (i32, i32) -> i32
      %3227 = "arith.constant"() <{"value" = 16 : i32}> : () -> i32
      %3228 = "arith.shli"(%3205, %3227) : (i32, i32) -> i32
      %3229 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %3230 = "arith.shli"(%3205, %3229) : (i32, i32) -> i32
      %3231 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3232 = "arith.shli"(%3205, %3231) : (i32, i32) -> i32
      %3233 = "arith.ori"(%3226, %3228) : (i32, i32) -> i32
      %3234 = "arith.ori"(%3230, %3232) : (i32, i32) -> i32
      %3235 = "arith.ori"(%3233, %3234) : (i32, i32) -> i32
      %3236 = "arith.constant"() <{"value" = 128 : i32}> : () -> i32
      %3237 = "arith.index_cast"(%3135) : (index) -> i32
      %3238 = "arith.constant"() <{"value" = 960 : i32}> : () -> i32
      "llvm.inline_asm"(%3238, %3237) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3239 = "arith.constant"() <{"value" = 961 : i32}> : () -> i32
      "llvm.inline_asm"(%3239, %3140) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3240 = "arith.constant"() <{"value" = 962 : i32}> : () -> i32
      "llvm.inline_asm"(%3240, %3141) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3241 = "arith.constant"() <{"value" = 963 : i32}> : () -> i32
      "llvm.inline_asm"(%3241, %3142) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3242 = "arith.constant"() <{"value" = 964 : i32}> : () -> i32
      "llvm.inline_asm"(%3242, %3143) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3243 = "arith.constant"() <{"value" = 965 : i32}> : () -> i32
      "llvm.inline_asm"(%3243, %3144) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3244 = "arith.constant"() <{"value" = 966 : i32}> : () -> i32
      "llvm.inline_asm"(%3244, %3145) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3245 = "arith.constant"() <{"value" = 967 : i32}> : () -> i32
      "llvm.inline_asm"(%3245, %3146) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3246 = "arith.constant"() <{"value" = 968 : i32}> : () -> i32
      "llvm.inline_asm"(%3246, %3147) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3247 = "arith.constant"() <{"value" = 969 : i32}> : () -> i32
      "llvm.inline_asm"(%3247, %3148) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3248 = "arith.constant"() <{"value" = 970 : i32}> : () -> i32
      "llvm.inline_asm"(%3248, %3149) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3249 = "arith.constant"() <{"value" = 971 : i32}> : () -> i32
      "llvm.inline_asm"(%3249, %3150) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3250 = "arith.constant"() <{"value" = 972 : i32}> : () -> i32
      "llvm.inline_asm"(%3250, %3151) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3251 = "arith.constant"() <{"value" = 973 : i32}> : () -> i32
      "llvm.inline_asm"(%3251, %3152) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3252 = "arith.constant"() <{"value" = 974 : i32}> : () -> i32
      "llvm.inline_asm"(%3252, %3153) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3253 = "arith.index_cast"(%3136) : (index) -> i32
      %3254 = "arith.constant"() <{"value" = 975 : i32}> : () -> i32
      "llvm.inline_asm"(%3254, %3253) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3255 = "arith.constant"() <{"value" = 976 : i32}> : () -> i32
      "llvm.inline_asm"(%3255, %3154) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3256 = "arith.constant"() <{"value" = 977 : i32}> : () -> i32
      "llvm.inline_asm"(%3256, %3155) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3257 = "arith.constant"() <{"value" = 978 : i32}> : () -> i32
      "llvm.inline_asm"(%3257, %3156) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3258 = "arith.constant"() <{"value" = 979 : i32}> : () -> i32
      "llvm.inline_asm"(%3258, %3157) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3259 = "arith.constant"() <{"value" = 980 : i32}> : () -> i32
      "llvm.inline_asm"(%3259, %3158) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3260 = "arith.constant"() <{"value" = 981 : i32}> : () -> i32
      "llvm.inline_asm"(%3260, %3159) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3261 = "arith.constant"() <{"value" = 982 : i32}> : () -> i32
      "llvm.inline_asm"(%3261, %3160) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3262 = "arith.constant"() <{"value" = 983 : i32}> : () -> i32
      "llvm.inline_asm"(%3262, %3161) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3263 = "arith.index_cast"(%3137) : (index) -> i32
      %3264 = "arith.constant"() <{"value" = 984 : i32}> : () -> i32
      "llvm.inline_asm"(%3264, %3263) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3265 = "arith.constant"() <{"value" = 985 : i32}> : () -> i32
      "llvm.inline_asm"(%3265, %3162) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3266 = "arith.constant"() <{"value" = 986 : i32}> : () -> i32
      "llvm.inline_asm"(%3266, %3163) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3267 = "arith.constant"() <{"value" = 987 : i32}> : () -> i32
      "llvm.inline_asm"(%3267, %3164) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3268 = "arith.constant"() <{"value" = 988 : i32}> : () -> i32
      "llvm.inline_asm"(%3268, %3165) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3269 = "arith.constant"() <{"value" = 989 : i32}> : () -> i32
      "llvm.inline_asm"(%3269, %3166) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3270 = "arith.constant"() <{"value" = 990 : i32}> : () -> i32
      "llvm.inline_asm"(%3270, %3167) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3271 = "arith.constant"() <{"value" = 991 : i32}> : () -> i32
      "llvm.inline_asm"(%3271, %3168) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3272 = "arith.constant"() <{"value" = 992 : i32}> : () -> i32
      "llvm.inline_asm"(%3272, %3169) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3273 = "arith.index_cast"(%3138) : (index) -> i32
      %3274 = "arith.constant"() <{"value" = 993 : i32}> : () -> i32
      "llvm.inline_asm"(%3274, %3273) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3275 = "arith.constant"() <{"value" = 994 : i32}> : () -> i32
      "llvm.inline_asm"(%3275, %3170) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3276 = "arith.constant"() <{"value" = 995 : i32}> : () -> i32
      "llvm.inline_asm"(%3276, %3171) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3277 = "arith.constant"() <{"value" = 996 : i32}> : () -> i32
      "llvm.inline_asm"(%3277, %3172) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3278 = "arith.constant"() <{"value" = 997 : i32}> : () -> i32
      "llvm.inline_asm"(%3278, %3173) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3279 = "arith.constant"() <{"value" = 998 : i32}> : () -> i32
      "llvm.inline_asm"(%3279, %3174) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3280 = "arith.constant"() <{"value" = 999 : i32}> : () -> i32
      "llvm.inline_asm"(%3280, %3175) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3281 = "arith.constant"() <{"value" = 1000 : i32}> : () -> i32
      "llvm.inline_asm"(%3281, %3176) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3282 = "arith.constant"() <{"value" = 1001 : i32}> : () -> i32
      "llvm.inline_asm"(%3282, %3177) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3283 = "arith.constant"() <{"value" = 1002 : i32}> : () -> i32
      "llvm.inline_asm"(%3283, %3178) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3284 = "arith.index_cast"(%3139) : (index) -> i32
      %3285 = "arith.constant"() <{"value" = 1003 : i32}> : () -> i32
      "llvm.inline_asm"(%3285, %3284) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3286 = "arith.constant"() <{"value" = 1004 : i32}> : () -> i32
      "llvm.inline_asm"(%3286, %3179) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3287 = "arith.constant"() <{"value" = 1005 : i32}> : () -> i32
      "llvm.inline_asm"(%3287, %3180) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3288 = "arith.constant"() <{"value" = 1006 : i32}> : () -> i32
      "llvm.inline_asm"(%3288, %3181) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3289 = "arith.constant"() <{"value" = 1007 : i32}> : () -> i32
      "llvm.inline_asm"(%3289, %3182) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3290 = "arith.constant"() <{"value" = 1008 : i32}> : () -> i32
      "llvm.inline_asm"(%3290, %3183) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3291 = "arith.constant"() <{"value" = 1009 : i32}> : () -> i32
      "llvm.inline_asm"(%3291, %3184) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3292 = "arith.constant"() <{"value" = 1010 : i32}> : () -> i32
      "llvm.inline_asm"(%3292, %3185) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3293 = "arith.constant"() <{"value" = 1011 : i32}> : () -> i32
      "llvm.inline_asm"(%3293, %3186) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3294 = "arith.constant"() <{"value" = 1012 : i32}> : () -> i32
      "llvm.inline_asm"(%3294, %3187) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3295 = "arith.constant"() <{"value" = 1013 : i32}> : () -> i32
      "llvm.inline_asm"(%3295, %3188) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3296 = "arith.constant"() <{"value" = 1017 : i32}> : () -> i32
      "llvm.inline_asm"(%3296, %3189) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3297 = "arith.constant"() <{"value" = 1018 : i32}> : () -> i32
      "llvm.inline_asm"(%3297, %3190) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3298 = "arith.constant"() <{"value" = 1019 : i32}> : () -> i32
      "llvm.inline_asm"(%3298, %3191) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3299 = "arith.constant"() <{"value" = 1020 : i32}> : () -> i32
      "llvm.inline_asm"(%3299, %3201) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3300 = "arith.constant"() <{"value" = 1021 : i32}> : () -> i32
      "llvm.inline_asm"(%3300, %3224) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3301 = "arith.constant"() <{"value" = 1022 : i32}> : () -> i32
      "llvm.inline_asm"(%3301, %3204) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3302 = "arith.constant"() <{"value" = 1023 : i32}> : () -> i32
      "llvm.inline_asm"(%3302, %3235) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3303 = "arith.constant"() <{"value" = 1024 : i32}> : () -> i32
      "llvm.inline_asm"(%3303, %3235) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3304 = "arith.constant"() <{"value" = 1025 : i32}> : () -> i32
      "llvm.inline_asm"(%3304, %3206) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3305 = "arith.constant"() <{"value" = 1026 : i32}> : () -> i32
      "llvm.inline_asm"(%3305, %3206) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3306 = "arith.constant"() <{"value" = 1027 : i32}> : () -> i32
      "llvm.inline_asm"(%3306, %3206) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3307 = "arith.constant"() <{"value" = 1028 : i32}> : () -> i32
      "llvm.inline_asm"(%3307, %3206) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3308 = "arith.constant"() <{"value" = 1029 : i32}> : () -> i32
      "llvm.inline_asm"(%3308, %3206) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3309 = "arith.constant"() <{"value" = 1030 : i32}> : () -> i32
      "llvm.inline_asm"(%3309, %3206) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3310 = "arith.constant"() <{"value" = 1031 : i32}> : () -> i32
      "llvm.inline_asm"(%3310, %3206) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3311 = "arith.constant"() <{"value" = 1032 : i32}> : () -> i32
      "llvm.inline_asm"(%3311, %3206) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3312 = "arith.constant"() <{"value" = 1033 : i32}> : () -> i32
      "llvm.inline_asm"(%3312, %3236) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3313 = "arith.constant"() <{"value" = 1034 : i32}> : () -> i32
      "llvm.inline_asm"(%3313, %3192) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3314 = "arith.constant"() <{"value" = 1 : i5}> : () -> i5
      %3315 = "arith.constant"() <{"value" = 1014 : i32}> : () -> i32
      "llvm.inline_asm"(%3315, %3314) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i5) -> ()
      %3316 = "arith.constant"() <{"value" = 1035 : i32}> : () -> i32
      "llvm.inline_asm"(%3316, %3314) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i5) -> ()
      %3317 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3318 = "arith.constant"() <{"value" = 1035 : i32}> : () -> i32
      "llvm.inline_asm"(%3318, %3317) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      "llvm.inline_asm"(%3318, %3317) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3319 = "arith.constant"() <{"value" = 1014 : i32}> : () -> i32
      "llvm.inline_asm"(%3319, %3317) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      "llvm.inline_asm"(%3319, %3317) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_cluster_hw_barrier}> : () -> ()
    "scf.if"(%6) ({
      %3320 = "memref.extract_aligned_pointer_as_index"(%3098) : (memref<1x16x16x32xi32>) -> index
      %3321 = "memref.extract_aligned_pointer_as_index"(%2903) : (memref<1x16x16x32xi32>) -> index
      %3322 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %3323 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %3324 = "memref.dim"(%3098, %3323) : (memref<1x16x16x32xi32>, index) -> index
      %3325 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %3326 = "memref.dim"(%3098, %3325) : (memref<1x16x16x32xi32>, index) -> index
      %3327 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %3328 = "memref.dim"(%3098, %3327) : (memref<1x16x16x32xi32>, index) -> index
      %3329 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %3330 = "memref.dim"(%3098, %3329) : (memref<1x16x16x32xi32>, index) -> index
      %3331 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %3332 = "arith.constant"() <{"value" = 16 : index}> : () -> index
      %3333 = "arith.constant"() <{"value" = 16 : index}> : () -> index
      %3334 = "arith.constant"() <{"value" = 4 : index}> : () -> index
      %3335 = "arith.constant"() <{"value" = 8 : index}> : () -> index
      %3336 = "arith.constant"() <{"value" = 32768 : index}> : () -> index
      %3337 = "arith.constant"() <{"value" = 4 : index}> : () -> index
      %3338 = "arith.constant"() <{"value" = 8192 : index}> : () -> index
      %3339 = "arith.constant"() <{"value" = 512 : index}> : () -> index
      %3340 = "arith.constant"() <{"value" = 32 : index}> : () -> index
      %3341 = "arith.constant"() <{"value" = 32768 : index}> : () -> index
      %3342 = "arith.constant"() <{"value" = 32768 : index}> : () -> index
      %3343 = "arith.constant"() <{"value" = 4 : index}> : () -> index
      %3344 = "arith.constant"() <{"value" = 8192 : index}> : () -> index
      %3345 = "arith.constant"() <{"value" = 512 : index}> : () -> index
      %3346 = "arith.constant"() <{"value" = 32 : index}> : () -> index
      %3347 = "arith.constant"() <{"value" = 32768 : index}> : () -> index
      %3348 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %3349 = "memref.dim"(%3098, %3348) : (memref<1x16x16x32xi32>, index) -> index
      %3350 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %3351 = "memref.dim"(%3098, %3350) : (memref<1x16x16x32xi32>, index) -> index
      %3352 = "arith.muli"(%3349, %3351) : (index, index) -> index
      %3353 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %3354 = "memref.dim"(%3098, %3353) : (memref<1x16x16x32xi32>, index) -> index
      %3355 = "arith.muli"(%3352, %3354) : (index, index) -> index
      %3356 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %3357 = "memref.dim"(%3098, %3356) : (memref<1x16x16x32xi32>, index) -> index
      %3358 = "arith.muli"(%3355, %3357) : (index, index) -> index
      %3359 = "arith.constant"() <{"value" = 4 : index}> : () -> index
      %3360 = "arith.muli"(%3358, %3359) : (index, index) -> index
      "func.call"(%3320, %3321, %3360) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_clear_l1}> : () -> ()
    %3361 = "memref.get_global"() <{"name" = @_static_const_15}> : () -> memref<1x16x16x32xi32>
    %3362 = "memref.get_global"() <{"name" = @_static_const_16}> : () -> memref<1x16x16x32xi32>
    %3363 = "memref.get_global"() <{"name" = @_static_const_17}> : () -> memref<1x16x16x32xi8>
    %3364 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %3365 = "arith.constant"() <{"value" = 16 : index}> : () -> index
    %3366 = "arith.constant"() <{"value" = 16 : index}> : () -> index
    %3367 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %3368 = "arith.constant"() <{"value" = 4 : index}> : () -> index
    %3369 = "arith.muli"(%3364, %3368) : (index, index) -> index
    %3370 = "arith.muli"(%3365, %3369) : (index, index) -> index
    %3371 = "arith.muli"(%3366, %3370) : (index, index) -> index
    %3372 = "arith.muli"(%3367, %3371) : (index, index) -> index
    %3373 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %3374 = "func.call"(%3372, %3373) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %3375 = "llvm.load"(%3374) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %3376 = "llvm.extractvalue"(%3375) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %3377 = "llvm.extractvalue"(%3375) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %3378 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3379 = "llvm.insertvalue"(%3378, %3376) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3380 = "llvm.insertvalue"(%3379, %3377) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3381 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %3382 = "llvm.insertvalue"(%3380, %3381) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3383 = "builtin.unrealized_conversion_cast"(%3364) : (index) -> i32
    %3384 = "llvm.insertvalue"(%3382, %3383) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3385 = "builtin.unrealized_conversion_cast"(%3365) : (index) -> i32
    %3386 = "llvm.insertvalue"(%3384, %3385) <{"position" = array<i64: 3, 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3387 = "builtin.unrealized_conversion_cast"(%3366) : (index) -> i32
    %3388 = "llvm.insertvalue"(%3386, %3387) <{"position" = array<i64: 3, 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3389 = "builtin.unrealized_conversion_cast"(%3367) : (index) -> i32
    %3390 = "llvm.insertvalue"(%3388, %3389) <{"position" = array<i64: 3, 3>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3391 = "builtin.unrealized_conversion_cast"(%3390) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>) -> memref<1x16x16x32xi32>
    %3392 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %3393 = "arith.constant"() <{"value" = 16 : index}> : () -> index
    %3394 = "arith.constant"() <{"value" = 16 : index}> : () -> index
    %3395 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %3396 = "arith.constant"() <{"value" = 4 : index}> : () -> index
    %3397 = "arith.muli"(%3392, %3396) : (index, index) -> index
    %3398 = "arith.muli"(%3393, %3397) : (index, index) -> index
    %3399 = "arith.muli"(%3394, %3398) : (index, index) -> index
    %3400 = "arith.muli"(%3395, %3399) : (index, index) -> index
    %3401 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %3402 = "func.call"(%3400, %3401) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %3403 = "llvm.load"(%3402) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %3404 = "llvm.extractvalue"(%3403) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %3405 = "llvm.extractvalue"(%3403) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %3406 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3407 = "llvm.insertvalue"(%3406, %3404) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3408 = "llvm.insertvalue"(%3407, %3405) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3409 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %3410 = "llvm.insertvalue"(%3408, %3409) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3411 = "builtin.unrealized_conversion_cast"(%3392) : (index) -> i32
    %3412 = "llvm.insertvalue"(%3410, %3411) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3413 = "builtin.unrealized_conversion_cast"(%3393) : (index) -> i32
    %3414 = "llvm.insertvalue"(%3412, %3413) <{"position" = array<i64: 3, 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3415 = "builtin.unrealized_conversion_cast"(%3394) : (index) -> i32
    %3416 = "llvm.insertvalue"(%3414, %3415) <{"position" = array<i64: 3, 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3417 = "builtin.unrealized_conversion_cast"(%3395) : (index) -> i32
    %3418 = "llvm.insertvalue"(%3416, %3417) <{"position" = array<i64: 3, 3>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3419 = "builtin.unrealized_conversion_cast"(%3418) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>) -> memref<1x16x16x32xi32>
    %3420 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %3421 = "arith.constant"() <{"value" = 16 : index}> : () -> index
    %3422 = "arith.constant"() <{"value" = 16 : index}> : () -> index
    %3423 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %3424 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %3425 = "arith.muli"(%3420, %3424) : (index, index) -> index
    %3426 = "arith.muli"(%3421, %3425) : (index, index) -> index
    %3427 = "arith.muli"(%3422, %3426) : (index, index) -> index
    %3428 = "arith.muli"(%3423, %3427) : (index, index) -> index
    %3429 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %3430 = "func.call"(%3428, %3429) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %3431 = "llvm.load"(%3430) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %3432 = "llvm.extractvalue"(%3431) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %3433 = "llvm.extractvalue"(%3431) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %3434 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3435 = "llvm.insertvalue"(%3434, %3432) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3436 = "llvm.insertvalue"(%3435, %3433) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3437 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %3438 = "llvm.insertvalue"(%3436, %3437) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3439 = "builtin.unrealized_conversion_cast"(%3420) : (index) -> i32
    %3440 = "llvm.insertvalue"(%3438, %3439) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3441 = "builtin.unrealized_conversion_cast"(%3421) : (index) -> i32
    %3442 = "llvm.insertvalue"(%3440, %3441) <{"position" = array<i64: 3, 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3443 = "builtin.unrealized_conversion_cast"(%3422) : (index) -> i32
    %3444 = "llvm.insertvalue"(%3442, %3443) <{"position" = array<i64: 3, 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3445 = "builtin.unrealized_conversion_cast"(%3423) : (index) -> i32
    %3446 = "llvm.insertvalue"(%3444, %3445) <{"position" = array<i64: 3, 3>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3447 = "builtin.unrealized_conversion_cast"(%3446) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>) -> memref<1x16x16x32xi8>
    "scf.if"(%6) ({
      %3448 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %3449 = "memref.dim"(%3362, %3448) : (memref<1x16x16x32xi32>, index) -> index
      %3450 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %3451 = "memref.dim"(%3362, %3450) : (memref<1x16x16x32xi32>, index) -> index
      %3452 = "arith.muli"(%3449, %3451) : (index, index) -> index
      %3453 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %3454 = "memref.dim"(%3362, %3453) : (memref<1x16x16x32xi32>, index) -> index
      %3455 = "arith.muli"(%3452, %3454) : (index, index) -> index
      %3456 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %3457 = "memref.dim"(%3362, %3456) : (memref<1x16x16x32xi32>, index) -> index
      %3458 = "arith.muli"(%3455, %3457) : (index, index) -> index
      %3459 = "arith.constant"() <{"value" = 4 : index}> : () -> index
      %3460 = "arith.muli"(%3458, %3459) : (index, index) -> index
      %3461 = "memref.extract_aligned_pointer_as_index"(%3362) : (memref<1x16x16x32xi32>) -> index
      %3462 = "memref.extract_aligned_pointer_as_index"(%3419) : (memref<1x16x16x32xi32>) -> index
      "func.call"(%3461, %3462, %3460) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      %3463 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %3464 = "memref.dim"(%3361, %3463) : (memref<1x16x16x32xi32>, index) -> index
      %3465 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %3466 = "memref.dim"(%3361, %3465) : (memref<1x16x16x32xi32>, index) -> index
      %3467 = "arith.muli"(%3464, %3466) : (index, index) -> index
      %3468 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %3469 = "memref.dim"(%3361, %3468) : (memref<1x16x16x32xi32>, index) -> index
      %3470 = "arith.muli"(%3467, %3469) : (index, index) -> index
      %3471 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %3472 = "memref.dim"(%3361, %3471) : (memref<1x16x16x32xi32>, index) -> index
      %3473 = "arith.muli"(%3470, %3472) : (index, index) -> index
      %3474 = "arith.constant"() <{"value" = 4 : index}> : () -> index
      %3475 = "arith.muli"(%3473, %3474) : (index, index) -> index
      %3476 = "memref.extract_aligned_pointer_as_index"(%3361) : (memref<1x16x16x32xi32>) -> index
      %3477 = "memref.extract_aligned_pointer_as_index"(%3391) : (memref<1x16x16x32xi32>) -> index
      "func.call"(%3476, %3477, %3475) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_cluster_hw_barrier}> : () -> ()
    "scf.if"(%4) ({
      %3478 = "memref.extract_aligned_pointer_as_index"(%3391) : (memref<1x16x16x32xi32>) -> index
      %3479 = "memref.extract_aligned_pointer_as_index"(%3419) : (memref<1x16x16x32xi32>) -> index
      %3480 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %3481 = "memref.extract_aligned_pointer_as_index"(%3419) : (memref<1x16x16x32xi32>) -> index
      %3482 = "memref.extract_aligned_pointer_as_index"(%3447) : (memref<1x16x16x32xi8>) -> index
      %3483 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3484 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %3485 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %3486 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %3487 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %3488 = "arith.constant"() <{"value" = 4 : i32}> : () -> i32
      %3489 = "arith.constant"() <{"value" = 2 : i32}> : () -> i32
      %3490 = "arith.constant"() <{"value" = 16 : i32}> : () -> i32
      %3491 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3492 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3493 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3494 = "arith.constant"() <{"value" = 32 : i32}> : () -> i32
      %3495 = "arith.constant"() <{"value" = 16384 : i32}> : () -> i32
      %3496 = "arith.constant"() <{"value" = 128 : i32}> : () -> i32
      %3497 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3498 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %3499 = "arith.constant"() <{"value" = 4 : i32}> : () -> i32
      %3500 = "arith.constant"() <{"value" = 2 : i32}> : () -> i32
      %3501 = "arith.constant"() <{"value" = 16 : i32}> : () -> i32
      %3502 = "arith.constant"() <{"value" = 32 : i32}> : () -> i32
      %3503 = "arith.constant"() <{"value" = 16384 : i32}> : () -> i32
      %3504 = "arith.constant"() <{"value" = 128 : i32}> : () -> i32
      %3505 = "arith.constant"() <{"value" = 268435520 : i32}> : () -> i32
      %3506 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3507 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %3508 = "arith.constant"() <{"value" = 4 : i32}> : () -> i32
      %3509 = "arith.constant"() <{"value" = 2 : i32}> : () -> i32
      %3510 = "arith.constant"() <{"value" = 16 : i32}> : () -> i32
      %3511 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %3512 = "arith.constant"() <{"value" = 4096 : i32}> : () -> i32
      %3513 = "arith.constant"() <{"value" = 32 : i32}> : () -> i32
      %3514 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3515 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %3516 = "arith.constant"() <{"value" = 4 : i32}> : () -> i32
      %3517 = "arith.constant"() <{"value" = 2 : i32}> : () -> i32
      %3518 = "arith.constant"() <{"value" = 16 : i32}> : () -> i32
      %3519 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3520 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3521 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3522 = "arith.constant"() <{"value" = -1 : i32}> : () -> i32
      %3523 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3524 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3525 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3526 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3527 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3528 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3529 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3530 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3531 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %3532 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %3533 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %3534 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %3535 = "arith.constant"() <{"value" = 128 : i32}> : () -> i32
      %3536 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3537 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %3538 = "arith.constant"() <{"value" = 127 : i32}> : () -> i32
      %3539 = "arith.constant"() <{"value" = -128 : i32}> : () -> i32
      %3540 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %3541 = "arith.constant"() <{"value" = 48 : i32}> : () -> i32
      %3542 = "arith.constant"() <{"value" = 1140768826 : i32}> : () -> i32
      %3543 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3544 = "arith.constant"() <{"value" = -128 : i32}> : () -> i32
      %3545 = "arith.constant"() <{"value" = 255 : i32}> : () -> i32
      %3546 = "arith.andi"(%3538, %3545) : (i32, i32) -> i32
      %3547 = "arith.andi"(%3539, %3545) : (i32, i32) -> i32
      %3548 = "arith.andi"(%3543, %3545) : (i32, i32) -> i32
      %3549 = "arith.andi"(%3544, %3545) : (i32, i32) -> i32
      %3550 = "arith.constant"() <{"value" = 24 : i32}> : () -> i32
      %3551 = "arith.shli"(%3547, %3550) : (i32, i32) -> i32
      %3552 = "arith.constant"() <{"value" = 16 : i32}> : () -> i32
      %3553 = "arith.shli"(%3546, %3552) : (i32, i32) -> i32
      %3554 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %3555 = "arith.shli"(%3549, %3554) : (i32, i32) -> i32
      %3556 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3557 = "arith.shli"(%3548, %3556) : (i32, i32) -> i32
      %3558 = "arith.ori"(%3551, %3553) : (i32, i32) -> i32
      %3559 = "arith.ori"(%3555, %3557) : (i32, i32) -> i32
      %3560 = "arith.ori"(%3558, %3559) : (i32, i32) -> i32
      %3561 = "arith.constant"() <{"value" = 24 : i32}> : () -> i32
      %3562 = "arith.shli"(%3541, %3561) : (i32, i32) -> i32
      %3563 = "arith.constant"() <{"value" = 16 : i32}> : () -> i32
      %3564 = "arith.shli"(%3541, %3563) : (i32, i32) -> i32
      %3565 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %3566 = "arith.shli"(%3541, %3565) : (i32, i32) -> i32
      %3567 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3568 = "arith.shli"(%3541, %3567) : (i32, i32) -> i32
      %3569 = "arith.ori"(%3562, %3564) : (i32, i32) -> i32
      %3570 = "arith.ori"(%3566, %3568) : (i32, i32) -> i32
      %3571 = "arith.ori"(%3569, %3570) : (i32, i32) -> i32
      %3572 = "arith.constant"() <{"value" = 128 : i32}> : () -> i32
      %3573 = "arith.index_cast"(%3478) : (index) -> i32
      %3574 = "arith.constant"() <{"value" = 960 : i32}> : () -> i32
      "llvm.inline_asm"(%3574, %3573) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3575 = "arith.constant"() <{"value" = 961 : i32}> : () -> i32
      "llvm.inline_asm"(%3575, %3483) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3576 = "arith.constant"() <{"value" = 962 : i32}> : () -> i32
      "llvm.inline_asm"(%3576, %3484) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3577 = "arith.constant"() <{"value" = 963 : i32}> : () -> i32
      "llvm.inline_asm"(%3577, %3485) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3578 = "arith.constant"() <{"value" = 964 : i32}> : () -> i32
      "llvm.inline_asm"(%3578, %3486) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3579 = "arith.constant"() <{"value" = 965 : i32}> : () -> i32
      "llvm.inline_asm"(%3579, %3487) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3580 = "arith.constant"() <{"value" = 966 : i32}> : () -> i32
      "llvm.inline_asm"(%3580, %3488) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3581 = "arith.constant"() <{"value" = 967 : i32}> : () -> i32
      "llvm.inline_asm"(%3581, %3489) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3582 = "arith.constant"() <{"value" = 968 : i32}> : () -> i32
      "llvm.inline_asm"(%3582, %3490) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3583 = "arith.constant"() <{"value" = 969 : i32}> : () -> i32
      "llvm.inline_asm"(%3583, %3491) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3584 = "arith.constant"() <{"value" = 970 : i32}> : () -> i32
      "llvm.inline_asm"(%3584, %3492) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3585 = "arith.constant"() <{"value" = 971 : i32}> : () -> i32
      "llvm.inline_asm"(%3585, %3493) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3586 = "arith.constant"() <{"value" = 972 : i32}> : () -> i32
      "llvm.inline_asm"(%3586, %3494) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3587 = "arith.constant"() <{"value" = 973 : i32}> : () -> i32
      "llvm.inline_asm"(%3587, %3495) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3588 = "arith.constant"() <{"value" = 974 : i32}> : () -> i32
      "llvm.inline_asm"(%3588, %3496) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3589 = "arith.index_cast"(%3479) : (index) -> i32
      %3590 = "arith.constant"() <{"value" = 975 : i32}> : () -> i32
      "llvm.inline_asm"(%3590, %3589) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3591 = "arith.constant"() <{"value" = 976 : i32}> : () -> i32
      "llvm.inline_asm"(%3591, %3497) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3592 = "arith.constant"() <{"value" = 977 : i32}> : () -> i32
      "llvm.inline_asm"(%3592, %3498) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3593 = "arith.constant"() <{"value" = 978 : i32}> : () -> i32
      "llvm.inline_asm"(%3593, %3499) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3594 = "arith.constant"() <{"value" = 979 : i32}> : () -> i32
      "llvm.inline_asm"(%3594, %3500) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3595 = "arith.constant"() <{"value" = 980 : i32}> : () -> i32
      "llvm.inline_asm"(%3595, %3501) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3596 = "arith.constant"() <{"value" = 981 : i32}> : () -> i32
      "llvm.inline_asm"(%3596, %3502) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3597 = "arith.constant"() <{"value" = 982 : i32}> : () -> i32
      "llvm.inline_asm"(%3597, %3503) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3598 = "arith.constant"() <{"value" = 983 : i32}> : () -> i32
      "llvm.inline_asm"(%3598, %3504) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3599 = "arith.constant"() <{"value" = 984 : i32}> : () -> i32
      "llvm.inline_asm"(%3599, %3505) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3600 = "arith.constant"() <{"value" = 985 : i32}> : () -> i32
      "llvm.inline_asm"(%3600, %3506) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3601 = "arith.constant"() <{"value" = 986 : i32}> : () -> i32
      "llvm.inline_asm"(%3601, %3507) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3602 = "arith.constant"() <{"value" = 987 : i32}> : () -> i32
      "llvm.inline_asm"(%3602, %3508) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3603 = "arith.constant"() <{"value" = 988 : i32}> : () -> i32
      "llvm.inline_asm"(%3603, %3509) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3604 = "arith.constant"() <{"value" = 989 : i32}> : () -> i32
      "llvm.inline_asm"(%3604, %3510) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3605 = "arith.constant"() <{"value" = 990 : i32}> : () -> i32
      "llvm.inline_asm"(%3605, %3511) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3606 = "arith.constant"() <{"value" = 991 : i32}> : () -> i32
      "llvm.inline_asm"(%3606, %3512) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3607 = "arith.constant"() <{"value" = 992 : i32}> : () -> i32
      "llvm.inline_asm"(%3607, %3513) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3608 = "arith.index_cast"(%3481) : (index) -> i32
      %3609 = "arith.constant"() <{"value" = 993 : i32}> : () -> i32
      "llvm.inline_asm"(%3609, %3608) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3610 = "arith.constant"() <{"value" = 994 : i32}> : () -> i32
      "llvm.inline_asm"(%3610, %3514) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3611 = "arith.constant"() <{"value" = 995 : i32}> : () -> i32
      "llvm.inline_asm"(%3611, %3515) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3612 = "arith.constant"() <{"value" = 996 : i32}> : () -> i32
      "llvm.inline_asm"(%3612, %3516) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3613 = "arith.constant"() <{"value" = 997 : i32}> : () -> i32
      "llvm.inline_asm"(%3613, %3517) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3614 = "arith.constant"() <{"value" = 998 : i32}> : () -> i32
      "llvm.inline_asm"(%3614, %3518) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3615 = "arith.constant"() <{"value" = 999 : i32}> : () -> i32
      "llvm.inline_asm"(%3615, %3519) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3616 = "arith.constant"() <{"value" = 1000 : i32}> : () -> i32
      "llvm.inline_asm"(%3616, %3520) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3617 = "arith.constant"() <{"value" = 1001 : i32}> : () -> i32
      "llvm.inline_asm"(%3617, %3521) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3618 = "arith.constant"() <{"value" = 1002 : i32}> : () -> i32
      "llvm.inline_asm"(%3618, %3522) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3619 = "arith.index_cast"(%3482) : (index) -> i32
      %3620 = "arith.constant"() <{"value" = 1003 : i32}> : () -> i32
      "llvm.inline_asm"(%3620, %3619) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3621 = "arith.constant"() <{"value" = 1004 : i32}> : () -> i32
      "llvm.inline_asm"(%3621, %3523) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3622 = "arith.constant"() <{"value" = 1005 : i32}> : () -> i32
      "llvm.inline_asm"(%3622, %3524) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3623 = "arith.constant"() <{"value" = 1006 : i32}> : () -> i32
      "llvm.inline_asm"(%3623, %3525) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3624 = "arith.constant"() <{"value" = 1007 : i32}> : () -> i32
      "llvm.inline_asm"(%3624, %3526) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3625 = "arith.constant"() <{"value" = 1008 : i32}> : () -> i32
      "llvm.inline_asm"(%3625, %3527) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3626 = "arith.constant"() <{"value" = 1009 : i32}> : () -> i32
      "llvm.inline_asm"(%3626, %3528) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3627 = "arith.constant"() <{"value" = 1010 : i32}> : () -> i32
      "llvm.inline_asm"(%3627, %3529) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3628 = "arith.constant"() <{"value" = 1011 : i32}> : () -> i32
      "llvm.inline_asm"(%3628, %3530) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3629 = "arith.constant"() <{"value" = 1012 : i32}> : () -> i32
      "llvm.inline_asm"(%3629, %3531) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3630 = "arith.constant"() <{"value" = 1013 : i32}> : () -> i32
      "llvm.inline_asm"(%3630, %3532) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3631 = "arith.constant"() <{"value" = 1017 : i32}> : () -> i32
      "llvm.inline_asm"(%3631, %3533) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3632 = "arith.constant"() <{"value" = 1018 : i32}> : () -> i32
      "llvm.inline_asm"(%3632, %3534) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3633 = "arith.constant"() <{"value" = 1019 : i32}> : () -> i32
      "llvm.inline_asm"(%3633, %3535) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3634 = "arith.constant"() <{"value" = 1020 : i32}> : () -> i32
      "llvm.inline_asm"(%3634, %3536) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3635 = "arith.constant"() <{"value" = 1021 : i32}> : () -> i32
      "llvm.inline_asm"(%3635, %3560) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3636 = "arith.constant"() <{"value" = 1022 : i32}> : () -> i32
      "llvm.inline_asm"(%3636, %3540) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3637 = "arith.constant"() <{"value" = 1023 : i32}> : () -> i32
      "llvm.inline_asm"(%3637, %3571) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3638 = "arith.constant"() <{"value" = 1024 : i32}> : () -> i32
      "llvm.inline_asm"(%3638, %3571) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3639 = "arith.constant"() <{"value" = 1025 : i32}> : () -> i32
      "llvm.inline_asm"(%3639, %3542) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3640 = "arith.constant"() <{"value" = 1026 : i32}> : () -> i32
      "llvm.inline_asm"(%3640, %3542) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3641 = "arith.constant"() <{"value" = 1027 : i32}> : () -> i32
      "llvm.inline_asm"(%3641, %3542) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3642 = "arith.constant"() <{"value" = 1028 : i32}> : () -> i32
      "llvm.inline_asm"(%3642, %3542) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3643 = "arith.constant"() <{"value" = 1029 : i32}> : () -> i32
      "llvm.inline_asm"(%3643, %3542) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3644 = "arith.constant"() <{"value" = 1030 : i32}> : () -> i32
      "llvm.inline_asm"(%3644, %3542) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3645 = "arith.constant"() <{"value" = 1031 : i32}> : () -> i32
      "llvm.inline_asm"(%3645, %3542) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3646 = "arith.constant"() <{"value" = 1032 : i32}> : () -> i32
      "llvm.inline_asm"(%3646, %3542) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3647 = "arith.constant"() <{"value" = 1033 : i32}> : () -> i32
      "llvm.inline_asm"(%3647, %3572) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3648 = "arith.constant"() <{"value" = 1034 : i32}> : () -> i32
      "llvm.inline_asm"(%3648, %3536) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3649 = "arith.constant"() <{"value" = 1 : i5}> : () -> i5
      %3650 = "arith.constant"() <{"value" = 1014 : i32}> : () -> i32
      "llvm.inline_asm"(%3650, %3649) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i5) -> ()
      %3651 = "arith.constant"() <{"value" = 1035 : i32}> : () -> i32
      "llvm.inline_asm"(%3651, %3649) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i5) -> ()
      %3652 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3653 = "arith.constant"() <{"value" = 1035 : i32}> : () -> i32
      "llvm.inline_asm"(%3653, %3652) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      "llvm.inline_asm"(%3653, %3652) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %3654 = "arith.constant"() <{"value" = 1014 : i32}> : () -> i32
      "llvm.inline_asm"(%3654, %3652) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      "llvm.inline_asm"(%3654, %3652) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_cluster_hw_barrier}> : () -> ()
    "scf.if"(%6) ({
      %3655 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %3656 = "memref.dim"(%3447, %3655) : (memref<1x16x16x32xi8>, index) -> index
      %3657 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %3658 = "memref.dim"(%3447, %3657) : (memref<1x16x16x32xi8>, index) -> index
      %3659 = "arith.muli"(%3656, %3658) : (index, index) -> index
      %3660 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %3661 = "memref.dim"(%3447, %3660) : (memref<1x16x16x32xi8>, index) -> index
      %3662 = "arith.muli"(%3659, %3661) : (index, index) -> index
      %3663 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %3664 = "memref.dim"(%3447, %3663) : (memref<1x16x16x32xi8>, index) -> index
      %3665 = "arith.muli"(%3662, %3664) : (index, index) -> index
      %3666 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %3667 = "arith.muli"(%3665, %3666) : (index, index) -> index
      %3668 = "memref.extract_aligned_pointer_as_index"(%3447) : (memref<1x16x16x32xi8>) -> index
      %3669 = "memref.extract_aligned_pointer_as_index"(%3363) : (memref<1x16x16x32xi8>) -> index
      "func.call"(%3668, %3669, %3667) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    %3670 = "memref.get_global"() <{"name" = @_static_const_18}> : () -> memref<1x17x17x32xi8>
    %3671 = "memref.subview"(%3670) <{"operandSegmentSizes" = array<i32: 1, 0, 0, 0>, "static_offsets" = array<i64: 0, 0, 0, 0>, "static_sizes" = array<i64: 1, 16, 16, 32>, "static_strides" = array<i64: 1, 1, 1, 1>}> : (memref<1x17x17x32xi8>) -> memref<1x16x16x32xi8, strided<[9248, 544, 32, 1]>>
    "scf.if"(%6) ({
      %3672 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %3673 = "memref.dim"(%3363, %3672) : (memref<1x16x16x32xi8>, index) -> index
      %3674 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %3675 = "memref.dim"(%3363, %3674) : (memref<1x16x16x32xi8>, index) -> index
      %3676 = "arith.muli"(%3673, %3675) : (index, index) -> index
      %3677 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %3678 = "memref.dim"(%3363, %3677) : (memref<1x16x16x32xi8>, index) -> index
      %3679 = "arith.muli"(%3676, %3678) : (index, index) -> index
      %3680 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %3681 = "memref.dim"(%3363, %3680) : (memref<1x16x16x32xi8>, index) -> index
      %3682 = "arith.muli"(%3679, %3681) : (index, index) -> index
      %3683 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %3684 = "arith.muli"(%3682, %3683) : (index, index) -> index
      %3685 = "memref.extract_aligned_pointer_as_index"(%3363) : (memref<1x16x16x32xi8>) -> index
      %3686 = "memref.extract_aligned_pointer_as_index"(%3671) : (memref<1x16x16x32xi8, strided<[9248, 544, 32, 1]>>) -> index
      "func.call"(%3685, %3686, %3684) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_clear_l1}> : () -> ()
    %3687 = "memref.get_global"() <{"name" = @__constant_64x3x3x32xi8}> : () -> memref<64x3x3x32xi8>
    %3688 = "memref.get_global"() <{"name" = @__constant_64xi32}> : () -> memref<64xi32>
    %3689 = "memref.get_global"() <{"name" = @_static_const_19}> : () -> memref<1x8x8x64xi8>
    %3690 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %3691 = "arith.constant"() <{"value" = 4 : index}> : () -> index
    %3692 = "arith.muli"(%3690, %3691) : (index, index) -> index
    %3693 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %3694 = "func.call"(%3692, %3693) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %3695 = "llvm.load"(%3694) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %3696 = "llvm.extractvalue"(%3695) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %3697 = "llvm.extractvalue"(%3695) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %3698 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %3699 = "llvm.insertvalue"(%3698, %3696) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %3700 = "llvm.insertvalue"(%3699, %3697) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %3701 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %3702 = "llvm.insertvalue"(%3700, %3701) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %3703 = "builtin.unrealized_conversion_cast"(%3690) : (index) -> i32
    %3704 = "llvm.insertvalue"(%3702, %3703) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %3705 = "builtin.unrealized_conversion_cast"(%3704) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>) -> memref<64xi32>
    %3706 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %3707 = "arith.constant"() <{"value" = 17 : index}> : () -> index
    %3708 = "arith.constant"() <{"value" = 17 : index}> : () -> index
    %3709 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %3710 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %3711 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %3712 = "arith.constant"() <{"value" = 17 : index}> : () -> index
    %3713 = "arith.constant"() <{"value" = 17 : index}> : () -> index
    %3714 = "arith.constant"() <{"value" = 4 : index}> : () -> index
    %3715 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %3716 = "arith.constant"() <{"value" = 9248 : index}> : () -> index
    %3717 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %3718 = "arith.constant"() <{"value" = 2312 : index}> : () -> index
    %3719 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %3720 = "arith.constant"() <{"value" = 136 : index}> : () -> index
    %3721 = "arith.constant"() <{"value" = 9248 : index}> : () -> index
    %3722 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %3723 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %3724 = "arith.subi"(%3711, %3722) : (index, index) -> index
    %3725 = "arith.muli"(%3724, %3721) : (index, index) -> index
    %3726 = "arith.addi"(%3723, %3725) : (index, index) -> index
    %3727 = "arith.subi"(%3712, %3722) : (index, index) -> index
    %3728 = "arith.muli"(%3727, %3720) : (index, index) -> index
    %3729 = "arith.addi"(%3726, %3728) : (index, index) -> index
    %3730 = "arith.subi"(%3713, %3722) : (index, index) -> index
    %3731 = "arith.muli"(%3730, %3719) : (index, index) -> index
    %3732 = "arith.addi"(%3729, %3731) : (index, index) -> index
    %3733 = "arith.subi"(%3714, %3722) : (index, index) -> index
    %3734 = "arith.muli"(%3733, %3718) : (index, index) -> index
    %3735 = "arith.addi"(%3732, %3734) : (index, index) -> index
    %3736 = "arith.subi"(%3715, %3722) : (index, index) -> index
    %3737 = "arith.muli"(%3736, %3717) : (index, index) -> index
    %3738 = "arith.addi"(%3735, %3737) : (index, index) -> index
    %3739 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %3740 = "arith.addi"(%3738, %3739) : (index, index) -> index
    %3741 = "arith.muli"(%3722, %3740) : (index, index) -> index
    %3742 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %3743 = "arith.muli"(%3742, %3739) : (index, index) -> index
    %3744 = "arith.addi"(%3741, %3743) : (index, index) -> index
    %3745 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %3746 = "func.call"(%3744, %3745) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %3747 = "llvm.load"(%3746) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %3748 = "llvm.extractvalue"(%3747) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %3749 = "llvm.extractvalue"(%3747) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %3750 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3751 = "llvm.insertvalue"(%3750, %3748) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3752 = "llvm.insertvalue"(%3751, %3749) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3753 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %3754 = "llvm.insertvalue"(%3752, %3753) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3755 = "builtin.unrealized_conversion_cast"(%3706) : (index) -> i32
    %3756 = "llvm.insertvalue"(%3754, %3755) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3757 = "builtin.unrealized_conversion_cast"(%3707) : (index) -> i32
    %3758 = "llvm.insertvalue"(%3756, %3757) <{"position" = array<i64: 3, 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3759 = "builtin.unrealized_conversion_cast"(%3708) : (index) -> i32
    %3760 = "llvm.insertvalue"(%3758, %3759) <{"position" = array<i64: 3, 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3761 = "builtin.unrealized_conversion_cast"(%3709) : (index) -> i32
    %3762 = "llvm.insertvalue"(%3760, %3761) <{"position" = array<i64: 3, 3>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3763 = "builtin.unrealized_conversion_cast"(%3762) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>) -> memref<1x17x17x32xi8>
    %3764 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %3765 = "arith.constant"() <{"value" = 3 : index}> : () -> index
    %3766 = "arith.constant"() <{"value" = 3 : index}> : () -> index
    %3767 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %3768 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %3769 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %3770 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %3771 = "arith.constant"() <{"value" = 3 : index}> : () -> index
    %3772 = "arith.constant"() <{"value" = 3 : index}> : () -> index
    %3773 = "arith.constant"() <{"value" = 4 : index}> : () -> index
    %3774 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %3775 = "arith.constant"() <{"value" = 2304 : index}> : () -> index
    %3776 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %3777 = "arith.constant"() <{"value" = 576 : index}> : () -> index
    %3778 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %3779 = "arith.constant"() <{"value" = 192 : index}> : () -> index
    %3780 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %3781 = "arith.constant"() <{"value" = 2304 : index}> : () -> index
    %3782 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %3783 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %3784 = "arith.subi"(%3769, %3782) : (index, index) -> index
    %3785 = "arith.muli"(%3784, %3781) : (index, index) -> index
    %3786 = "arith.addi"(%3783, %3785) : (index, index) -> index
    %3787 = "arith.subi"(%3770, %3782) : (index, index) -> index
    %3788 = "arith.muli"(%3787, %3780) : (index, index) -> index
    %3789 = "arith.addi"(%3786, %3788) : (index, index) -> index
    %3790 = "arith.subi"(%3771, %3782) : (index, index) -> index
    %3791 = "arith.muli"(%3790, %3779) : (index, index) -> index
    %3792 = "arith.addi"(%3789, %3791) : (index, index) -> index
    %3793 = "arith.subi"(%3772, %3782) : (index, index) -> index
    %3794 = "arith.muli"(%3793, %3778) : (index, index) -> index
    %3795 = "arith.addi"(%3792, %3794) : (index, index) -> index
    %3796 = "arith.subi"(%3773, %3782) : (index, index) -> index
    %3797 = "arith.muli"(%3796, %3777) : (index, index) -> index
    %3798 = "arith.addi"(%3795, %3797) : (index, index) -> index
    %3799 = "arith.subi"(%3774, %3782) : (index, index) -> index
    %3800 = "arith.muli"(%3799, %3776) : (index, index) -> index
    %3801 = "arith.addi"(%3798, %3800) : (index, index) -> index
    %3802 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %3803 = "arith.addi"(%3801, %3802) : (index, index) -> index
    %3804 = "arith.muli"(%3782, %3803) : (index, index) -> index
    %3805 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %3806 = "arith.muli"(%3805, %3802) : (index, index) -> index
    %3807 = "arith.addi"(%3804, %3806) : (index, index) -> index
    %3808 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %3809 = "func.call"(%3807, %3808) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %3810 = "llvm.load"(%3809) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %3811 = "llvm.extractvalue"(%3810) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %3812 = "llvm.extractvalue"(%3810) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %3813 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3814 = "llvm.insertvalue"(%3813, %3811) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3815 = "llvm.insertvalue"(%3814, %3812) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3816 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %3817 = "llvm.insertvalue"(%3815, %3816) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3818 = "builtin.unrealized_conversion_cast"(%3764) : (index) -> i32
    %3819 = "llvm.insertvalue"(%3817, %3818) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3820 = "builtin.unrealized_conversion_cast"(%3765) : (index) -> i32
    %3821 = "llvm.insertvalue"(%3819, %3820) <{"position" = array<i64: 3, 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3822 = "builtin.unrealized_conversion_cast"(%3766) : (index) -> i32
    %3823 = "llvm.insertvalue"(%3821, %3822) <{"position" = array<i64: 3, 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3824 = "builtin.unrealized_conversion_cast"(%3767) : (index) -> i32
    %3825 = "llvm.insertvalue"(%3823, %3824) <{"position" = array<i64: 3, 3>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3826 = "builtin.unrealized_conversion_cast"(%3825) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>) -> memref<64x3x3x32xi8>
    %3827 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %3828 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %3829 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %3830 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %3831 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %3832 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %3833 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %3834 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %3835 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %3836 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %3837 = "arith.constant"() <{"value" = 4096 : index}> : () -> index
    %3838 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %3839 = "arith.constant"() <{"value" = 512 : index}> : () -> index
    %3840 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %3841 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %3842 = "arith.constant"() <{"value" = 4096 : index}> : () -> index
    %3843 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %3844 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %3845 = "arith.subi"(%3832, %3843) : (index, index) -> index
    %3846 = "arith.muli"(%3845, %3842) : (index, index) -> index
    %3847 = "arith.addi"(%3844, %3846) : (index, index) -> index
    %3848 = "arith.subi"(%3833, %3843) : (index, index) -> index
    %3849 = "arith.muli"(%3848, %3841) : (index, index) -> index
    %3850 = "arith.addi"(%3847, %3849) : (index, index) -> index
    %3851 = "arith.subi"(%3834, %3843) : (index, index) -> index
    %3852 = "arith.muli"(%3851, %3840) : (index, index) -> index
    %3853 = "arith.addi"(%3850, %3852) : (index, index) -> index
    %3854 = "arith.subi"(%3835, %3843) : (index, index) -> index
    %3855 = "arith.muli"(%3854, %3839) : (index, index) -> index
    %3856 = "arith.addi"(%3853, %3855) : (index, index) -> index
    %3857 = "arith.subi"(%3836, %3843) : (index, index) -> index
    %3858 = "arith.muli"(%3857, %3838) : (index, index) -> index
    %3859 = "arith.addi"(%3856, %3858) : (index, index) -> index
    %3860 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %3861 = "arith.addi"(%3859, %3860) : (index, index) -> index
    %3862 = "arith.muli"(%3843, %3861) : (index, index) -> index
    %3863 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %3864 = "arith.muli"(%3863, %3860) : (index, index) -> index
    %3865 = "arith.addi"(%3862, %3864) : (index, index) -> index
    %3866 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %3867 = "func.call"(%3865, %3866) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %3868 = "llvm.load"(%3867) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %3869 = "llvm.extractvalue"(%3868) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %3870 = "llvm.extractvalue"(%3868) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %3871 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3872 = "llvm.insertvalue"(%3871, %3869) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3873 = "llvm.insertvalue"(%3872, %3870) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3874 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %3875 = "llvm.insertvalue"(%3873, %3874) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3876 = "builtin.unrealized_conversion_cast"(%3827) : (index) -> i32
    %3877 = "llvm.insertvalue"(%3875, %3876) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3878 = "builtin.unrealized_conversion_cast"(%3828) : (index) -> i32
    %3879 = "llvm.insertvalue"(%3877, %3878) <{"position" = array<i64: 3, 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3880 = "builtin.unrealized_conversion_cast"(%3829) : (index) -> i32
    %3881 = "llvm.insertvalue"(%3879, %3880) <{"position" = array<i64: 3, 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3882 = "builtin.unrealized_conversion_cast"(%3830) : (index) -> i32
    %3883 = "llvm.insertvalue"(%3881, %3882) <{"position" = array<i64: 3, 3>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %3884 = "builtin.unrealized_conversion_cast"(%3883) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>) -> memref<1x8x8x64xi8>
    "scf.if"(%6) ({
      %3885 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %3886 = "memref.dim"(%3687, %3885) : (memref<64x3x3x32xi8>, index) -> index
      %3887 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %3888 = "memref.dim"(%3687, %3887) : (memref<64x3x3x32xi8>, index) -> index
      %3889 = "arith.muli"(%3886, %3888) : (index, index) -> index
      %3890 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %3891 = "memref.dim"(%3687, %3890) : (memref<64x3x3x32xi8>, index) -> index
      %3892 = "arith.muli"(%3889, %3891) : (index, index) -> index
      %3893 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %3894 = "memref.dim"(%3687, %3893) : (memref<64x3x3x32xi8>, index) -> index
      %3895 = "arith.muli"(%3892, %3894) : (index, index) -> index
      %3896 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %3897 = "arith.muli"(%3895, %3896) : (index, index) -> index
      %3898 = "memref.extract_aligned_pointer_as_index"(%3687) : (memref<64x3x3x32xi8>) -> index
      %3899 = "memref.extract_aligned_pointer_as_index"(%3826) : (memref<64x3x3x32xi8>) -> index
      "func.call"(%3898, %3899, %3897) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      %3900 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %3901 = "memref.dim"(%3670, %3900) : (memref<1x17x17x32xi8>, index) -> index
      %3902 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %3903 = "memref.dim"(%3670, %3902) : (memref<1x17x17x32xi8>, index) -> index
      %3904 = "arith.muli"(%3901, %3903) : (index, index) -> index
      %3905 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %3906 = "memref.dim"(%3670, %3905) : (memref<1x17x17x32xi8>, index) -> index
      %3907 = "arith.muli"(%3904, %3906) : (index, index) -> index
      %3908 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %3909 = "memref.dim"(%3670, %3908) : (memref<1x17x17x32xi8>, index) -> index
      %3910 = "arith.muli"(%3907, %3909) : (index, index) -> index
      %3911 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %3912 = "arith.muli"(%3910, %3911) : (index, index) -> index
      %3913 = "memref.extract_aligned_pointer_as_index"(%3670) : (memref<1x17x17x32xi8>) -> index
      %3914 = "memref.extract_aligned_pointer_as_index"(%3763) : (memref<1x17x17x32xi8>) -> index
      "func.call"(%3913, %3914, %3912) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      %3915 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %3916 = "memref.dim"(%3688, %3915) : (memref<64xi32>, index) -> index
      %3917 = "arith.constant"() <{"value" = 4 : index}> : () -> index
      %3918 = "arith.muli"(%3916, %3917) : (index, index) -> index
      %3919 = "memref.extract_aligned_pointer_as_index"(%3688) : (memref<64xi32>) -> index
      %3920 = "memref.extract_aligned_pointer_as_index"(%3705) : (memref<64xi32>) -> index
      "func.call"(%3919, %3920, %3918) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_cluster_hw_barrier}> : () -> ()
    "scf.if"(%4) ({
      %3921 = "memref.extract_aligned_pointer_as_index"(%3763) : (memref<1x17x17x32xi8>) -> index
      %3922 = "memref.extract_aligned_pointer_as_index"(%3826) : (memref<64x3x3x32xi8>) -> index
      %3923 = "memref.extract_aligned_pointer_as_index"(%3884) : (memref<1x8x8x64xi8>) -> index
      %3924 = "memref.extract_aligned_pointer_as_index"(%3705) : (memref<64xi32>) -> index
      %3925 = "memref.extract_aligned_pointer_as_index"(%3705) : (memref<64xi32>) -> index
      %3926 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3927 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %3928 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %3929 = "arith.constant"() <{"value" = 3 : i32}> : () -> i32
      %3930 = "arith.constant"() <{"value" = 3 : i32}> : () -> i32
      %3931 = "arith.constant"() <{"value" = 4 : i32}> : () -> i32
      %3932 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %3933 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %3934 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3935 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %3936 = "arith.constant"() <{"value" = 136 : i32}> : () -> i32
      %3937 = "arith.constant"() <{"value" = 2312 : i32}> : () -> i32
      %3938 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3939 = "arith.constant"() <{"value" = 16 : i32}> : () -> i32
      %3940 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3941 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %3942 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %3943 = "arith.constant"() <{"value" = 288 : i32}> : () -> i32
      %3944 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %3945 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3946 = "arith.constant"() <{"value" = 64 : i32}> : () -> i32
      %3947 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3948 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3949 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %3950 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %3951 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %3952 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %3953 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3954 = "arith.constant"() <{"value" = 512 : i32}> : () -> i32
      %3955 = "arith.constant"() <{"value" = 64 : i32}> : () -> i32
      %3956 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3957 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %3958 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %3959 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %3960 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %3961 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3962 = "arith.constant"() <{"value" = 32 : i32}> : () -> i32
      %3963 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3964 = "arith.constant"() <{"value" = -1 : i32}> : () -> i32
      %3965 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3966 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3967 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3968 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3969 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3970 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3971 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3972 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3973 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %3974 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %3975 = "arith.constant"() <{"value" = 36 : i32}> : () -> i32
      %3976 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %3977 = "arith.constant"() <{"value" = 64 : i32}> : () -> i32
      %3978 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3979 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %3980 = "arith.constant"() <{"value" = 255 : i32}> : () -> i32
      %3981 = "arith.andi"(%10, %3980) : (i32, i32) -> i32
      %3982 = "arith.andi"(%11, %3980) : (i32, i32) -> i32
      %3983 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3984 = "arith.shli"(%3981, %3983) : (i32, i32) -> i32
      %3985 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %3986 = "arith.shli"(%3982, %3985) : (i32, i32) -> i32
      %3987 = "arith.ori"(%3984, %3986) : (i32, i32) -> i32
      %3988 = "arith.constant"() <{"value" = 127 : i32}> : () -> i32
      %3989 = "arith.constant"() <{"value" = -128 : i32}> : () -> i32
      %3990 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %3991 = "arith.constant"() <{"value" = 40 : i32}> : () -> i32
      %3992 = "arith.constant"() <{"value" = 1303824501 : i32}> : () -> i32
      %3993 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %3994 = "arith.constant"() <{"value" = -128 : i32}> : () -> i32
      %3995 = "arith.constant"() <{"value" = 255 : i32}> : () -> i32
      %3996 = "arith.andi"(%3988, %3995) : (i32, i32) -> i32
      %3997 = "arith.andi"(%3989, %3995) : (i32, i32) -> i32
      %3998 = "arith.andi"(%3993, %3995) : (i32, i32) -> i32
      %3999 = "arith.andi"(%3994, %3995) : (i32, i32) -> i32
      %4000 = "arith.constant"() <{"value" = 24 : i32}> : () -> i32
      %4001 = "arith.shli"(%3997, %4000) : (i32, i32) -> i32
      %4002 = "arith.constant"() <{"value" = 16 : i32}> : () -> i32
      %4003 = "arith.shli"(%3996, %4002) : (i32, i32) -> i32
      %4004 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %4005 = "arith.shli"(%3999, %4004) : (i32, i32) -> i32
      %4006 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4007 = "arith.shli"(%3998, %4006) : (i32, i32) -> i32
      %4008 = "arith.ori"(%4001, %4003) : (i32, i32) -> i32
      %4009 = "arith.ori"(%4005, %4007) : (i32, i32) -> i32
      %4010 = "arith.ori"(%4008, %4009) : (i32, i32) -> i32
      %4011 = "arith.constant"() <{"value" = 24 : i32}> : () -> i32
      %4012 = "arith.shli"(%3991, %4011) : (i32, i32) -> i32
      %4013 = "arith.constant"() <{"value" = 16 : i32}> : () -> i32
      %4014 = "arith.shli"(%3991, %4013) : (i32, i32) -> i32
      %4015 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %4016 = "arith.shli"(%3991, %4015) : (i32, i32) -> i32
      %4017 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4018 = "arith.shli"(%3991, %4017) : (i32, i32) -> i32
      %4019 = "arith.ori"(%4012, %4014) : (i32, i32) -> i32
      %4020 = "arith.ori"(%4016, %4018) : (i32, i32) -> i32
      %4021 = "arith.ori"(%4019, %4020) : (i32, i32) -> i32
      %4022 = "arith.constant"() <{"value" = 64 : i32}> : () -> i32
      %4023 = "arith.index_cast"(%3921) : (index) -> i32
      %4024 = "arith.constant"() <{"value" = 960 : i32}> : () -> i32
      "llvm.inline_asm"(%4024, %4023) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4025 = "arith.constant"() <{"value" = 961 : i32}> : () -> i32
      "llvm.inline_asm"(%4025, %3926) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4026 = "arith.constant"() <{"value" = 962 : i32}> : () -> i32
      "llvm.inline_asm"(%4026, %3927) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4027 = "arith.constant"() <{"value" = 963 : i32}> : () -> i32
      "llvm.inline_asm"(%4027, %3928) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4028 = "arith.constant"() <{"value" = 964 : i32}> : () -> i32
      "llvm.inline_asm"(%4028, %3929) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4029 = "arith.constant"() <{"value" = 965 : i32}> : () -> i32
      "llvm.inline_asm"(%4029, %3930) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4030 = "arith.constant"() <{"value" = 966 : i32}> : () -> i32
      "llvm.inline_asm"(%4030, %3931) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4031 = "arith.constant"() <{"value" = 967 : i32}> : () -> i32
      "llvm.inline_asm"(%4031, %3932) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4032 = "arith.constant"() <{"value" = 968 : i32}> : () -> i32
      "llvm.inline_asm"(%4032, %3933) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4033 = "arith.constant"() <{"value" = 969 : i32}> : () -> i32
      "llvm.inline_asm"(%4033, %3934) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4034 = "arith.constant"() <{"value" = 970 : i32}> : () -> i32
      "llvm.inline_asm"(%4034, %3935) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4035 = "arith.constant"() <{"value" = 971 : i32}> : () -> i32
      "llvm.inline_asm"(%4035, %3936) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4036 = "arith.constant"() <{"value" = 972 : i32}> : () -> i32
      "llvm.inline_asm"(%4036, %3937) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4037 = "arith.constant"() <{"value" = 973 : i32}> : () -> i32
      "llvm.inline_asm"(%4037, %3938) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4038 = "arith.constant"() <{"value" = 974 : i32}> : () -> i32
      "llvm.inline_asm"(%4038, %3939) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4039 = "arith.index_cast"(%3922) : (index) -> i32
      %4040 = "arith.constant"() <{"value" = 975 : i32}> : () -> i32
      "llvm.inline_asm"(%4040, %4039) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4041 = "arith.constant"() <{"value" = 976 : i32}> : () -> i32
      "llvm.inline_asm"(%4041, %3940) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4042 = "arith.constant"() <{"value" = 977 : i32}> : () -> i32
      "llvm.inline_asm"(%4042, %3941) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4043 = "arith.constant"() <{"value" = 978 : i32}> : () -> i32
      "llvm.inline_asm"(%4043, %3942) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4044 = "arith.constant"() <{"value" = 979 : i32}> : () -> i32
      "llvm.inline_asm"(%4044, %3943) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4045 = "arith.constant"() <{"value" = 980 : i32}> : () -> i32
      "llvm.inline_asm"(%4045, %3944) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4046 = "arith.constant"() <{"value" = 981 : i32}> : () -> i32
      "llvm.inline_asm"(%4046, %3945) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4047 = "arith.constant"() <{"value" = 982 : i32}> : () -> i32
      "llvm.inline_asm"(%4047, %3946) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4048 = "arith.constant"() <{"value" = 983 : i32}> : () -> i32
      "llvm.inline_asm"(%4048, %3947) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4049 = "arith.index_cast"(%3923) : (index) -> i32
      %4050 = "arith.constant"() <{"value" = 984 : i32}> : () -> i32
      "llvm.inline_asm"(%4050, %4049) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4051 = "arith.constant"() <{"value" = 985 : i32}> : () -> i32
      "llvm.inline_asm"(%4051, %3948) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4052 = "arith.constant"() <{"value" = 986 : i32}> : () -> i32
      "llvm.inline_asm"(%4052, %3949) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4053 = "arith.constant"() <{"value" = 987 : i32}> : () -> i32
      "llvm.inline_asm"(%4053, %3950) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4054 = "arith.constant"() <{"value" = 988 : i32}> : () -> i32
      "llvm.inline_asm"(%4054, %3951) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4055 = "arith.constant"() <{"value" = 989 : i32}> : () -> i32
      "llvm.inline_asm"(%4055, %3952) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4056 = "arith.constant"() <{"value" = 990 : i32}> : () -> i32
      "llvm.inline_asm"(%4056, %3953) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4057 = "arith.constant"() <{"value" = 991 : i32}> : () -> i32
      "llvm.inline_asm"(%4057, %3954) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4058 = "arith.constant"() <{"value" = 992 : i32}> : () -> i32
      "llvm.inline_asm"(%4058, %3955) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4059 = "arith.index_cast"(%3924) : (index) -> i32
      %4060 = "arith.constant"() <{"value" = 993 : i32}> : () -> i32
      "llvm.inline_asm"(%4060, %4059) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4061 = "arith.constant"() <{"value" = 994 : i32}> : () -> i32
      "llvm.inline_asm"(%4061, %3956) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4062 = "arith.constant"() <{"value" = 995 : i32}> : () -> i32
      "llvm.inline_asm"(%4062, %3957) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4063 = "arith.constant"() <{"value" = 996 : i32}> : () -> i32
      "llvm.inline_asm"(%4063, %3958) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4064 = "arith.constant"() <{"value" = 997 : i32}> : () -> i32
      "llvm.inline_asm"(%4064, %3959) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4065 = "arith.constant"() <{"value" = 998 : i32}> : () -> i32
      "llvm.inline_asm"(%4065, %3960) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4066 = "arith.constant"() <{"value" = 999 : i32}> : () -> i32
      "llvm.inline_asm"(%4066, %3961) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4067 = "arith.constant"() <{"value" = 1000 : i32}> : () -> i32
      "llvm.inline_asm"(%4067, %3962) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4068 = "arith.constant"() <{"value" = 1001 : i32}> : () -> i32
      "llvm.inline_asm"(%4068, %3963) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4069 = "arith.constant"() <{"value" = 1002 : i32}> : () -> i32
      "llvm.inline_asm"(%4069, %3964) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4070 = "arith.index_cast"(%3925) : (index) -> i32
      %4071 = "arith.constant"() <{"value" = 1003 : i32}> : () -> i32
      "llvm.inline_asm"(%4071, %4070) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4072 = "arith.constant"() <{"value" = 1004 : i32}> : () -> i32
      "llvm.inline_asm"(%4072, %3965) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4073 = "arith.constant"() <{"value" = 1005 : i32}> : () -> i32
      "llvm.inline_asm"(%4073, %3966) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4074 = "arith.constant"() <{"value" = 1006 : i32}> : () -> i32
      "llvm.inline_asm"(%4074, %3967) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4075 = "arith.constant"() <{"value" = 1007 : i32}> : () -> i32
      "llvm.inline_asm"(%4075, %3968) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4076 = "arith.constant"() <{"value" = 1008 : i32}> : () -> i32
      "llvm.inline_asm"(%4076, %3969) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4077 = "arith.constant"() <{"value" = 1009 : i32}> : () -> i32
      "llvm.inline_asm"(%4077, %3970) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4078 = "arith.constant"() <{"value" = 1010 : i32}> : () -> i32
      "llvm.inline_asm"(%4078, %3971) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4079 = "arith.constant"() <{"value" = 1011 : i32}> : () -> i32
      "llvm.inline_asm"(%4079, %3972) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4080 = "arith.constant"() <{"value" = 1012 : i32}> : () -> i32
      "llvm.inline_asm"(%4080, %3973) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4081 = "arith.constant"() <{"value" = 1013 : i32}> : () -> i32
      "llvm.inline_asm"(%4081, %3974) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4082 = "arith.constant"() <{"value" = 1017 : i32}> : () -> i32
      "llvm.inline_asm"(%4082, %3975) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4083 = "arith.constant"() <{"value" = 1018 : i32}> : () -> i32
      "llvm.inline_asm"(%4083, %3976) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4084 = "arith.constant"() <{"value" = 1019 : i32}> : () -> i32
      "llvm.inline_asm"(%4084, %3977) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4085 = "arith.constant"() <{"value" = 1020 : i32}> : () -> i32
      "llvm.inline_asm"(%4085, %3987) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4086 = "arith.constant"() <{"value" = 1021 : i32}> : () -> i32
      "llvm.inline_asm"(%4086, %4010) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4087 = "arith.constant"() <{"value" = 1022 : i32}> : () -> i32
      "llvm.inline_asm"(%4087, %3990) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4088 = "arith.constant"() <{"value" = 1023 : i32}> : () -> i32
      "llvm.inline_asm"(%4088, %4021) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4089 = "arith.constant"() <{"value" = 1024 : i32}> : () -> i32
      "llvm.inline_asm"(%4089, %4021) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4090 = "arith.constant"() <{"value" = 1025 : i32}> : () -> i32
      "llvm.inline_asm"(%4090, %3992) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4091 = "arith.constant"() <{"value" = 1026 : i32}> : () -> i32
      "llvm.inline_asm"(%4091, %3992) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4092 = "arith.constant"() <{"value" = 1027 : i32}> : () -> i32
      "llvm.inline_asm"(%4092, %3992) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4093 = "arith.constant"() <{"value" = 1028 : i32}> : () -> i32
      "llvm.inline_asm"(%4093, %3992) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4094 = "arith.constant"() <{"value" = 1029 : i32}> : () -> i32
      "llvm.inline_asm"(%4094, %3992) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4095 = "arith.constant"() <{"value" = 1030 : i32}> : () -> i32
      "llvm.inline_asm"(%4095, %3992) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4096 = "arith.constant"() <{"value" = 1031 : i32}> : () -> i32
      "llvm.inline_asm"(%4096, %3992) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4097 = "arith.constant"() <{"value" = 1032 : i32}> : () -> i32
      "llvm.inline_asm"(%4097, %3992) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4098 = "arith.constant"() <{"value" = 1033 : i32}> : () -> i32
      "llvm.inline_asm"(%4098, %4022) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4099 = "arith.constant"() <{"value" = 1034 : i32}> : () -> i32
      "llvm.inline_asm"(%4099, %3978) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4100 = "arith.constant"() <{"value" = 1 : i5}> : () -> i5
      %4101 = "arith.constant"() <{"value" = 1014 : i32}> : () -> i32
      "llvm.inline_asm"(%4101, %4100) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i5) -> ()
      %4102 = "arith.constant"() <{"value" = 1035 : i32}> : () -> i32
      "llvm.inline_asm"(%4102, %4100) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i5) -> ()
      %4103 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4104 = "arith.constant"() <{"value" = 1035 : i32}> : () -> i32
      "llvm.inline_asm"(%4104, %4103) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      "llvm.inline_asm"(%4104, %4103) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4105 = "arith.constant"() <{"value" = 1014 : i32}> : () -> i32
      "llvm.inline_asm"(%4105, %4103) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      "llvm.inline_asm"(%4105, %4103) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_cluster_hw_barrier}> : () -> ()
    "scf.if"(%6) ({
      %4106 = "memref.extract_aligned_pointer_as_index"(%3884) : (memref<1x8x8x64xi8>) -> index
      %4107 = "memref.extract_aligned_pointer_as_index"(%3689) : (memref<1x8x8x64xi8>) -> index
      %4108 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %4109 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %4110 = "memref.dim"(%3884, %4109) : (memref<1x8x8x64xi8>, index) -> index
      %4111 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %4112 = "memref.dim"(%3884, %4111) : (memref<1x8x8x64xi8>, index) -> index
      %4113 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %4114 = "memref.dim"(%3884, %4113) : (memref<1x8x8x64xi8>, index) -> index
      %4115 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %4116 = "memref.dim"(%3884, %4115) : (memref<1x8x8x64xi8>, index) -> index
      %4117 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %4118 = "arith.constant"() <{"value" = 8 : index}> : () -> index
      %4119 = "arith.constant"() <{"value" = 8 : index}> : () -> index
      %4120 = "arith.constant"() <{"value" = 8 : index}> : () -> index
      %4121 = "arith.constant"() <{"value" = 8 : index}> : () -> index
      %4122 = "arith.constant"() <{"value" = 4096 : index}> : () -> index
      %4123 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %4124 = "arith.constant"() <{"value" = 512 : index}> : () -> index
      %4125 = "arith.constant"() <{"value" = 64 : index}> : () -> index
      %4126 = "arith.constant"() <{"value" = 8 : index}> : () -> index
      %4127 = "arith.constant"() <{"value" = 4096 : index}> : () -> index
      %4128 = "arith.constant"() <{"value" = 4096 : index}> : () -> index
      %4129 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %4130 = "arith.constant"() <{"value" = 512 : index}> : () -> index
      %4131 = "arith.constant"() <{"value" = 64 : index}> : () -> index
      %4132 = "arith.constant"() <{"value" = 8 : index}> : () -> index
      %4133 = "arith.constant"() <{"value" = 4096 : index}> : () -> index
      %4134 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %4135 = "memref.dim"(%3884, %4134) : (memref<1x8x8x64xi8>, index) -> index
      %4136 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %4137 = "memref.dim"(%3884, %4136) : (memref<1x8x8x64xi8>, index) -> index
      %4138 = "arith.muli"(%4135, %4137) : (index, index) -> index
      %4139 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %4140 = "memref.dim"(%3884, %4139) : (memref<1x8x8x64xi8>, index) -> index
      %4141 = "arith.muli"(%4138, %4140) : (index, index) -> index
      %4142 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %4143 = "memref.dim"(%3884, %4142) : (memref<1x8x8x64xi8>, index) -> index
      %4144 = "arith.muli"(%4141, %4143) : (index, index) -> index
      %4145 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %4146 = "arith.muli"(%4144, %4145) : (index, index) -> index
      "func.call"(%4106, %4107, %4146) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    %4147 = "memref.get_global"() <{"name" = @_static_const_20}> : () -> memref<1x10x10x64xi8>
    %4148 = "memref.subview"(%4147) <{"operandSegmentSizes" = array<i32: 1, 0, 0, 0>, "static_offsets" = array<i64: 0, 1, 1, 0>, "static_sizes" = array<i64: 1, 8, 8, 64>, "static_strides" = array<i64: 1, 1, 1, 1>}> : (memref<1x10x10x64xi8>) -> memref<1x8x8x64xi8, strided<[6400, 640, 64, 1], offset: 704>>
    "scf.if"(%6) ({
      %4149 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %4150 = "memref.dim"(%3689, %4149) : (memref<1x8x8x64xi8>, index) -> index
      %4151 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %4152 = "memref.dim"(%3689, %4151) : (memref<1x8x8x64xi8>, index) -> index
      %4153 = "arith.muli"(%4150, %4152) : (index, index) -> index
      %4154 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %4155 = "memref.dim"(%3689, %4154) : (memref<1x8x8x64xi8>, index) -> index
      %4156 = "arith.muli"(%4153, %4155) : (index, index) -> index
      %4157 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %4158 = "memref.dim"(%3689, %4157) : (memref<1x8x8x64xi8>, index) -> index
      %4159 = "arith.muli"(%4156, %4158) : (index, index) -> index
      %4160 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %4161 = "arith.muli"(%4159, %4160) : (index, index) -> index
      %4162 = "memref.extract_aligned_pointer_as_index"(%3689) : (memref<1x8x8x64xi8>) -> index
      %4163 = "memref.extract_aligned_pointer_as_index"(%4148) : (memref<1x8x8x64xi8, strided<[6400, 640, 64, 1], offset: 704>>) -> index
      "func.call"(%4162, %4163, %4161) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_clear_l1}> : () -> ()
    %4164 = "memref.get_global"() <{"name" = @__constant_64x3x3x64xi8}> : () -> memref<64x3x3x64xi8>
    %4165 = "memref.get_global"() <{"name" = @__constant_64xi32_0}> : () -> memref<64xi32>
    %4166 = "memref.get_global"() <{"name" = @_static_const_21}> : () -> memref<1x8x8x64xi32>
    %4167 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %4168 = "arith.constant"() <{"value" = 4 : index}> : () -> index
    %4169 = "arith.muli"(%4167, %4168) : (index, index) -> index
    %4170 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %4171 = "func.call"(%4169, %4170) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %4172 = "llvm.load"(%4171) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %4173 = "llvm.extractvalue"(%4172) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %4174 = "llvm.extractvalue"(%4172) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %4175 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %4176 = "llvm.insertvalue"(%4175, %4173) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %4177 = "llvm.insertvalue"(%4176, %4174) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %4178 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %4179 = "llvm.insertvalue"(%4177, %4178) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %4180 = "builtin.unrealized_conversion_cast"(%4167) : (index) -> i32
    %4181 = "llvm.insertvalue"(%4179, %4180) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %4182 = "builtin.unrealized_conversion_cast"(%4181) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>) -> memref<64xi32>
    %4183 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %4184 = "arith.constant"() <{"value" = 10 : index}> : () -> index
    %4185 = "arith.constant"() <{"value" = 10 : index}> : () -> index
    %4186 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %4187 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %4188 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %4189 = "arith.constant"() <{"value" = 10 : index}> : () -> index
    %4190 = "arith.constant"() <{"value" = 10 : index}> : () -> index
    %4191 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %4192 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %4193 = "arith.constant"() <{"value" = 6400 : index}> : () -> index
    %4194 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %4195 = "arith.constant"() <{"value" = 800 : index}> : () -> index
    %4196 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %4197 = "arith.constant"() <{"value" = 80 : index}> : () -> index
    %4198 = "arith.constant"() <{"value" = 6400 : index}> : () -> index
    %4199 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %4200 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %4201 = "arith.subi"(%4188, %4199) : (index, index) -> index
    %4202 = "arith.muli"(%4201, %4198) : (index, index) -> index
    %4203 = "arith.addi"(%4200, %4202) : (index, index) -> index
    %4204 = "arith.subi"(%4189, %4199) : (index, index) -> index
    %4205 = "arith.muli"(%4204, %4197) : (index, index) -> index
    %4206 = "arith.addi"(%4203, %4205) : (index, index) -> index
    %4207 = "arith.subi"(%4190, %4199) : (index, index) -> index
    %4208 = "arith.muli"(%4207, %4196) : (index, index) -> index
    %4209 = "arith.addi"(%4206, %4208) : (index, index) -> index
    %4210 = "arith.subi"(%4191, %4199) : (index, index) -> index
    %4211 = "arith.muli"(%4210, %4195) : (index, index) -> index
    %4212 = "arith.addi"(%4209, %4211) : (index, index) -> index
    %4213 = "arith.subi"(%4192, %4199) : (index, index) -> index
    %4214 = "arith.muli"(%4213, %4194) : (index, index) -> index
    %4215 = "arith.addi"(%4212, %4214) : (index, index) -> index
    %4216 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %4217 = "arith.addi"(%4215, %4216) : (index, index) -> index
    %4218 = "arith.muli"(%4199, %4217) : (index, index) -> index
    %4219 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %4220 = "arith.muli"(%4219, %4216) : (index, index) -> index
    %4221 = "arith.addi"(%4218, %4220) : (index, index) -> index
    %4222 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %4223 = "func.call"(%4221, %4222) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %4224 = "llvm.load"(%4223) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %4225 = "llvm.extractvalue"(%4224) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %4226 = "llvm.extractvalue"(%4224) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %4227 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %4228 = "llvm.insertvalue"(%4227, %4225) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %4229 = "llvm.insertvalue"(%4228, %4226) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %4230 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %4231 = "llvm.insertvalue"(%4229, %4230) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %4232 = "builtin.unrealized_conversion_cast"(%4183) : (index) -> i32
    %4233 = "llvm.insertvalue"(%4231, %4232) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %4234 = "builtin.unrealized_conversion_cast"(%4184) : (index) -> i32
    %4235 = "llvm.insertvalue"(%4233, %4234) <{"position" = array<i64: 3, 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %4236 = "builtin.unrealized_conversion_cast"(%4185) : (index) -> i32
    %4237 = "llvm.insertvalue"(%4235, %4236) <{"position" = array<i64: 3, 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %4238 = "builtin.unrealized_conversion_cast"(%4186) : (index) -> i32
    %4239 = "llvm.insertvalue"(%4237, %4238) <{"position" = array<i64: 3, 3>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %4240 = "builtin.unrealized_conversion_cast"(%4239) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>) -> memref<1x10x10x64xi8>
    %4241 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %4242 = "arith.constant"() <{"value" = 3 : index}> : () -> index
    %4243 = "arith.constant"() <{"value" = 3 : index}> : () -> index
    %4244 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %4245 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %4246 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %4247 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %4248 = "arith.constant"() <{"value" = 3 : index}> : () -> index
    %4249 = "arith.constant"() <{"value" = 3 : index}> : () -> index
    %4250 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %4251 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %4252 = "arith.constant"() <{"value" = 4608 : index}> : () -> index
    %4253 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %4254 = "arith.constant"() <{"value" = 576 : index}> : () -> index
    %4255 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %4256 = "arith.constant"() <{"value" = 192 : index}> : () -> index
    %4257 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %4258 = "arith.constant"() <{"value" = 4608 : index}> : () -> index
    %4259 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %4260 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %4261 = "arith.subi"(%4246, %4259) : (index, index) -> index
    %4262 = "arith.muli"(%4261, %4258) : (index, index) -> index
    %4263 = "arith.addi"(%4260, %4262) : (index, index) -> index
    %4264 = "arith.subi"(%4247, %4259) : (index, index) -> index
    %4265 = "arith.muli"(%4264, %4257) : (index, index) -> index
    %4266 = "arith.addi"(%4263, %4265) : (index, index) -> index
    %4267 = "arith.subi"(%4248, %4259) : (index, index) -> index
    %4268 = "arith.muli"(%4267, %4256) : (index, index) -> index
    %4269 = "arith.addi"(%4266, %4268) : (index, index) -> index
    %4270 = "arith.subi"(%4249, %4259) : (index, index) -> index
    %4271 = "arith.muli"(%4270, %4255) : (index, index) -> index
    %4272 = "arith.addi"(%4269, %4271) : (index, index) -> index
    %4273 = "arith.subi"(%4250, %4259) : (index, index) -> index
    %4274 = "arith.muli"(%4273, %4254) : (index, index) -> index
    %4275 = "arith.addi"(%4272, %4274) : (index, index) -> index
    %4276 = "arith.subi"(%4251, %4259) : (index, index) -> index
    %4277 = "arith.muli"(%4276, %4253) : (index, index) -> index
    %4278 = "arith.addi"(%4275, %4277) : (index, index) -> index
    %4279 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %4280 = "arith.addi"(%4278, %4279) : (index, index) -> index
    %4281 = "arith.muli"(%4259, %4280) : (index, index) -> index
    %4282 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %4283 = "arith.muli"(%4282, %4279) : (index, index) -> index
    %4284 = "arith.addi"(%4281, %4283) : (index, index) -> index
    %4285 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %4286 = "func.call"(%4284, %4285) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %4287 = "llvm.load"(%4286) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %4288 = "llvm.extractvalue"(%4287) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %4289 = "llvm.extractvalue"(%4287) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %4290 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %4291 = "llvm.insertvalue"(%4290, %4288) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %4292 = "llvm.insertvalue"(%4291, %4289) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %4293 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %4294 = "llvm.insertvalue"(%4292, %4293) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %4295 = "builtin.unrealized_conversion_cast"(%4241) : (index) -> i32
    %4296 = "llvm.insertvalue"(%4294, %4295) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %4297 = "builtin.unrealized_conversion_cast"(%4242) : (index) -> i32
    %4298 = "llvm.insertvalue"(%4296, %4297) <{"position" = array<i64: 3, 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %4299 = "builtin.unrealized_conversion_cast"(%4243) : (index) -> i32
    %4300 = "llvm.insertvalue"(%4298, %4299) <{"position" = array<i64: 3, 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %4301 = "builtin.unrealized_conversion_cast"(%4244) : (index) -> i32
    %4302 = "llvm.insertvalue"(%4300, %4301) <{"position" = array<i64: 3, 3>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %4303 = "builtin.unrealized_conversion_cast"(%4302) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>) -> memref<64x3x3x64xi8>
    %4304 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %4305 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %4306 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %4307 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %4308 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %4309 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %4310 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %4311 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %4312 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %4313 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %4314 = "arith.constant"() <{"value" = 16384 : index}> : () -> index
    %4315 = "arith.constant"() <{"value" = 4 : index}> : () -> index
    %4316 = "arith.constant"() <{"value" = 2048 : index}> : () -> index
    %4317 = "arith.constant"() <{"value" = 256 : index}> : () -> index
    %4318 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %4319 = "arith.constant"() <{"value" = 16384 : index}> : () -> index
    %4320 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %4321 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %4322 = "arith.subi"(%4309, %4320) : (index, index) -> index
    %4323 = "arith.muli"(%4322, %4319) : (index, index) -> index
    %4324 = "arith.addi"(%4321, %4323) : (index, index) -> index
    %4325 = "arith.subi"(%4310, %4320) : (index, index) -> index
    %4326 = "arith.muli"(%4325, %4318) : (index, index) -> index
    %4327 = "arith.addi"(%4324, %4326) : (index, index) -> index
    %4328 = "arith.subi"(%4311, %4320) : (index, index) -> index
    %4329 = "arith.muli"(%4328, %4317) : (index, index) -> index
    %4330 = "arith.addi"(%4327, %4329) : (index, index) -> index
    %4331 = "arith.subi"(%4312, %4320) : (index, index) -> index
    %4332 = "arith.muli"(%4331, %4316) : (index, index) -> index
    %4333 = "arith.addi"(%4330, %4332) : (index, index) -> index
    %4334 = "arith.subi"(%4313, %4320) : (index, index) -> index
    %4335 = "arith.muli"(%4334, %4315) : (index, index) -> index
    %4336 = "arith.addi"(%4333, %4335) : (index, index) -> index
    %4337 = "arith.constant"() <{"value" = 4 : index}> : () -> index
    %4338 = "arith.addi"(%4336, %4337) : (index, index) -> index
    %4339 = "arith.muli"(%4320, %4338) : (index, index) -> index
    %4340 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %4341 = "arith.muli"(%4340, %4337) : (index, index) -> index
    %4342 = "arith.addi"(%4339, %4341) : (index, index) -> index
    %4343 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %4344 = "func.call"(%4342, %4343) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %4345 = "llvm.load"(%4344) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %4346 = "llvm.extractvalue"(%4345) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %4347 = "llvm.extractvalue"(%4345) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %4348 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %4349 = "llvm.insertvalue"(%4348, %4346) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %4350 = "llvm.insertvalue"(%4349, %4347) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %4351 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %4352 = "llvm.insertvalue"(%4350, %4351) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %4353 = "builtin.unrealized_conversion_cast"(%4304) : (index) -> i32
    %4354 = "llvm.insertvalue"(%4352, %4353) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %4355 = "builtin.unrealized_conversion_cast"(%4305) : (index) -> i32
    %4356 = "llvm.insertvalue"(%4354, %4355) <{"position" = array<i64: 3, 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %4357 = "builtin.unrealized_conversion_cast"(%4306) : (index) -> i32
    %4358 = "llvm.insertvalue"(%4356, %4357) <{"position" = array<i64: 3, 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %4359 = "builtin.unrealized_conversion_cast"(%4307) : (index) -> i32
    %4360 = "llvm.insertvalue"(%4358, %4359) <{"position" = array<i64: 3, 3>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %4361 = "builtin.unrealized_conversion_cast"(%4360) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>) -> memref<1x8x8x64xi32>
    "scf.if"(%6) ({
      %4362 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %4363 = "memref.dim"(%4164, %4362) : (memref<64x3x3x64xi8>, index) -> index
      %4364 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %4365 = "memref.dim"(%4164, %4364) : (memref<64x3x3x64xi8>, index) -> index
      %4366 = "arith.muli"(%4363, %4365) : (index, index) -> index
      %4367 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %4368 = "memref.dim"(%4164, %4367) : (memref<64x3x3x64xi8>, index) -> index
      %4369 = "arith.muli"(%4366, %4368) : (index, index) -> index
      %4370 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %4371 = "memref.dim"(%4164, %4370) : (memref<64x3x3x64xi8>, index) -> index
      %4372 = "arith.muli"(%4369, %4371) : (index, index) -> index
      %4373 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %4374 = "arith.muli"(%4372, %4373) : (index, index) -> index
      %4375 = "memref.extract_aligned_pointer_as_index"(%4164) : (memref<64x3x3x64xi8>) -> index
      %4376 = "memref.extract_aligned_pointer_as_index"(%4303) : (memref<64x3x3x64xi8>) -> index
      "func.call"(%4375, %4376, %4374) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      %4377 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %4378 = "memref.dim"(%4147, %4377) : (memref<1x10x10x64xi8>, index) -> index
      %4379 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %4380 = "memref.dim"(%4147, %4379) : (memref<1x10x10x64xi8>, index) -> index
      %4381 = "arith.muli"(%4378, %4380) : (index, index) -> index
      %4382 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %4383 = "memref.dim"(%4147, %4382) : (memref<1x10x10x64xi8>, index) -> index
      %4384 = "arith.muli"(%4381, %4383) : (index, index) -> index
      %4385 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %4386 = "memref.dim"(%4147, %4385) : (memref<1x10x10x64xi8>, index) -> index
      %4387 = "arith.muli"(%4384, %4386) : (index, index) -> index
      %4388 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %4389 = "arith.muli"(%4387, %4388) : (index, index) -> index
      %4390 = "memref.extract_aligned_pointer_as_index"(%4147) : (memref<1x10x10x64xi8>) -> index
      %4391 = "memref.extract_aligned_pointer_as_index"(%4240) : (memref<1x10x10x64xi8>) -> index
      "func.call"(%4390, %4391, %4389) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      %4392 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %4393 = "memref.dim"(%4165, %4392) : (memref<64xi32>, index) -> index
      %4394 = "arith.constant"() <{"value" = 4 : index}> : () -> index
      %4395 = "arith.muli"(%4393, %4394) : (index, index) -> index
      %4396 = "memref.extract_aligned_pointer_as_index"(%4165) : (memref<64xi32>) -> index
      %4397 = "memref.extract_aligned_pointer_as_index"(%4182) : (memref<64xi32>) -> index
      "func.call"(%4396, %4397, %4395) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_cluster_hw_barrier}> : () -> ()
    "scf.if"(%4) ({
      %4398 = "memref.extract_aligned_pointer_as_index"(%4240) : (memref<1x10x10x64xi8>) -> index
      %4399 = "memref.extract_aligned_pointer_as_index"(%4303) : (memref<64x3x3x64xi8>) -> index
      %4400 = "memref.extract_aligned_pointer_as_index"(%4182) : (memref<64xi32>) -> index
      %4401 = "memref.extract_aligned_pointer_as_index"(%4182) : (memref<64xi32>) -> index
      %4402 = "memref.extract_aligned_pointer_as_index"(%4361) : (memref<1x8x8x64xi32>) -> index
      %4403 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4404 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %4405 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %4406 = "arith.constant"() <{"value" = 3 : i32}> : () -> i32
      %4407 = "arith.constant"() <{"value" = 3 : i32}> : () -> i32
      %4408 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %4409 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %4410 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %4411 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4412 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %4413 = "arith.constant"() <{"value" = 80 : i32}> : () -> i32
      %4414 = "arith.constant"() <{"value" = 800 : i32}> : () -> i32
      %4415 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4416 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %4417 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4418 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %4419 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %4420 = "arith.constant"() <{"value" = 576 : i32}> : () -> i32
      %4421 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %4422 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4423 = "arith.constant"() <{"value" = 64 : i32}> : () -> i32
      %4424 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4425 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4426 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4427 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4428 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4429 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4430 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4431 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4432 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4433 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4434 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %4435 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %4436 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %4437 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %4438 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4439 = "arith.constant"() <{"value" = 32 : i32}> : () -> i32
      %4440 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4441 = "arith.constant"() <{"value" = -1 : i32}> : () -> i32
      %4442 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4443 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %4444 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %4445 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %4446 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %4447 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4448 = "arith.constant"() <{"value" = 2048 : i32}> : () -> i32
      %4449 = "arith.constant"() <{"value" = 256 : i32}> : () -> i32
      %4450 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %4451 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %4452 = "arith.constant"() <{"value" = 72 : i32}> : () -> i32
      %4453 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %4454 = "arith.constant"() <{"value" = 64 : i32}> : () -> i32
      %4455 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4456 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %4457 = "arith.constant"() <{"value" = 255 : i32}> : () -> i32
      %4458 = "arith.andi"(%10, %4457) : (i32, i32) -> i32
      %4459 = "arith.andi"(%11, %4457) : (i32, i32) -> i32
      %4460 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4461 = "arith.shli"(%4458, %4460) : (i32, i32) -> i32
      %4462 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %4463 = "arith.shli"(%4459, %4462) : (i32, i32) -> i32
      %4464 = "arith.ori"(%4461, %4463) : (i32, i32) -> i32
      %4465 = "arith.index_cast"(%4398) : (index) -> i32
      %4466 = "arith.constant"() <{"value" = 960 : i32}> : () -> i32
      "llvm.inline_asm"(%4466, %4465) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4467 = "arith.constant"() <{"value" = 961 : i32}> : () -> i32
      "llvm.inline_asm"(%4467, %4403) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4468 = "arith.constant"() <{"value" = 962 : i32}> : () -> i32
      "llvm.inline_asm"(%4468, %4404) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4469 = "arith.constant"() <{"value" = 963 : i32}> : () -> i32
      "llvm.inline_asm"(%4469, %4405) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4470 = "arith.constant"() <{"value" = 964 : i32}> : () -> i32
      "llvm.inline_asm"(%4470, %4406) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4471 = "arith.constant"() <{"value" = 965 : i32}> : () -> i32
      "llvm.inline_asm"(%4471, %4407) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4472 = "arith.constant"() <{"value" = 966 : i32}> : () -> i32
      "llvm.inline_asm"(%4472, %4408) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4473 = "arith.constant"() <{"value" = 967 : i32}> : () -> i32
      "llvm.inline_asm"(%4473, %4409) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4474 = "arith.constant"() <{"value" = 968 : i32}> : () -> i32
      "llvm.inline_asm"(%4474, %4410) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4475 = "arith.constant"() <{"value" = 969 : i32}> : () -> i32
      "llvm.inline_asm"(%4475, %4411) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4476 = "arith.constant"() <{"value" = 970 : i32}> : () -> i32
      "llvm.inline_asm"(%4476, %4412) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4477 = "arith.constant"() <{"value" = 971 : i32}> : () -> i32
      "llvm.inline_asm"(%4477, %4413) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4478 = "arith.constant"() <{"value" = 972 : i32}> : () -> i32
      "llvm.inline_asm"(%4478, %4414) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4479 = "arith.constant"() <{"value" = 973 : i32}> : () -> i32
      "llvm.inline_asm"(%4479, %4415) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4480 = "arith.constant"() <{"value" = 974 : i32}> : () -> i32
      "llvm.inline_asm"(%4480, %4416) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4481 = "arith.index_cast"(%4399) : (index) -> i32
      %4482 = "arith.constant"() <{"value" = 975 : i32}> : () -> i32
      "llvm.inline_asm"(%4482, %4481) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4483 = "arith.constant"() <{"value" = 976 : i32}> : () -> i32
      "llvm.inline_asm"(%4483, %4417) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4484 = "arith.constant"() <{"value" = 977 : i32}> : () -> i32
      "llvm.inline_asm"(%4484, %4418) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4485 = "arith.constant"() <{"value" = 978 : i32}> : () -> i32
      "llvm.inline_asm"(%4485, %4419) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4486 = "arith.constant"() <{"value" = 979 : i32}> : () -> i32
      "llvm.inline_asm"(%4486, %4420) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4487 = "arith.constant"() <{"value" = 980 : i32}> : () -> i32
      "llvm.inline_asm"(%4487, %4421) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4488 = "arith.constant"() <{"value" = 981 : i32}> : () -> i32
      "llvm.inline_asm"(%4488, %4422) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4489 = "arith.constant"() <{"value" = 982 : i32}> : () -> i32
      "llvm.inline_asm"(%4489, %4423) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4490 = "arith.constant"() <{"value" = 983 : i32}> : () -> i32
      "llvm.inline_asm"(%4490, %4424) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4491 = "arith.index_cast"(%4400) : (index) -> i32
      %4492 = "arith.constant"() <{"value" = 984 : i32}> : () -> i32
      "llvm.inline_asm"(%4492, %4491) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4493 = "arith.constant"() <{"value" = 985 : i32}> : () -> i32
      "llvm.inline_asm"(%4493, %4425) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4494 = "arith.constant"() <{"value" = 986 : i32}> : () -> i32
      "llvm.inline_asm"(%4494, %4426) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4495 = "arith.constant"() <{"value" = 987 : i32}> : () -> i32
      "llvm.inline_asm"(%4495, %4427) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4496 = "arith.constant"() <{"value" = 988 : i32}> : () -> i32
      "llvm.inline_asm"(%4496, %4428) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4497 = "arith.constant"() <{"value" = 989 : i32}> : () -> i32
      "llvm.inline_asm"(%4497, %4429) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4498 = "arith.constant"() <{"value" = 990 : i32}> : () -> i32
      "llvm.inline_asm"(%4498, %4430) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4499 = "arith.constant"() <{"value" = 991 : i32}> : () -> i32
      "llvm.inline_asm"(%4499, %4431) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4500 = "arith.constant"() <{"value" = 992 : i32}> : () -> i32
      "llvm.inline_asm"(%4500, %4432) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4501 = "arith.index_cast"(%4401) : (index) -> i32
      %4502 = "arith.constant"() <{"value" = 993 : i32}> : () -> i32
      "llvm.inline_asm"(%4502, %4501) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4503 = "arith.constant"() <{"value" = 994 : i32}> : () -> i32
      "llvm.inline_asm"(%4503, %4433) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4504 = "arith.constant"() <{"value" = 995 : i32}> : () -> i32
      "llvm.inline_asm"(%4504, %4434) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4505 = "arith.constant"() <{"value" = 996 : i32}> : () -> i32
      "llvm.inline_asm"(%4505, %4435) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4506 = "arith.constant"() <{"value" = 997 : i32}> : () -> i32
      "llvm.inline_asm"(%4506, %4436) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4507 = "arith.constant"() <{"value" = 998 : i32}> : () -> i32
      "llvm.inline_asm"(%4507, %4437) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4508 = "arith.constant"() <{"value" = 999 : i32}> : () -> i32
      "llvm.inline_asm"(%4508, %4438) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4509 = "arith.constant"() <{"value" = 1000 : i32}> : () -> i32
      "llvm.inline_asm"(%4509, %4439) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4510 = "arith.constant"() <{"value" = 1001 : i32}> : () -> i32
      "llvm.inline_asm"(%4510, %4440) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4511 = "arith.constant"() <{"value" = 1002 : i32}> : () -> i32
      "llvm.inline_asm"(%4511, %4441) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4512 = "arith.index_cast"(%4402) : (index) -> i32
      %4513 = "arith.constant"() <{"value" = 1003 : i32}> : () -> i32
      "llvm.inline_asm"(%4513, %4512) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4514 = "arith.constant"() <{"value" = 1004 : i32}> : () -> i32
      "llvm.inline_asm"(%4514, %4442) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4515 = "arith.constant"() <{"value" = 1005 : i32}> : () -> i32
      "llvm.inline_asm"(%4515, %4443) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4516 = "arith.constant"() <{"value" = 1006 : i32}> : () -> i32
      "llvm.inline_asm"(%4516, %4444) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4517 = "arith.constant"() <{"value" = 1007 : i32}> : () -> i32
      "llvm.inline_asm"(%4517, %4445) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4518 = "arith.constant"() <{"value" = 1008 : i32}> : () -> i32
      "llvm.inline_asm"(%4518, %4446) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4519 = "arith.constant"() <{"value" = 1009 : i32}> : () -> i32
      "llvm.inline_asm"(%4519, %4447) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4520 = "arith.constant"() <{"value" = 1010 : i32}> : () -> i32
      "llvm.inline_asm"(%4520, %4448) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4521 = "arith.constant"() <{"value" = 1011 : i32}> : () -> i32
      "llvm.inline_asm"(%4521, %4449) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4522 = "arith.constant"() <{"value" = 1012 : i32}> : () -> i32
      "llvm.inline_asm"(%4522, %4450) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4523 = "arith.constant"() <{"value" = 1013 : i32}> : () -> i32
      "llvm.inline_asm"(%4523, %4451) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4524 = "arith.constant"() <{"value" = 1017 : i32}> : () -> i32
      "llvm.inline_asm"(%4524, %4452) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4525 = "arith.constant"() <{"value" = 1018 : i32}> : () -> i32
      "llvm.inline_asm"(%4525, %4453) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4526 = "arith.constant"() <{"value" = 1019 : i32}> : () -> i32
      "llvm.inline_asm"(%4526, %4454) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4527 = "arith.constant"() <{"value" = 1020 : i32}> : () -> i32
      "llvm.inline_asm"(%4527, %4464) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4528 = "arith.constant"() <{"value" = 1021 : i32}> : () -> i32
      "llvm.inline_asm"(%4528, %4455) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4529 = "arith.constant"() <{"value" = 1022 : i32}> : () -> i32
      "llvm.inline_asm"(%4529, %4455) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4530 = "arith.constant"() <{"value" = 1023 : i32}> : () -> i32
      "llvm.inline_asm"(%4530, %4455) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4531 = "arith.constant"() <{"value" = 1024 : i32}> : () -> i32
      "llvm.inline_asm"(%4531, %4455) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4532 = "arith.constant"() <{"value" = 1025 : i32}> : () -> i32
      "llvm.inline_asm"(%4532, %4455) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4533 = "arith.constant"() <{"value" = 1026 : i32}> : () -> i32
      "llvm.inline_asm"(%4533, %4455) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4534 = "arith.constant"() <{"value" = 1027 : i32}> : () -> i32
      "llvm.inline_asm"(%4534, %4455) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4535 = "arith.constant"() <{"value" = 1028 : i32}> : () -> i32
      "llvm.inline_asm"(%4535, %4455) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4536 = "arith.constant"() <{"value" = 1029 : i32}> : () -> i32
      "llvm.inline_asm"(%4536, %4455) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4537 = "arith.constant"() <{"value" = 1030 : i32}> : () -> i32
      "llvm.inline_asm"(%4537, %4455) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4538 = "arith.constant"() <{"value" = 1031 : i32}> : () -> i32
      "llvm.inline_asm"(%4538, %4455) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4539 = "arith.constant"() <{"value" = 1032 : i32}> : () -> i32
      "llvm.inline_asm"(%4539, %4455) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4540 = "arith.constant"() <{"value" = 1033 : i32}> : () -> i32
      "llvm.inline_asm"(%4540, %4455) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4541 = "arith.constant"() <{"value" = 1034 : i32}> : () -> i32
      "llvm.inline_asm"(%4541, %4456) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4542 = "arith.constant"() <{"value" = 1 : i5}> : () -> i5
      %4543 = "arith.constant"() <{"value" = 1014 : i32}> : () -> i32
      "llvm.inline_asm"(%4543, %4542) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i5) -> ()
      %4544 = "arith.constant"() <{"value" = 1035 : i32}> : () -> i32
      "llvm.inline_asm"(%4544, %4542) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i5) -> ()
      %4545 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4546 = "arith.constant"() <{"value" = 1035 : i32}> : () -> i32
      "llvm.inline_asm"(%4546, %4545) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      "llvm.inline_asm"(%4546, %4545) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4547 = "arith.constant"() <{"value" = 1014 : i32}> : () -> i32
      "llvm.inline_asm"(%4547, %4545) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      "llvm.inline_asm"(%4547, %4545) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_cluster_hw_barrier}> : () -> ()
    "scf.if"(%6) ({
      %4548 = "memref.extract_aligned_pointer_as_index"(%4361) : (memref<1x8x8x64xi32>) -> index
      %4549 = "memref.extract_aligned_pointer_as_index"(%4166) : (memref<1x8x8x64xi32>) -> index
      %4550 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %4551 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %4552 = "memref.dim"(%4361, %4551) : (memref<1x8x8x64xi32>, index) -> index
      %4553 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %4554 = "memref.dim"(%4361, %4553) : (memref<1x8x8x64xi32>, index) -> index
      %4555 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %4556 = "memref.dim"(%4361, %4555) : (memref<1x8x8x64xi32>, index) -> index
      %4557 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %4558 = "memref.dim"(%4361, %4557) : (memref<1x8x8x64xi32>, index) -> index
      %4559 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %4560 = "arith.constant"() <{"value" = 8 : index}> : () -> index
      %4561 = "arith.constant"() <{"value" = 8 : index}> : () -> index
      %4562 = "arith.constant"() <{"value" = 8 : index}> : () -> index
      %4563 = "arith.constant"() <{"value" = 8 : index}> : () -> index
      %4564 = "arith.constant"() <{"value" = 16384 : index}> : () -> index
      %4565 = "arith.constant"() <{"value" = 4 : index}> : () -> index
      %4566 = "arith.constant"() <{"value" = 2048 : index}> : () -> index
      %4567 = "arith.constant"() <{"value" = 256 : index}> : () -> index
      %4568 = "arith.constant"() <{"value" = 32 : index}> : () -> index
      %4569 = "arith.constant"() <{"value" = 16384 : index}> : () -> index
      %4570 = "arith.constant"() <{"value" = 16384 : index}> : () -> index
      %4571 = "arith.constant"() <{"value" = 4 : index}> : () -> index
      %4572 = "arith.constant"() <{"value" = 2048 : index}> : () -> index
      %4573 = "arith.constant"() <{"value" = 256 : index}> : () -> index
      %4574 = "arith.constant"() <{"value" = 32 : index}> : () -> index
      %4575 = "arith.constant"() <{"value" = 16384 : index}> : () -> index
      %4576 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %4577 = "memref.dim"(%4361, %4576) : (memref<1x8x8x64xi32>, index) -> index
      %4578 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %4579 = "memref.dim"(%4361, %4578) : (memref<1x8x8x64xi32>, index) -> index
      %4580 = "arith.muli"(%4577, %4579) : (index, index) -> index
      %4581 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %4582 = "memref.dim"(%4361, %4581) : (memref<1x8x8x64xi32>, index) -> index
      %4583 = "arith.muli"(%4580, %4582) : (index, index) -> index
      %4584 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %4585 = "memref.dim"(%4361, %4584) : (memref<1x8x8x64xi32>, index) -> index
      %4586 = "arith.muli"(%4583, %4585) : (index, index) -> index
      %4587 = "arith.constant"() <{"value" = 4 : index}> : () -> index
      %4588 = "arith.muli"(%4586, %4587) : (index, index) -> index
      "func.call"(%4548, %4549, %4588) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_clear_l1}> : () -> ()
    %4589 = "memref.get_global"() <{"name" = @__constant_64x1x1x32xi8}> : () -> memref<64x1x1x32xi8>
    %4590 = "memref.get_global"() <{"name" = @__constant_64xi32_1}> : () -> memref<64xi32>
    %4591 = "memref.get_global"() <{"name" = @_static_const_22}> : () -> memref<1x8x8x64xi32>
    %4592 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %4593 = "arith.constant"() <{"value" = 4 : index}> : () -> index
    %4594 = "arith.muli"(%4592, %4593) : (index, index) -> index
    %4595 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %4596 = "func.call"(%4594, %4595) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %4597 = "llvm.load"(%4596) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %4598 = "llvm.extractvalue"(%4597) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %4599 = "llvm.extractvalue"(%4597) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %4600 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %4601 = "llvm.insertvalue"(%4600, %4598) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %4602 = "llvm.insertvalue"(%4601, %4599) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %4603 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %4604 = "llvm.insertvalue"(%4602, %4603) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %4605 = "builtin.unrealized_conversion_cast"(%4592) : (index) -> i32
    %4606 = "llvm.insertvalue"(%4604, %4605) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %4607 = "builtin.unrealized_conversion_cast"(%4606) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>) -> memref<64xi32>
    %4608 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %4609 = "arith.constant"() <{"value" = 16 : index}> : () -> index
    %4610 = "arith.constant"() <{"value" = 16 : index}> : () -> index
    %4611 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %4612 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %4613 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %4614 = "arith.constant"() <{"value" = 16 : index}> : () -> index
    %4615 = "arith.constant"() <{"value" = 16 : index}> : () -> index
    %4616 = "arith.constant"() <{"value" = 4 : index}> : () -> index
    %4617 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %4618 = "arith.constant"() <{"value" = 8192 : index}> : () -> index
    %4619 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %4620 = "arith.constant"() <{"value" = 2048 : index}> : () -> index
    %4621 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %4622 = "arith.constant"() <{"value" = 128 : index}> : () -> index
    %4623 = "arith.constant"() <{"value" = 8192 : index}> : () -> index
    %4624 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %4625 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %4626 = "arith.subi"(%4613, %4624) : (index, index) -> index
    %4627 = "arith.muli"(%4626, %4623) : (index, index) -> index
    %4628 = "arith.addi"(%4625, %4627) : (index, index) -> index
    %4629 = "arith.subi"(%4614, %4624) : (index, index) -> index
    %4630 = "arith.muli"(%4629, %4622) : (index, index) -> index
    %4631 = "arith.addi"(%4628, %4630) : (index, index) -> index
    %4632 = "arith.subi"(%4615, %4624) : (index, index) -> index
    %4633 = "arith.muli"(%4632, %4621) : (index, index) -> index
    %4634 = "arith.addi"(%4631, %4633) : (index, index) -> index
    %4635 = "arith.subi"(%4616, %4624) : (index, index) -> index
    %4636 = "arith.muli"(%4635, %4620) : (index, index) -> index
    %4637 = "arith.addi"(%4634, %4636) : (index, index) -> index
    %4638 = "arith.subi"(%4617, %4624) : (index, index) -> index
    %4639 = "arith.muli"(%4638, %4619) : (index, index) -> index
    %4640 = "arith.addi"(%4637, %4639) : (index, index) -> index
    %4641 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %4642 = "arith.addi"(%4640, %4641) : (index, index) -> index
    %4643 = "arith.muli"(%4624, %4642) : (index, index) -> index
    %4644 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %4645 = "arith.muli"(%4644, %4641) : (index, index) -> index
    %4646 = "arith.addi"(%4643, %4645) : (index, index) -> index
    %4647 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %4648 = "func.call"(%4646, %4647) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %4649 = "llvm.load"(%4648) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %4650 = "llvm.extractvalue"(%4649) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %4651 = "llvm.extractvalue"(%4649) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %4652 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %4653 = "llvm.insertvalue"(%4652, %4650) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %4654 = "llvm.insertvalue"(%4653, %4651) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %4655 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %4656 = "llvm.insertvalue"(%4654, %4655) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %4657 = "builtin.unrealized_conversion_cast"(%4608) : (index) -> i32
    %4658 = "llvm.insertvalue"(%4656, %4657) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %4659 = "builtin.unrealized_conversion_cast"(%4609) : (index) -> i32
    %4660 = "llvm.insertvalue"(%4658, %4659) <{"position" = array<i64: 3, 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %4661 = "builtin.unrealized_conversion_cast"(%4610) : (index) -> i32
    %4662 = "llvm.insertvalue"(%4660, %4661) <{"position" = array<i64: 3, 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %4663 = "builtin.unrealized_conversion_cast"(%4611) : (index) -> i32
    %4664 = "llvm.insertvalue"(%4662, %4663) <{"position" = array<i64: 3, 3>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %4665 = "builtin.unrealized_conversion_cast"(%4664) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>) -> memref<1x16x16x32xi8>
    %4666 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %4667 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %4668 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %4669 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %4670 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %4671 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %4672 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %4673 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %4674 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %4675 = "arith.constant"() <{"value" = 4 : index}> : () -> index
    %4676 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %4677 = "arith.constant"() <{"value" = 256 : index}> : () -> index
    %4678 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %4679 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %4680 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %4681 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %4682 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %4683 = "arith.constant"() <{"value" = 256 : index}> : () -> index
    %4684 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %4685 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %4686 = "arith.subi"(%4671, %4684) : (index, index) -> index
    %4687 = "arith.muli"(%4686, %4683) : (index, index) -> index
    %4688 = "arith.addi"(%4685, %4687) : (index, index) -> index
    %4689 = "arith.subi"(%4672, %4684) : (index, index) -> index
    %4690 = "arith.muli"(%4689, %4682) : (index, index) -> index
    %4691 = "arith.addi"(%4688, %4690) : (index, index) -> index
    %4692 = "arith.subi"(%4673, %4684) : (index, index) -> index
    %4693 = "arith.muli"(%4692, %4681) : (index, index) -> index
    %4694 = "arith.addi"(%4691, %4693) : (index, index) -> index
    %4695 = "arith.subi"(%4674, %4684) : (index, index) -> index
    %4696 = "arith.muli"(%4695, %4680) : (index, index) -> index
    %4697 = "arith.addi"(%4694, %4696) : (index, index) -> index
    %4698 = "arith.subi"(%4675, %4684) : (index, index) -> index
    %4699 = "arith.muli"(%4698, %4679) : (index, index) -> index
    %4700 = "arith.addi"(%4697, %4699) : (index, index) -> index
    %4701 = "arith.subi"(%4676, %4684) : (index, index) -> index
    %4702 = "arith.muli"(%4701, %4678) : (index, index) -> index
    %4703 = "arith.addi"(%4700, %4702) : (index, index) -> index
    %4704 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %4705 = "arith.addi"(%4703, %4704) : (index, index) -> index
    %4706 = "arith.muli"(%4684, %4705) : (index, index) -> index
    %4707 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %4708 = "arith.muli"(%4707, %4704) : (index, index) -> index
    %4709 = "arith.addi"(%4706, %4708) : (index, index) -> index
    %4710 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %4711 = "func.call"(%4709, %4710) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %4712 = "llvm.load"(%4711) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %4713 = "llvm.extractvalue"(%4712) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %4714 = "llvm.extractvalue"(%4712) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %4715 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %4716 = "llvm.insertvalue"(%4715, %4713) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %4717 = "llvm.insertvalue"(%4716, %4714) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %4718 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %4719 = "llvm.insertvalue"(%4717, %4718) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %4720 = "builtin.unrealized_conversion_cast"(%4666) : (index) -> i32
    %4721 = "llvm.insertvalue"(%4719, %4720) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %4722 = "builtin.unrealized_conversion_cast"(%4667) : (index) -> i32
    %4723 = "llvm.insertvalue"(%4721, %4722) <{"position" = array<i64: 3, 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %4724 = "builtin.unrealized_conversion_cast"(%4668) : (index) -> i32
    %4725 = "llvm.insertvalue"(%4723, %4724) <{"position" = array<i64: 3, 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %4726 = "builtin.unrealized_conversion_cast"(%4669) : (index) -> i32
    %4727 = "llvm.insertvalue"(%4725, %4726) <{"position" = array<i64: 3, 3>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %4728 = "builtin.unrealized_conversion_cast"(%4727) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>) -> memref<64x1x1x32xi8>
    %4729 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %4730 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %4731 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %4732 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %4733 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %4734 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %4735 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %4736 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %4737 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %4738 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %4739 = "arith.constant"() <{"value" = 16384 : index}> : () -> index
    %4740 = "arith.constant"() <{"value" = 4 : index}> : () -> index
    %4741 = "arith.constant"() <{"value" = 2048 : index}> : () -> index
    %4742 = "arith.constant"() <{"value" = 256 : index}> : () -> index
    %4743 = "arith.constant"() <{"value" = 32 : index}> : () -> index
    %4744 = "arith.constant"() <{"value" = 16384 : index}> : () -> index
    %4745 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %4746 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %4747 = "arith.subi"(%4734, %4745) : (index, index) -> index
    %4748 = "arith.muli"(%4747, %4744) : (index, index) -> index
    %4749 = "arith.addi"(%4746, %4748) : (index, index) -> index
    %4750 = "arith.subi"(%4735, %4745) : (index, index) -> index
    %4751 = "arith.muli"(%4750, %4743) : (index, index) -> index
    %4752 = "arith.addi"(%4749, %4751) : (index, index) -> index
    %4753 = "arith.subi"(%4736, %4745) : (index, index) -> index
    %4754 = "arith.muli"(%4753, %4742) : (index, index) -> index
    %4755 = "arith.addi"(%4752, %4754) : (index, index) -> index
    %4756 = "arith.subi"(%4737, %4745) : (index, index) -> index
    %4757 = "arith.muli"(%4756, %4741) : (index, index) -> index
    %4758 = "arith.addi"(%4755, %4757) : (index, index) -> index
    %4759 = "arith.subi"(%4738, %4745) : (index, index) -> index
    %4760 = "arith.muli"(%4759, %4740) : (index, index) -> index
    %4761 = "arith.addi"(%4758, %4760) : (index, index) -> index
    %4762 = "arith.constant"() <{"value" = 4 : index}> : () -> index
    %4763 = "arith.addi"(%4761, %4762) : (index, index) -> index
    %4764 = "arith.muli"(%4745, %4763) : (index, index) -> index
    %4765 = "arith.constant"() <{"value" = 0 : index}> : () -> index
    %4766 = "arith.muli"(%4765, %4762) : (index, index) -> index
    %4767 = "arith.addi"(%4764, %4766) : (index, index) -> index
    %4768 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %4769 = "func.call"(%4767, %4768) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %4770 = "llvm.load"(%4769) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %4771 = "llvm.extractvalue"(%4770) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %4772 = "llvm.extractvalue"(%4770) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %4773 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %4774 = "llvm.insertvalue"(%4773, %4771) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %4775 = "llvm.insertvalue"(%4774, %4772) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %4776 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %4777 = "llvm.insertvalue"(%4775, %4776) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %4778 = "builtin.unrealized_conversion_cast"(%4729) : (index) -> i32
    %4779 = "llvm.insertvalue"(%4777, %4778) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %4780 = "builtin.unrealized_conversion_cast"(%4730) : (index) -> i32
    %4781 = "llvm.insertvalue"(%4779, %4780) <{"position" = array<i64: 3, 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %4782 = "builtin.unrealized_conversion_cast"(%4731) : (index) -> i32
    %4783 = "llvm.insertvalue"(%4781, %4782) <{"position" = array<i64: 3, 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %4784 = "builtin.unrealized_conversion_cast"(%4732) : (index) -> i32
    %4785 = "llvm.insertvalue"(%4783, %4784) <{"position" = array<i64: 3, 3>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %4786 = "builtin.unrealized_conversion_cast"(%4785) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>) -> memref<1x8x8x64xi32>
    "scf.if"(%6) ({
      %4787 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %4788 = "memref.dim"(%4589, %4787) : (memref<64x1x1x32xi8>, index) -> index
      %4789 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %4790 = "memref.dim"(%4589, %4789) : (memref<64x1x1x32xi8>, index) -> index
      %4791 = "arith.muli"(%4788, %4790) : (index, index) -> index
      %4792 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %4793 = "memref.dim"(%4589, %4792) : (memref<64x1x1x32xi8>, index) -> index
      %4794 = "arith.muli"(%4791, %4793) : (index, index) -> index
      %4795 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %4796 = "memref.dim"(%4589, %4795) : (memref<64x1x1x32xi8>, index) -> index
      %4797 = "arith.muli"(%4794, %4796) : (index, index) -> index
      %4798 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %4799 = "arith.muli"(%4797, %4798) : (index, index) -> index
      %4800 = "memref.extract_aligned_pointer_as_index"(%4589) : (memref<64x1x1x32xi8>) -> index
      %4801 = "memref.extract_aligned_pointer_as_index"(%4728) : (memref<64x1x1x32xi8>) -> index
      "func.call"(%4800, %4801, %4799) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      %4802 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %4803 = "memref.dim"(%3363, %4802) : (memref<1x16x16x32xi8>, index) -> index
      %4804 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %4805 = "memref.dim"(%3363, %4804) : (memref<1x16x16x32xi8>, index) -> index
      %4806 = "arith.muli"(%4803, %4805) : (index, index) -> index
      %4807 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %4808 = "memref.dim"(%3363, %4807) : (memref<1x16x16x32xi8>, index) -> index
      %4809 = "arith.muli"(%4806, %4808) : (index, index) -> index
      %4810 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %4811 = "memref.dim"(%3363, %4810) : (memref<1x16x16x32xi8>, index) -> index
      %4812 = "arith.muli"(%4809, %4811) : (index, index) -> index
      %4813 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %4814 = "arith.muli"(%4812, %4813) : (index, index) -> index
      %4815 = "memref.extract_aligned_pointer_as_index"(%3363) : (memref<1x16x16x32xi8>) -> index
      %4816 = "memref.extract_aligned_pointer_as_index"(%4665) : (memref<1x16x16x32xi8>) -> index
      "func.call"(%4815, %4816, %4814) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      %4817 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %4818 = "memref.dim"(%4590, %4817) : (memref<64xi32>, index) -> index
      %4819 = "arith.constant"() <{"value" = 4 : index}> : () -> index
      %4820 = "arith.muli"(%4818, %4819) : (index, index) -> index
      %4821 = "memref.extract_aligned_pointer_as_index"(%4590) : (memref<64xi32>) -> index
      %4822 = "memref.extract_aligned_pointer_as_index"(%4607) : (memref<64xi32>) -> index
      "func.call"(%4821, %4822, %4820) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_cluster_hw_barrier}> : () -> ()
    "scf.if"(%4) ({
      %4823 = "memref.extract_aligned_pointer_as_index"(%4665) : (memref<1x16x16x32xi8>) -> index
      %4824 = "memref.extract_aligned_pointer_as_index"(%4728) : (memref<64x1x1x32xi8>) -> index
      %4825 = "memref.extract_aligned_pointer_as_index"(%4786) : (memref<1x8x8x64xi32>) -> index
      %4826 = "memref.extract_aligned_pointer_as_index"(%4607) : (memref<64xi32>) -> index
      %4827 = "memref.extract_aligned_pointer_as_index"(%4607) : (memref<64xi32>) -> index
      %4828 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4829 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %4830 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %4831 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %4832 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %4833 = "arith.constant"() <{"value" = 4 : i32}> : () -> i32
      %4834 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %4835 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %4836 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4837 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4838 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4839 = "arith.constant"() <{"value" = 2048 : i32}> : () -> i32
      %4840 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4841 = "arith.constant"() <{"value" = 16 : i32}> : () -> i32
      %4842 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4843 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %4844 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %4845 = "arith.constant"() <{"value" = 32 : i32}> : () -> i32
      %4846 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %4847 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4848 = "arith.constant"() <{"value" = 64 : i32}> : () -> i32
      %4849 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4850 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4851 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %4852 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %4853 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %4854 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %4855 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4856 = "arith.constant"() <{"value" = 2048 : i32}> : () -> i32
      %4857 = "arith.constant"() <{"value" = 256 : i32}> : () -> i32
      %4858 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4859 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %4860 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %4861 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %4862 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %4863 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4864 = "arith.constant"() <{"value" = 32 : i32}> : () -> i32
      %4865 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4866 = "arith.constant"() <{"value" = -1 : i32}> : () -> i32
      %4867 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4868 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4869 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4870 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4871 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4872 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4873 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4874 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4875 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %4876 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %4877 = "arith.constant"() <{"value" = 4 : i32}> : () -> i32
      %4878 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %4879 = "arith.constant"() <{"value" = 64 : i32}> : () -> i32
      %4880 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4881 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %4882 = "arith.constant"() <{"value" = 255 : i32}> : () -> i32
      %4883 = "arith.andi"(%10, %4882) : (i32, i32) -> i32
      %4884 = "arith.andi"(%11, %4882) : (i32, i32) -> i32
      %4885 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4886 = "arith.shli"(%4883, %4885) : (i32, i32) -> i32
      %4887 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %4888 = "arith.shli"(%4884, %4887) : (i32, i32) -> i32
      %4889 = "arith.ori"(%4886, %4888) : (i32, i32) -> i32
      %4890 = "arith.constant"() <{"value" = 127 : i32}> : () -> i32
      %4891 = "arith.constant"() <{"value" = -128 : i32}> : () -> i32
      %4892 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %4893 = "arith.constant"() <{"value" = 33 : i32}> : () -> i32
      %4894 = "arith.constant"() <{"value" = 1657902019 : i32}> : () -> i32
      %4895 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4896 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4897 = "arith.constant"() <{"value" = 255 : i32}> : () -> i32
      %4898 = "arith.andi"(%4890, %4897) : (i32, i32) -> i32
      %4899 = "arith.andi"(%4891, %4897) : (i32, i32) -> i32
      %4900 = "arith.andi"(%4895, %4897) : (i32, i32) -> i32
      %4901 = "arith.andi"(%4896, %4897) : (i32, i32) -> i32
      %4902 = "arith.constant"() <{"value" = 24 : i32}> : () -> i32
      %4903 = "arith.shli"(%4899, %4902) : (i32, i32) -> i32
      %4904 = "arith.constant"() <{"value" = 16 : i32}> : () -> i32
      %4905 = "arith.shli"(%4898, %4904) : (i32, i32) -> i32
      %4906 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %4907 = "arith.shli"(%4901, %4906) : (i32, i32) -> i32
      %4908 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4909 = "arith.shli"(%4900, %4908) : (i32, i32) -> i32
      %4910 = "arith.ori"(%4903, %4905) : (i32, i32) -> i32
      %4911 = "arith.ori"(%4907, %4909) : (i32, i32) -> i32
      %4912 = "arith.ori"(%4910, %4911) : (i32, i32) -> i32
      %4913 = "arith.constant"() <{"value" = 24 : i32}> : () -> i32
      %4914 = "arith.shli"(%4893, %4913) : (i32, i32) -> i32
      %4915 = "arith.constant"() <{"value" = 16 : i32}> : () -> i32
      %4916 = "arith.shli"(%4893, %4915) : (i32, i32) -> i32
      %4917 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %4918 = "arith.shli"(%4893, %4917) : (i32, i32) -> i32
      %4919 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %4920 = "arith.shli"(%4893, %4919) : (i32, i32) -> i32
      %4921 = "arith.ori"(%4914, %4916) : (i32, i32) -> i32
      %4922 = "arith.ori"(%4918, %4920) : (i32, i32) -> i32
      %4923 = "arith.ori"(%4921, %4922) : (i32, i32) -> i32
      %4924 = "arith.constant"() <{"value" = 64 : i32}> : () -> i32
      %4925 = "arith.index_cast"(%4823) : (index) -> i32
      %4926 = "arith.constant"() <{"value" = 960 : i32}> : () -> i32
      "llvm.inline_asm"(%4926, %4925) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4927 = "arith.constant"() <{"value" = 961 : i32}> : () -> i32
      "llvm.inline_asm"(%4927, %4828) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4928 = "arith.constant"() <{"value" = 962 : i32}> : () -> i32
      "llvm.inline_asm"(%4928, %4829) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4929 = "arith.constant"() <{"value" = 963 : i32}> : () -> i32
      "llvm.inline_asm"(%4929, %4830) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4930 = "arith.constant"() <{"value" = 964 : i32}> : () -> i32
      "llvm.inline_asm"(%4930, %4831) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4931 = "arith.constant"() <{"value" = 965 : i32}> : () -> i32
      "llvm.inline_asm"(%4931, %4832) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4932 = "arith.constant"() <{"value" = 966 : i32}> : () -> i32
      "llvm.inline_asm"(%4932, %4833) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4933 = "arith.constant"() <{"value" = 967 : i32}> : () -> i32
      "llvm.inline_asm"(%4933, %4834) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4934 = "arith.constant"() <{"value" = 968 : i32}> : () -> i32
      "llvm.inline_asm"(%4934, %4835) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4935 = "arith.constant"() <{"value" = 969 : i32}> : () -> i32
      "llvm.inline_asm"(%4935, %4836) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4936 = "arith.constant"() <{"value" = 970 : i32}> : () -> i32
      "llvm.inline_asm"(%4936, %4837) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4937 = "arith.constant"() <{"value" = 971 : i32}> : () -> i32
      "llvm.inline_asm"(%4937, %4838) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4938 = "arith.constant"() <{"value" = 972 : i32}> : () -> i32
      "llvm.inline_asm"(%4938, %4839) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4939 = "arith.constant"() <{"value" = 973 : i32}> : () -> i32
      "llvm.inline_asm"(%4939, %4840) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4940 = "arith.constant"() <{"value" = 974 : i32}> : () -> i32
      "llvm.inline_asm"(%4940, %4841) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4941 = "arith.index_cast"(%4824) : (index) -> i32
      %4942 = "arith.constant"() <{"value" = 975 : i32}> : () -> i32
      "llvm.inline_asm"(%4942, %4941) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4943 = "arith.constant"() <{"value" = 976 : i32}> : () -> i32
      "llvm.inline_asm"(%4943, %4842) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4944 = "arith.constant"() <{"value" = 977 : i32}> : () -> i32
      "llvm.inline_asm"(%4944, %4843) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4945 = "arith.constant"() <{"value" = 978 : i32}> : () -> i32
      "llvm.inline_asm"(%4945, %4844) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4946 = "arith.constant"() <{"value" = 979 : i32}> : () -> i32
      "llvm.inline_asm"(%4946, %4845) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4947 = "arith.constant"() <{"value" = 980 : i32}> : () -> i32
      "llvm.inline_asm"(%4947, %4846) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4948 = "arith.constant"() <{"value" = 981 : i32}> : () -> i32
      "llvm.inline_asm"(%4948, %4847) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4949 = "arith.constant"() <{"value" = 982 : i32}> : () -> i32
      "llvm.inline_asm"(%4949, %4848) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4950 = "arith.constant"() <{"value" = 983 : i32}> : () -> i32
      "llvm.inline_asm"(%4950, %4849) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4951 = "arith.index_cast"(%4825) : (index) -> i32
      %4952 = "arith.constant"() <{"value" = 984 : i32}> : () -> i32
      "llvm.inline_asm"(%4952, %4951) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4953 = "arith.constant"() <{"value" = 985 : i32}> : () -> i32
      "llvm.inline_asm"(%4953, %4850) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4954 = "arith.constant"() <{"value" = 986 : i32}> : () -> i32
      "llvm.inline_asm"(%4954, %4851) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4955 = "arith.constant"() <{"value" = 987 : i32}> : () -> i32
      "llvm.inline_asm"(%4955, %4852) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4956 = "arith.constant"() <{"value" = 988 : i32}> : () -> i32
      "llvm.inline_asm"(%4956, %4853) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4957 = "arith.constant"() <{"value" = 989 : i32}> : () -> i32
      "llvm.inline_asm"(%4957, %4854) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4958 = "arith.constant"() <{"value" = 990 : i32}> : () -> i32
      "llvm.inline_asm"(%4958, %4855) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4959 = "arith.constant"() <{"value" = 991 : i32}> : () -> i32
      "llvm.inline_asm"(%4959, %4856) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4960 = "arith.constant"() <{"value" = 992 : i32}> : () -> i32
      "llvm.inline_asm"(%4960, %4857) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4961 = "arith.index_cast"(%4826) : (index) -> i32
      %4962 = "arith.constant"() <{"value" = 993 : i32}> : () -> i32
      "llvm.inline_asm"(%4962, %4961) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4963 = "arith.constant"() <{"value" = 994 : i32}> : () -> i32
      "llvm.inline_asm"(%4963, %4858) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4964 = "arith.constant"() <{"value" = 995 : i32}> : () -> i32
      "llvm.inline_asm"(%4964, %4859) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4965 = "arith.constant"() <{"value" = 996 : i32}> : () -> i32
      "llvm.inline_asm"(%4965, %4860) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4966 = "arith.constant"() <{"value" = 997 : i32}> : () -> i32
      "llvm.inline_asm"(%4966, %4861) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4967 = "arith.constant"() <{"value" = 998 : i32}> : () -> i32
      "llvm.inline_asm"(%4967, %4862) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4968 = "arith.constant"() <{"value" = 999 : i32}> : () -> i32
      "llvm.inline_asm"(%4968, %4863) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4969 = "arith.constant"() <{"value" = 1000 : i32}> : () -> i32
      "llvm.inline_asm"(%4969, %4864) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4970 = "arith.constant"() <{"value" = 1001 : i32}> : () -> i32
      "llvm.inline_asm"(%4970, %4865) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4971 = "arith.constant"() <{"value" = 1002 : i32}> : () -> i32
      "llvm.inline_asm"(%4971, %4866) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4972 = "arith.index_cast"(%4827) : (index) -> i32
      %4973 = "arith.constant"() <{"value" = 1003 : i32}> : () -> i32
      "llvm.inline_asm"(%4973, %4972) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4974 = "arith.constant"() <{"value" = 1004 : i32}> : () -> i32
      "llvm.inline_asm"(%4974, %4867) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4975 = "arith.constant"() <{"value" = 1005 : i32}> : () -> i32
      "llvm.inline_asm"(%4975, %4868) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4976 = "arith.constant"() <{"value" = 1006 : i32}> : () -> i32
      "llvm.inline_asm"(%4976, %4869) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4977 = "arith.constant"() <{"value" = 1007 : i32}> : () -> i32
      "llvm.inline_asm"(%4977, %4870) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4978 = "arith.constant"() <{"value" = 1008 : i32}> : () -> i32
      "llvm.inline_asm"(%4978, %4871) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4979 = "arith.constant"() <{"value" = 1009 : i32}> : () -> i32
      "llvm.inline_asm"(%4979, %4872) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4980 = "arith.constant"() <{"value" = 1010 : i32}> : () -> i32
      "llvm.inline_asm"(%4980, %4873) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4981 = "arith.constant"() <{"value" = 1011 : i32}> : () -> i32
      "llvm.inline_asm"(%4981, %4874) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4982 = "arith.constant"() <{"value" = 1012 : i32}> : () -> i32
      "llvm.inline_asm"(%4982, %4875) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4983 = "arith.constant"() <{"value" = 1013 : i32}> : () -> i32
      "llvm.inline_asm"(%4983, %4876) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4984 = "arith.constant"() <{"value" = 1017 : i32}> : () -> i32
      "llvm.inline_asm"(%4984, %4877) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4985 = "arith.constant"() <{"value" = 1018 : i32}> : () -> i32
      "llvm.inline_asm"(%4985, %4878) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4986 = "arith.constant"() <{"value" = 1019 : i32}> : () -> i32
      "llvm.inline_asm"(%4986, %4879) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4987 = "arith.constant"() <{"value" = 1020 : i32}> : () -> i32
      "llvm.inline_asm"(%4987, %4889) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4988 = "arith.constant"() <{"value" = 1021 : i32}> : () -> i32
      "llvm.inline_asm"(%4988, %4912) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4989 = "arith.constant"() <{"value" = 1022 : i32}> : () -> i32
      "llvm.inline_asm"(%4989, %4892) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4990 = "arith.constant"() <{"value" = 1023 : i32}> : () -> i32
      "llvm.inline_asm"(%4990, %4923) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4991 = "arith.constant"() <{"value" = 1024 : i32}> : () -> i32
      "llvm.inline_asm"(%4991, %4923) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4992 = "arith.constant"() <{"value" = 1025 : i32}> : () -> i32
      "llvm.inline_asm"(%4992, %4894) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4993 = "arith.constant"() <{"value" = 1026 : i32}> : () -> i32
      "llvm.inline_asm"(%4993, %4894) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4994 = "arith.constant"() <{"value" = 1027 : i32}> : () -> i32
      "llvm.inline_asm"(%4994, %4894) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4995 = "arith.constant"() <{"value" = 1028 : i32}> : () -> i32
      "llvm.inline_asm"(%4995, %4894) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4996 = "arith.constant"() <{"value" = 1029 : i32}> : () -> i32
      "llvm.inline_asm"(%4996, %4894) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4997 = "arith.constant"() <{"value" = 1030 : i32}> : () -> i32
      "llvm.inline_asm"(%4997, %4894) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4998 = "arith.constant"() <{"value" = 1031 : i32}> : () -> i32
      "llvm.inline_asm"(%4998, %4894) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %4999 = "arith.constant"() <{"value" = 1032 : i32}> : () -> i32
      "llvm.inline_asm"(%4999, %4894) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5000 = "arith.constant"() <{"value" = 1033 : i32}> : () -> i32
      "llvm.inline_asm"(%5000, %4924) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5001 = "arith.constant"() <{"value" = 1034 : i32}> : () -> i32
      "llvm.inline_asm"(%5001, %4880) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5002 = "arith.constant"() <{"value" = 1 : i5}> : () -> i5
      %5003 = "arith.constant"() <{"value" = 1014 : i32}> : () -> i32
      "llvm.inline_asm"(%5003, %5002) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i5) -> ()
      %5004 = "arith.constant"() <{"value" = 1035 : i32}> : () -> i32
      "llvm.inline_asm"(%5004, %5002) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i5) -> ()
      %5005 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %5006 = "arith.constant"() <{"value" = 1035 : i32}> : () -> i32
      "llvm.inline_asm"(%5006, %5005) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      "llvm.inline_asm"(%5006, %5005) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5007 = "arith.constant"() <{"value" = 1014 : i32}> : () -> i32
      "llvm.inline_asm"(%5007, %5005) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      "llvm.inline_asm"(%5007, %5005) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_cluster_hw_barrier}> : () -> ()
    "scf.if"(%6) ({
      %5008 = "memref.extract_aligned_pointer_as_index"(%4786) : (memref<1x8x8x64xi32>) -> index
      %5009 = "memref.extract_aligned_pointer_as_index"(%4591) : (memref<1x8x8x64xi32>) -> index
      %5010 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %5011 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %5012 = "memref.dim"(%4786, %5011) : (memref<1x8x8x64xi32>, index) -> index
      %5013 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %5014 = "memref.dim"(%4786, %5013) : (memref<1x8x8x64xi32>, index) -> index
      %5015 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %5016 = "memref.dim"(%4786, %5015) : (memref<1x8x8x64xi32>, index) -> index
      %5017 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %5018 = "memref.dim"(%4786, %5017) : (memref<1x8x8x64xi32>, index) -> index
      %5019 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %5020 = "arith.constant"() <{"value" = 8 : index}> : () -> index
      %5021 = "arith.constant"() <{"value" = 8 : index}> : () -> index
      %5022 = "arith.constant"() <{"value" = 8 : index}> : () -> index
      %5023 = "arith.constant"() <{"value" = 8 : index}> : () -> index
      %5024 = "arith.constant"() <{"value" = 16384 : index}> : () -> index
      %5025 = "arith.constant"() <{"value" = 4 : index}> : () -> index
      %5026 = "arith.constant"() <{"value" = 2048 : index}> : () -> index
      %5027 = "arith.constant"() <{"value" = 256 : index}> : () -> index
      %5028 = "arith.constant"() <{"value" = 32 : index}> : () -> index
      %5029 = "arith.constant"() <{"value" = 16384 : index}> : () -> index
      %5030 = "arith.constant"() <{"value" = 16384 : index}> : () -> index
      %5031 = "arith.constant"() <{"value" = 4 : index}> : () -> index
      %5032 = "arith.constant"() <{"value" = 2048 : index}> : () -> index
      %5033 = "arith.constant"() <{"value" = 256 : index}> : () -> index
      %5034 = "arith.constant"() <{"value" = 32 : index}> : () -> index
      %5035 = "arith.constant"() <{"value" = 16384 : index}> : () -> index
      %5036 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %5037 = "memref.dim"(%4786, %5036) : (memref<1x8x8x64xi32>, index) -> index
      %5038 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %5039 = "memref.dim"(%4786, %5038) : (memref<1x8x8x64xi32>, index) -> index
      %5040 = "arith.muli"(%5037, %5039) : (index, index) -> index
      %5041 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %5042 = "memref.dim"(%4786, %5041) : (memref<1x8x8x64xi32>, index) -> index
      %5043 = "arith.muli"(%5040, %5042) : (index, index) -> index
      %5044 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %5045 = "memref.dim"(%4786, %5044) : (memref<1x8x8x64xi32>, index) -> index
      %5046 = "arith.muli"(%5043, %5045) : (index, index) -> index
      %5047 = "arith.constant"() <{"value" = 4 : index}> : () -> index
      %5048 = "arith.muli"(%5046, %5047) : (index, index) -> index
      "func.call"(%5008, %5009, %5048) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_clear_l1}> : () -> ()
    %5049 = "memref.get_global"() <{"name" = @_static_const_23}> : () -> memref<1x8x8x64xi32>
    %5050 = "memref.get_global"() <{"name" = @_static_const_24}> : () -> memref<1x8x8x64xi32>
    %5051 = "memref.get_global"() <{"name" = @_static_const_25}> : () -> memref<1x8x8x64xi8>
    %5052 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %5053 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %5054 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %5055 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %5056 = "arith.constant"() <{"value" = 4 : index}> : () -> index
    %5057 = "arith.muli"(%5052, %5056) : (index, index) -> index
    %5058 = "arith.muli"(%5053, %5057) : (index, index) -> index
    %5059 = "arith.muli"(%5054, %5058) : (index, index) -> index
    %5060 = "arith.muli"(%5055, %5059) : (index, index) -> index
    %5061 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %5062 = "func.call"(%5060, %5061) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %5063 = "llvm.load"(%5062) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %5064 = "llvm.extractvalue"(%5063) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %5065 = "llvm.extractvalue"(%5063) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %5066 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %5067 = "llvm.insertvalue"(%5066, %5064) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %5068 = "llvm.insertvalue"(%5067, %5065) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %5069 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %5070 = "llvm.insertvalue"(%5068, %5069) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %5071 = "builtin.unrealized_conversion_cast"(%5052) : (index) -> i32
    %5072 = "llvm.insertvalue"(%5070, %5071) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %5073 = "builtin.unrealized_conversion_cast"(%5053) : (index) -> i32
    %5074 = "llvm.insertvalue"(%5072, %5073) <{"position" = array<i64: 3, 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %5075 = "builtin.unrealized_conversion_cast"(%5054) : (index) -> i32
    %5076 = "llvm.insertvalue"(%5074, %5075) <{"position" = array<i64: 3, 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %5077 = "builtin.unrealized_conversion_cast"(%5055) : (index) -> i32
    %5078 = "llvm.insertvalue"(%5076, %5077) <{"position" = array<i64: 3, 3>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %5079 = "builtin.unrealized_conversion_cast"(%5078) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>) -> memref<1x8x8x64xi32>
    %5080 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %5081 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %5082 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %5083 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %5084 = "arith.constant"() <{"value" = 4 : index}> : () -> index
    %5085 = "arith.muli"(%5080, %5084) : (index, index) -> index
    %5086 = "arith.muli"(%5081, %5085) : (index, index) -> index
    %5087 = "arith.muli"(%5082, %5086) : (index, index) -> index
    %5088 = "arith.muli"(%5083, %5087) : (index, index) -> index
    %5089 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %5090 = "func.call"(%5088, %5089) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %5091 = "llvm.load"(%5090) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %5092 = "llvm.extractvalue"(%5091) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %5093 = "llvm.extractvalue"(%5091) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %5094 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %5095 = "llvm.insertvalue"(%5094, %5092) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %5096 = "llvm.insertvalue"(%5095, %5093) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %5097 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %5098 = "llvm.insertvalue"(%5096, %5097) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %5099 = "builtin.unrealized_conversion_cast"(%5080) : (index) -> i32
    %5100 = "llvm.insertvalue"(%5098, %5099) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %5101 = "builtin.unrealized_conversion_cast"(%5081) : (index) -> i32
    %5102 = "llvm.insertvalue"(%5100, %5101) <{"position" = array<i64: 3, 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %5103 = "builtin.unrealized_conversion_cast"(%5082) : (index) -> i32
    %5104 = "llvm.insertvalue"(%5102, %5103) <{"position" = array<i64: 3, 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %5105 = "builtin.unrealized_conversion_cast"(%5083) : (index) -> i32
    %5106 = "llvm.insertvalue"(%5104, %5105) <{"position" = array<i64: 3, 3>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %5107 = "builtin.unrealized_conversion_cast"(%5106) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>) -> memref<1x8x8x64xi32>
    %5108 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %5109 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %5110 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %5111 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %5112 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %5113 = "arith.muli"(%5108, %5112) : (index, index) -> index
    %5114 = "arith.muli"(%5109, %5113) : (index, index) -> index
    %5115 = "arith.muli"(%5110, %5114) : (index, index) -> index
    %5116 = "arith.muli"(%5111, %5115) : (index, index) -> index
    %5117 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %5118 = "func.call"(%5116, %5117) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %5119 = "llvm.load"(%5118) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %5120 = "llvm.extractvalue"(%5119) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %5121 = "llvm.extractvalue"(%5119) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %5122 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %5123 = "llvm.insertvalue"(%5122, %5120) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %5124 = "llvm.insertvalue"(%5123, %5121) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %5125 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %5126 = "llvm.insertvalue"(%5124, %5125) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %5127 = "builtin.unrealized_conversion_cast"(%5108) : (index) -> i32
    %5128 = "llvm.insertvalue"(%5126, %5127) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %5129 = "builtin.unrealized_conversion_cast"(%5109) : (index) -> i32
    %5130 = "llvm.insertvalue"(%5128, %5129) <{"position" = array<i64: 3, 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %5131 = "builtin.unrealized_conversion_cast"(%5110) : (index) -> i32
    %5132 = "llvm.insertvalue"(%5130, %5131) <{"position" = array<i64: 3, 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %5133 = "builtin.unrealized_conversion_cast"(%5111) : (index) -> i32
    %5134 = "llvm.insertvalue"(%5132, %5133) <{"position" = array<i64: 3, 3>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %5135 = "builtin.unrealized_conversion_cast"(%5134) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>) -> memref<1x8x8x64xi8>
    "scf.if"(%6) ({
      %5136 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %5137 = "memref.dim"(%5050, %5136) : (memref<1x8x8x64xi32>, index) -> index
      %5138 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %5139 = "memref.dim"(%5050, %5138) : (memref<1x8x8x64xi32>, index) -> index
      %5140 = "arith.muli"(%5137, %5139) : (index, index) -> index
      %5141 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %5142 = "memref.dim"(%5050, %5141) : (memref<1x8x8x64xi32>, index) -> index
      %5143 = "arith.muli"(%5140, %5142) : (index, index) -> index
      %5144 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %5145 = "memref.dim"(%5050, %5144) : (memref<1x8x8x64xi32>, index) -> index
      %5146 = "arith.muli"(%5143, %5145) : (index, index) -> index
      %5147 = "arith.constant"() <{"value" = 4 : index}> : () -> index
      %5148 = "arith.muli"(%5146, %5147) : (index, index) -> index
      %5149 = "memref.extract_aligned_pointer_as_index"(%5050) : (memref<1x8x8x64xi32>) -> index
      %5150 = "memref.extract_aligned_pointer_as_index"(%5107) : (memref<1x8x8x64xi32>) -> index
      "func.call"(%5149, %5150, %5148) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      %5151 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %5152 = "memref.dim"(%5049, %5151) : (memref<1x8x8x64xi32>, index) -> index
      %5153 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %5154 = "memref.dim"(%5049, %5153) : (memref<1x8x8x64xi32>, index) -> index
      %5155 = "arith.muli"(%5152, %5154) : (index, index) -> index
      %5156 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %5157 = "memref.dim"(%5049, %5156) : (memref<1x8x8x64xi32>, index) -> index
      %5158 = "arith.muli"(%5155, %5157) : (index, index) -> index
      %5159 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %5160 = "memref.dim"(%5049, %5159) : (memref<1x8x8x64xi32>, index) -> index
      %5161 = "arith.muli"(%5158, %5160) : (index, index) -> index
      %5162 = "arith.constant"() <{"value" = 4 : index}> : () -> index
      %5163 = "arith.muli"(%5161, %5162) : (index, index) -> index
      %5164 = "memref.extract_aligned_pointer_as_index"(%5049) : (memref<1x8x8x64xi32>) -> index
      %5165 = "memref.extract_aligned_pointer_as_index"(%5079) : (memref<1x8x8x64xi32>) -> index
      "func.call"(%5164, %5165, %5163) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_cluster_hw_barrier}> : () -> ()
    "scf.if"(%4) ({
      %5166 = "memref.extract_aligned_pointer_as_index"(%5079) : (memref<1x8x8x64xi32>) -> index
      %5167 = "memref.extract_aligned_pointer_as_index"(%5107) : (memref<1x8x8x64xi32>) -> index
      %5168 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %5169 = "memref.extract_aligned_pointer_as_index"(%5107) : (memref<1x8x8x64xi32>) -> index
      %5170 = "memref.extract_aligned_pointer_as_index"(%5135) : (memref<1x8x8x64xi8>) -> index
      %5171 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %5172 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %5173 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %5174 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %5175 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %5176 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %5177 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %5178 = "arith.constant"() <{"value" = 64 : i32}> : () -> i32
      %5179 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %5180 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %5181 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %5182 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %5183 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %5184 = "arith.constant"() <{"value" = 32 : i32}> : () -> i32
      %5185 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %5186 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %5187 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %5188 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %5189 = "arith.constant"() <{"value" = 64 : i32}> : () -> i32
      %5190 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %5191 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %5192 = "arith.constant"() <{"value" = 32 : i32}> : () -> i32
      %5193 = "arith.constant"() <{"value" = 268435520 : i32}> : () -> i32
      %5194 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %5195 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %5196 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %5197 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %5198 = "arith.constant"() <{"value" = 64 : i32}> : () -> i32
      %5199 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %5200 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %5201 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %5202 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %5203 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %5204 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %5205 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %5206 = "arith.constant"() <{"value" = 64 : i32}> : () -> i32
      %5207 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %5208 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %5209 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %5210 = "arith.constant"() <{"value" = -1 : i32}> : () -> i32
      %5211 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %5212 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %5213 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %5214 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %5215 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %5216 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %5217 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %5218 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %5219 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %5220 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %5221 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %5222 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %5223 = "arith.constant"() <{"value" = 64 : i32}> : () -> i32
      %5224 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %5225 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %5226 = "arith.constant"() <{"value" = 127 : i32}> : () -> i32
      %5227 = "arith.constant"() <{"value" = -128 : i32}> : () -> i32
      %5228 = "arith.constant"() <{"value" = 1 : i32}> : () -> i32
      %5229 = "arith.constant"() <{"value" = 49 : i32}> : () -> i32
      %5230 = "arith.constant"() <{"value" = 1835721671 : i32}> : () -> i32
      %5231 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %5232 = "arith.constant"() <{"value" = -128 : i32}> : () -> i32
      %5233 = "arith.constant"() <{"value" = 255 : i32}> : () -> i32
      %5234 = "arith.andi"(%5226, %5233) : (i32, i32) -> i32
      %5235 = "arith.andi"(%5227, %5233) : (i32, i32) -> i32
      %5236 = "arith.andi"(%5231, %5233) : (i32, i32) -> i32
      %5237 = "arith.andi"(%5232, %5233) : (i32, i32) -> i32
      %5238 = "arith.constant"() <{"value" = 24 : i32}> : () -> i32
      %5239 = "arith.shli"(%5235, %5238) : (i32, i32) -> i32
      %5240 = "arith.constant"() <{"value" = 16 : i32}> : () -> i32
      %5241 = "arith.shli"(%5234, %5240) : (i32, i32) -> i32
      %5242 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %5243 = "arith.shli"(%5237, %5242) : (i32, i32) -> i32
      %5244 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %5245 = "arith.shli"(%5236, %5244) : (i32, i32) -> i32
      %5246 = "arith.ori"(%5239, %5241) : (i32, i32) -> i32
      %5247 = "arith.ori"(%5243, %5245) : (i32, i32) -> i32
      %5248 = "arith.ori"(%5246, %5247) : (i32, i32) -> i32
      %5249 = "arith.constant"() <{"value" = 24 : i32}> : () -> i32
      %5250 = "arith.shli"(%5229, %5249) : (i32, i32) -> i32
      %5251 = "arith.constant"() <{"value" = 16 : i32}> : () -> i32
      %5252 = "arith.shli"(%5229, %5251) : (i32, i32) -> i32
      %5253 = "arith.constant"() <{"value" = 8 : i32}> : () -> i32
      %5254 = "arith.shli"(%5229, %5253) : (i32, i32) -> i32
      %5255 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %5256 = "arith.shli"(%5229, %5255) : (i32, i32) -> i32
      %5257 = "arith.ori"(%5250, %5252) : (i32, i32) -> i32
      %5258 = "arith.ori"(%5254, %5256) : (i32, i32) -> i32
      %5259 = "arith.ori"(%5257, %5258) : (i32, i32) -> i32
      %5260 = "arith.constant"() <{"value" = 64 : i32}> : () -> i32
      %5261 = "arith.index_cast"(%5166) : (index) -> i32
      %5262 = "arith.constant"() <{"value" = 960 : i32}> : () -> i32
      "llvm.inline_asm"(%5262, %5261) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5263 = "arith.constant"() <{"value" = 961 : i32}> : () -> i32
      "llvm.inline_asm"(%5263, %5171) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5264 = "arith.constant"() <{"value" = 962 : i32}> : () -> i32
      "llvm.inline_asm"(%5264, %5172) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5265 = "arith.constant"() <{"value" = 963 : i32}> : () -> i32
      "llvm.inline_asm"(%5265, %5173) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5266 = "arith.constant"() <{"value" = 964 : i32}> : () -> i32
      "llvm.inline_asm"(%5266, %5174) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5267 = "arith.constant"() <{"value" = 965 : i32}> : () -> i32
      "llvm.inline_asm"(%5267, %5175) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5268 = "arith.constant"() <{"value" = 966 : i32}> : () -> i32
      "llvm.inline_asm"(%5268, %5176) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5269 = "arith.constant"() <{"value" = 967 : i32}> : () -> i32
      "llvm.inline_asm"(%5269, %5177) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5270 = "arith.constant"() <{"value" = 968 : i32}> : () -> i32
      "llvm.inline_asm"(%5270, %5178) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5271 = "arith.constant"() <{"value" = 969 : i32}> : () -> i32
      "llvm.inline_asm"(%5271, %5179) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5272 = "arith.constant"() <{"value" = 970 : i32}> : () -> i32
      "llvm.inline_asm"(%5272, %5180) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5273 = "arith.constant"() <{"value" = 971 : i32}> : () -> i32
      "llvm.inline_asm"(%5273, %5181) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5274 = "arith.constant"() <{"value" = 972 : i32}> : () -> i32
      "llvm.inline_asm"(%5274, %5182) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5275 = "arith.constant"() <{"value" = 973 : i32}> : () -> i32
      "llvm.inline_asm"(%5275, %5183) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5276 = "arith.constant"() <{"value" = 974 : i32}> : () -> i32
      "llvm.inline_asm"(%5276, %5184) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5277 = "arith.index_cast"(%5167) : (index) -> i32
      %5278 = "arith.constant"() <{"value" = 975 : i32}> : () -> i32
      "llvm.inline_asm"(%5278, %5277) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5279 = "arith.constant"() <{"value" = 976 : i32}> : () -> i32
      "llvm.inline_asm"(%5279, %5185) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5280 = "arith.constant"() <{"value" = 977 : i32}> : () -> i32
      "llvm.inline_asm"(%5280, %5186) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5281 = "arith.constant"() <{"value" = 978 : i32}> : () -> i32
      "llvm.inline_asm"(%5281, %5187) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5282 = "arith.constant"() <{"value" = 979 : i32}> : () -> i32
      "llvm.inline_asm"(%5282, %5188) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5283 = "arith.constant"() <{"value" = 980 : i32}> : () -> i32
      "llvm.inline_asm"(%5283, %5189) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5284 = "arith.constant"() <{"value" = 981 : i32}> : () -> i32
      "llvm.inline_asm"(%5284, %5190) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5285 = "arith.constant"() <{"value" = 982 : i32}> : () -> i32
      "llvm.inline_asm"(%5285, %5191) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5286 = "arith.constant"() <{"value" = 983 : i32}> : () -> i32
      "llvm.inline_asm"(%5286, %5192) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5287 = "arith.constant"() <{"value" = 984 : i32}> : () -> i32
      "llvm.inline_asm"(%5287, %5193) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5288 = "arith.constant"() <{"value" = 985 : i32}> : () -> i32
      "llvm.inline_asm"(%5288, %5194) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5289 = "arith.constant"() <{"value" = 986 : i32}> : () -> i32
      "llvm.inline_asm"(%5289, %5195) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5290 = "arith.constant"() <{"value" = 987 : i32}> : () -> i32
      "llvm.inline_asm"(%5290, %5196) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5291 = "arith.constant"() <{"value" = 988 : i32}> : () -> i32
      "llvm.inline_asm"(%5291, %5197) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5292 = "arith.constant"() <{"value" = 989 : i32}> : () -> i32
      "llvm.inline_asm"(%5292, %5198) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5293 = "arith.constant"() <{"value" = 990 : i32}> : () -> i32
      "llvm.inline_asm"(%5293, %5199) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5294 = "arith.constant"() <{"value" = 991 : i32}> : () -> i32
      "llvm.inline_asm"(%5294, %5200) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5295 = "arith.constant"() <{"value" = 992 : i32}> : () -> i32
      "llvm.inline_asm"(%5295, %5201) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5296 = "arith.index_cast"(%5169) : (index) -> i32
      %5297 = "arith.constant"() <{"value" = 993 : i32}> : () -> i32
      "llvm.inline_asm"(%5297, %5296) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5298 = "arith.constant"() <{"value" = 994 : i32}> : () -> i32
      "llvm.inline_asm"(%5298, %5202) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5299 = "arith.constant"() <{"value" = 995 : i32}> : () -> i32
      "llvm.inline_asm"(%5299, %5203) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5300 = "arith.constant"() <{"value" = 996 : i32}> : () -> i32
      "llvm.inline_asm"(%5300, %5204) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5301 = "arith.constant"() <{"value" = 997 : i32}> : () -> i32
      "llvm.inline_asm"(%5301, %5205) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5302 = "arith.constant"() <{"value" = 998 : i32}> : () -> i32
      "llvm.inline_asm"(%5302, %5206) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5303 = "arith.constant"() <{"value" = 999 : i32}> : () -> i32
      "llvm.inline_asm"(%5303, %5207) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5304 = "arith.constant"() <{"value" = 1000 : i32}> : () -> i32
      "llvm.inline_asm"(%5304, %5208) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5305 = "arith.constant"() <{"value" = 1001 : i32}> : () -> i32
      "llvm.inline_asm"(%5305, %5209) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5306 = "arith.constant"() <{"value" = 1002 : i32}> : () -> i32
      "llvm.inline_asm"(%5306, %5210) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5307 = "arith.index_cast"(%5170) : (index) -> i32
      %5308 = "arith.constant"() <{"value" = 1003 : i32}> : () -> i32
      "llvm.inline_asm"(%5308, %5307) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5309 = "arith.constant"() <{"value" = 1004 : i32}> : () -> i32
      "llvm.inline_asm"(%5309, %5211) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5310 = "arith.constant"() <{"value" = 1005 : i32}> : () -> i32
      "llvm.inline_asm"(%5310, %5212) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5311 = "arith.constant"() <{"value" = 1006 : i32}> : () -> i32
      "llvm.inline_asm"(%5311, %5213) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5312 = "arith.constant"() <{"value" = 1007 : i32}> : () -> i32
      "llvm.inline_asm"(%5312, %5214) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5313 = "arith.constant"() <{"value" = 1008 : i32}> : () -> i32
      "llvm.inline_asm"(%5313, %5215) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5314 = "arith.constant"() <{"value" = 1009 : i32}> : () -> i32
      "llvm.inline_asm"(%5314, %5216) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5315 = "arith.constant"() <{"value" = 1010 : i32}> : () -> i32
      "llvm.inline_asm"(%5315, %5217) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5316 = "arith.constant"() <{"value" = 1011 : i32}> : () -> i32
      "llvm.inline_asm"(%5316, %5218) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5317 = "arith.constant"() <{"value" = 1012 : i32}> : () -> i32
      "llvm.inline_asm"(%5317, %5219) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5318 = "arith.constant"() <{"value" = 1013 : i32}> : () -> i32
      "llvm.inline_asm"(%5318, %5220) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5319 = "arith.constant"() <{"value" = 1017 : i32}> : () -> i32
      "llvm.inline_asm"(%5319, %5221) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5320 = "arith.constant"() <{"value" = 1018 : i32}> : () -> i32
      "llvm.inline_asm"(%5320, %5222) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5321 = "arith.constant"() <{"value" = 1019 : i32}> : () -> i32
      "llvm.inline_asm"(%5321, %5223) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5322 = "arith.constant"() <{"value" = 1020 : i32}> : () -> i32
      "llvm.inline_asm"(%5322, %5224) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5323 = "arith.constant"() <{"value" = 1021 : i32}> : () -> i32
      "llvm.inline_asm"(%5323, %5248) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5324 = "arith.constant"() <{"value" = 1022 : i32}> : () -> i32
      "llvm.inline_asm"(%5324, %5228) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5325 = "arith.constant"() <{"value" = 1023 : i32}> : () -> i32
      "llvm.inline_asm"(%5325, %5259) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5326 = "arith.constant"() <{"value" = 1024 : i32}> : () -> i32
      "llvm.inline_asm"(%5326, %5259) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5327 = "arith.constant"() <{"value" = 1025 : i32}> : () -> i32
      "llvm.inline_asm"(%5327, %5230) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5328 = "arith.constant"() <{"value" = 1026 : i32}> : () -> i32
      "llvm.inline_asm"(%5328, %5230) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5329 = "arith.constant"() <{"value" = 1027 : i32}> : () -> i32
      "llvm.inline_asm"(%5329, %5230) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5330 = "arith.constant"() <{"value" = 1028 : i32}> : () -> i32
      "llvm.inline_asm"(%5330, %5230) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5331 = "arith.constant"() <{"value" = 1029 : i32}> : () -> i32
      "llvm.inline_asm"(%5331, %5230) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5332 = "arith.constant"() <{"value" = 1030 : i32}> : () -> i32
      "llvm.inline_asm"(%5332, %5230) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5333 = "arith.constant"() <{"value" = 1031 : i32}> : () -> i32
      "llvm.inline_asm"(%5333, %5230) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5334 = "arith.constant"() <{"value" = 1032 : i32}> : () -> i32
      "llvm.inline_asm"(%5334, %5230) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5335 = "arith.constant"() <{"value" = 1033 : i32}> : () -> i32
      "llvm.inline_asm"(%5335, %5260) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5336 = "arith.constant"() <{"value" = 1034 : i32}> : () -> i32
      "llvm.inline_asm"(%5336, %5224) <{"asm_string" = "csrw $0, $1", "constraints" = "I, rK", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5337 = "arith.constant"() <{"value" = 1 : i5}> : () -> i5
      %5338 = "arith.constant"() <{"value" = 1014 : i32}> : () -> i32
      "llvm.inline_asm"(%5338, %5337) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i5) -> ()
      %5339 = "arith.constant"() <{"value" = 1035 : i32}> : () -> i32
      "llvm.inline_asm"(%5339, %5337) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i5) -> ()
      %5340 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
      %5341 = "arith.constant"() <{"value" = 1035 : i32}> : () -> i32
      "llvm.inline_asm"(%5341, %5340) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      "llvm.inline_asm"(%5341, %5340) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      %5342 = "arith.constant"() <{"value" = 1014 : i32}> : () -> i32
      "llvm.inline_asm"(%5342, %5340) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      "llvm.inline_asm"(%5342, %5340) <{"asm_string" = "csrw $0, $1", "constraints" = "I, K", "asm_dialect" = 0 : i64, "has_side_effects"}> : (i32, i32) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_cluster_hw_barrier}> : () -> ()
    "scf.if"(%6) ({
      %5343 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %5344 = "memref.dim"(%5135, %5343) : (memref<1x8x8x64xi8>, index) -> index
      %5345 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %5346 = "memref.dim"(%5135, %5345) : (memref<1x8x8x64xi8>, index) -> index
      %5347 = "arith.muli"(%5344, %5346) : (index, index) -> index
      %5348 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %5349 = "memref.dim"(%5135, %5348) : (memref<1x8x8x64xi8>, index) -> index
      %5350 = "arith.muli"(%5347, %5349) : (index, index) -> index
      %5351 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %5352 = "memref.dim"(%5135, %5351) : (memref<1x8x8x64xi8>, index) -> index
      %5353 = "arith.muli"(%5350, %5352) : (index, index) -> index
      %5354 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %5355 = "arith.muli"(%5353, %5354) : (index, index) -> index
      %5356 = "memref.extract_aligned_pointer_as_index"(%5135) : (memref<1x8x8x64xi8>) -> index
      %5357 = "memref.extract_aligned_pointer_as_index"(%5051) : (memref<1x8x8x64xi8>) -> index
      "func.call"(%5356, %5357, %5355) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_clear_l1}> : () -> ()
    %5358 = "memref.get_global"() <{"name" = @_static_const_26}> : () -> memref<1x1x1x64xi32>
    %5359 = "memref.get_global"() <{"name" = @_static_const_27}> : () -> memref<8x8xi32>
    %5360 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %5361 = "arith.constant"() <{"value" = 8 : index}> : () -> index
    %5362 = "arith.constant"() <{"value" = 4 : index}> : () -> index
    %5363 = "arith.muli"(%5360, %5362) : (index, index) -> index
    %5364 = "arith.muli"(%5361, %5363) : (index, index) -> index
    %5365 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %5366 = "func.call"(%5364, %5365) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %5367 = "llvm.load"(%5366) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %5368 = "llvm.extractvalue"(%5367) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %5369 = "llvm.extractvalue"(%5367) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %5370 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>
    %5371 = "llvm.insertvalue"(%5370, %5368) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>
    %5372 = "llvm.insertvalue"(%5371, %5369) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>
    %5373 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %5374 = "llvm.insertvalue"(%5372, %5373) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>
    %5375 = "builtin.unrealized_conversion_cast"(%5360) : (index) -> i32
    %5376 = "llvm.insertvalue"(%5374, %5375) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>
    %5377 = "builtin.unrealized_conversion_cast"(%5361) : (index) -> i32
    %5378 = "llvm.insertvalue"(%5376, %5377) <{"position" = array<i64: 3, 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>
    %5379 = "builtin.unrealized_conversion_cast"(%5378) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>) -> memref<8x8xi32>
    %5380 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %5381 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %5382 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %5383 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %5384 = "arith.constant"() <{"value" = 4 : index}> : () -> index
    %5385 = "arith.muli"(%5380, %5384) : (index, index) -> index
    %5386 = "arith.muli"(%5381, %5385) : (index, index) -> index
    %5387 = "arith.muli"(%5382, %5386) : (index, index) -> index
    %5388 = "arith.muli"(%5383, %5387) : (index, index) -> index
    %5389 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %5390 = "func.call"(%5388, %5389) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %5391 = "llvm.load"(%5390) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %5392 = "llvm.extractvalue"(%5391) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %5393 = "llvm.extractvalue"(%5391) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %5394 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %5395 = "llvm.insertvalue"(%5394, %5392) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %5396 = "llvm.insertvalue"(%5395, %5393) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %5397 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %5398 = "llvm.insertvalue"(%5396, %5397) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %5399 = "builtin.unrealized_conversion_cast"(%5380) : (index) -> i32
    %5400 = "llvm.insertvalue"(%5398, %5399) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %5401 = "builtin.unrealized_conversion_cast"(%5381) : (index) -> i32
    %5402 = "llvm.insertvalue"(%5400, %5401) <{"position" = array<i64: 3, 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %5403 = "builtin.unrealized_conversion_cast"(%5382) : (index) -> i32
    %5404 = "llvm.insertvalue"(%5402, %5403) <{"position" = array<i64: 3, 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %5405 = "builtin.unrealized_conversion_cast"(%5383) : (index) -> i32
    %5406 = "llvm.insertvalue"(%5404, %5405) <{"position" = array<i64: 3, 3>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %5407 = "builtin.unrealized_conversion_cast"(%5406) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>) -> memref<1x1x1x64xi32>
    "scf.if"(%6) ({
      %5408 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %5409 = "memref.dim"(%5359, %5408) : (memref<8x8xi32>, index) -> index
      %5410 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %5411 = "memref.dim"(%5359, %5410) : (memref<8x8xi32>, index) -> index
      %5412 = "arith.muli"(%5409, %5411) : (index, index) -> index
      %5413 = "arith.constant"() <{"value" = 4 : index}> : () -> index
      %5414 = "arith.muli"(%5412, %5413) : (index, index) -> index
      %5415 = "memref.extract_aligned_pointer_as_index"(%5359) : (memref<8x8xi32>) -> index
      %5416 = "memref.extract_aligned_pointer_as_index"(%5379) : (memref<8x8xi32>) -> index
      "func.call"(%5415, %5416, %5414) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      %5417 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %5418 = "memref.dim"(%5051, %5417) : (memref<1x8x8x64xi8>, index) -> index
      %5419 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %5420 = "memref.dim"(%5051, %5419) : (memref<1x8x8x64xi8>, index) -> index
      %5421 = "arith.muli"(%5418, %5420) : (index, index) -> index
      %5422 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %5423 = "memref.dim"(%5051, %5422) : (memref<1x8x8x64xi8>, index) -> index
      %5424 = "arith.muli"(%5421, %5423) : (index, index) -> index
      %5425 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %5426 = "memref.dim"(%5051, %5425) : (memref<1x8x8x64xi8>, index) -> index
      %5427 = "arith.muli"(%5424, %5426) : (index, index) -> index
      %5428 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %5429 = "arith.muli"(%5427, %5428) : (index, index) -> index
      %5430 = "memref.extract_aligned_pointer_as_index"(%5051) : (memref<1x8x8x64xi8>) -> index
      %5431 = "memref.extract_aligned_pointer_as_index"(%5135) : (memref<1x8x8x64xi8>) -> index
      "func.call"(%5430, %5431, %5429) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_cluster_hw_barrier}> : () -> ()
    "scf.if"(%4) ({
      "linalg.generic"(%5135, %5379, %5407) <{"indexing_maps" = [affine_map<(d0, d1, d2, d3, d4, d5) -> (d0, ((d1 * 8) + d4), ((d2 * 8) + d5), d3)>, affine_map<(d0, d1, d2, d3, d4, d5) -> (d4, d5)>, affine_map<(d0, d1, d2, d3, d4, d5) -> (d0, d1, d2, d3)>], "iterator_types" = [#linalg.iterator_type<parallel>, #linalg.iterator_type<parallel>, #linalg.iterator_type<parallel>, #linalg.iterator_type<parallel>, #linalg.iterator_type<reduction>, #linalg.iterator_type<reduction>], "operandSegmentSizes" = array<i32: 2, 1>}> ({
      ^1(%arg1 : i8, %arg2 : i32, %arg3 : i32):
        %5432 = "arith.extsi"(%arg1) : (i8) -> i32
        %5433 = "arith.addi"(%arg3, %5432) : (i32, i32) -> i32
        "linalg.yield"(%5433) : (i32) -> ()
      }) : (memref<1x8x8x64xi8>, memref<8x8xi32>, memref<1x1x1x64xi32>) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_cluster_hw_barrier}> : () -> ()
    "scf.if"(%6) ({
      %5434 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %5435 = "memref.dim"(%5407, %5434) : (memref<1x1x1x64xi32>, index) -> index
      %5436 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %5437 = "memref.dim"(%5407, %5436) : (memref<1x1x1x64xi32>, index) -> index
      %5438 = "arith.muli"(%5435, %5437) : (index, index) -> index
      %5439 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %5440 = "memref.dim"(%5407, %5439) : (memref<1x1x1x64xi32>, index) -> index
      %5441 = "arith.muli"(%5438, %5440) : (index, index) -> index
      %5442 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %5443 = "memref.dim"(%5407, %5442) : (memref<1x1x1x64xi32>, index) -> index
      %5444 = "arith.muli"(%5441, %5443) : (index, index) -> index
      %5445 = "arith.constant"() <{"value" = 4 : index}> : () -> index
      %5446 = "arith.muli"(%5444, %5445) : (index, index) -> index
      %5447 = "memref.extract_aligned_pointer_as_index"(%5407) : (memref<1x1x1x64xi32>) -> index
      %5448 = "memref.extract_aligned_pointer_as_index"(%5358) : (memref<1x1x1x64xi32>) -> index
      "func.call"(%5447, %5448, %5446) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_clear_l1}> : () -> ()
    %5449 = "memref.get_global"() <{"name" = @_static_const_28}> : () -> memref<1x1x1x64xi8>
    %5450 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %5451 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %5452 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %5453 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %5454 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %5455 = "arith.muli"(%5450, %5454) : (index, index) -> index
    %5456 = "arith.muli"(%5451, %5455) : (index, index) -> index
    %5457 = "arith.muli"(%5452, %5456) : (index, index) -> index
    %5458 = "arith.muli"(%5453, %5457) : (index, index) -> index
    %5459 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %5460 = "func.call"(%5458, %5459) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %5461 = "llvm.load"(%5460) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %5462 = "llvm.extractvalue"(%5461) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %5463 = "llvm.extractvalue"(%5461) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %5464 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %5465 = "llvm.insertvalue"(%5464, %5462) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %5466 = "llvm.insertvalue"(%5465, %5463) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %5467 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %5468 = "llvm.insertvalue"(%5466, %5467) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %5469 = "builtin.unrealized_conversion_cast"(%5450) : (index) -> i32
    %5470 = "llvm.insertvalue"(%5468, %5469) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %5471 = "builtin.unrealized_conversion_cast"(%5451) : (index) -> i32
    %5472 = "llvm.insertvalue"(%5470, %5471) <{"position" = array<i64: 3, 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %5473 = "builtin.unrealized_conversion_cast"(%5452) : (index) -> i32
    %5474 = "llvm.insertvalue"(%5472, %5473) <{"position" = array<i64: 3, 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %5475 = "builtin.unrealized_conversion_cast"(%5453) : (index) -> i32
    %5476 = "llvm.insertvalue"(%5474, %5475) <{"position" = array<i64: 3, 3>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>
    %5477 = "builtin.unrealized_conversion_cast"(%5476) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<4 x i32>, !llvm.array<4 x i32>)>) -> memref<1x1x1x64xi8>
    "scf.if"(%6) ({
      %5478 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %5479 = "memref.dim"(%5358, %5478) : (memref<1x1x1x64xi32>, index) -> index
      %5480 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %5481 = "memref.dim"(%5358, %5480) : (memref<1x1x1x64xi32>, index) -> index
      %5482 = "arith.muli"(%5479, %5481) : (index, index) -> index
      %5483 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %5484 = "memref.dim"(%5358, %5483) : (memref<1x1x1x64xi32>, index) -> index
      %5485 = "arith.muli"(%5482, %5484) : (index, index) -> index
      %5486 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %5487 = "memref.dim"(%5358, %5486) : (memref<1x1x1x64xi32>, index) -> index
      %5488 = "arith.muli"(%5485, %5487) : (index, index) -> index
      %5489 = "arith.constant"() <{"value" = 4 : index}> : () -> index
      %5490 = "arith.muli"(%5488, %5489) : (index, index) -> index
      %5491 = "memref.extract_aligned_pointer_as_index"(%5358) : (memref<1x1x1x64xi32>) -> index
      %5492 = "memref.extract_aligned_pointer_as_index"(%5407) : (memref<1x1x1x64xi32>) -> index
      "func.call"(%5491, %5492, %5490) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_cluster_hw_barrier}> : () -> ()
    "scf.if"(%4) ({
      "linalg.generic"(%5407, %5477) <{"indexing_maps" = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], "iterator_types" = [#linalg.iterator_type<parallel>, #linalg.iterator_type<parallel>, #linalg.iterator_type<parallel>, #linalg.iterator_type<parallel>], "operandSegmentSizes" = array<i32: 1, 1>}> ({
      ^2(%arg1_1 : i32, %arg2_1 : i8):
        %5493 = "arith.cmpi"(%arg1_1, %10) <{"predicate" = 2 : i64}> : (i32, i32) -> i1
        %5494 = "arith.select"(%5493, %10, %arg1_1) : (i1, i32, i32) -> i32
        %5495 = "arith.cmpi"(%arg1_1, %9) <{"predicate" = 4 : i64}> : (i32, i32) -> i1
        %5496 = "arith.select"(%5495, %9, %5494) : (i1, i32, i32) -> i32
        %5497 = "arith.trunci"(%5496) : (i32) -> i8
        "linalg.yield"(%5497) : (i8) -> ()
      }) : (memref<1x1x1x64xi32>, memref<1x1x1x64xi8>) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_cluster_hw_barrier}> : () -> ()
    "scf.if"(%6) ({
      %5498 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %5499 = "memref.dim"(%5477, %5498) : (memref<1x1x1x64xi8>, index) -> index
      %5500 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %5501 = "memref.dim"(%5477, %5500) : (memref<1x1x1x64xi8>, index) -> index
      %5502 = "arith.muli"(%5499, %5501) : (index, index) -> index
      %5503 = "arith.constant"() <{"value" = 2 : index}> : () -> index
      %5504 = "memref.dim"(%5477, %5503) : (memref<1x1x1x64xi8>, index) -> index
      %5505 = "arith.muli"(%5502, %5504) : (index, index) -> index
      %5506 = "arith.constant"() <{"value" = 3 : index}> : () -> index
      %5507 = "memref.dim"(%5477, %5506) : (memref<1x1x1x64xi8>, index) -> index
      %5508 = "arith.muli"(%5505, %5507) : (index, index) -> index
      %5509 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %5510 = "arith.muli"(%5508, %5509) : (index, index) -> index
      %5511 = "memref.extract_aligned_pointer_as_index"(%5477) : (memref<1x1x1x64xi8>) -> index
      %5512 = "memref.extract_aligned_pointer_as_index"(%5449) : (memref<1x1x1x64xi8>) -> index
      "func.call"(%5511, %5512, %5510) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_cluster_hw_barrier}> : () -> ()
    %5513 = "memref.collapse_shape"(%5449) <{"reassociation" = [[0 : i64, 1 : i64, 2 : i64, 3 : i64]]}> : (memref<1x1x1x64xi8>) -> memref<64xi8>
    %5514 = "memref.cast"(%5513) : (memref<64xi8>) -> memref<?xi8>
    %5515 = "memref.expand_shape"(%5514) <{"reassociation" = [[0 : i64, 1 : i64]]}> : (memref<?xi8>) -> memref<?x64xi8>
    %5516 = "memref.cast"(%5515) : (memref<?x64xi8>) -> memref<1x64xi8>
    "func.call"() <{"callee" = @snax_clear_l1}> : () -> ()
    %5517 = "memref.get_global"() <{"name" = @__constant_64x10xi8}> : () -> memref<64x10xi8>
    %5518 = "memref.get_global"() <{"name" = @_static_const_29}> : () -> memref<1x10xi32>
    %5519 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %5520 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %5521 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %5522 = "arith.muli"(%5519, %5521) : (index, index) -> index
    %5523 = "arith.muli"(%5520, %5522) : (index, index) -> index
    %5524 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %5525 = "func.call"(%5523, %5524) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %5526 = "llvm.load"(%5525) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %5527 = "llvm.extractvalue"(%5526) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %5528 = "llvm.extractvalue"(%5526) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %5529 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>
    %5530 = "llvm.insertvalue"(%5529, %5527) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>
    %5531 = "llvm.insertvalue"(%5530, %5528) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>
    %5532 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %5533 = "llvm.insertvalue"(%5531, %5532) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>
    %5534 = "builtin.unrealized_conversion_cast"(%5519) : (index) -> i32
    %5535 = "llvm.insertvalue"(%5533, %5534) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>
    %5536 = "builtin.unrealized_conversion_cast"(%5520) : (index) -> i32
    %5537 = "llvm.insertvalue"(%5535, %5536) <{"position" = array<i64: 3, 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>
    %5538 = "builtin.unrealized_conversion_cast"(%5537) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>) -> memref<1x64xi8>
    %5539 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %5540 = "arith.constant"() <{"value" = 10 : index}> : () -> index
    %5541 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %5542 = "arith.muli"(%5539, %5541) : (index, index) -> index
    %5543 = "arith.muli"(%5540, %5542) : (index, index) -> index
    %5544 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %5545 = "func.call"(%5543, %5544) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %5546 = "llvm.load"(%5545) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %5547 = "llvm.extractvalue"(%5546) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %5548 = "llvm.extractvalue"(%5546) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %5549 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>
    %5550 = "llvm.insertvalue"(%5549, %5547) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>
    %5551 = "llvm.insertvalue"(%5550, %5548) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>
    %5552 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %5553 = "llvm.insertvalue"(%5551, %5552) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>
    %5554 = "builtin.unrealized_conversion_cast"(%5539) : (index) -> i32
    %5555 = "llvm.insertvalue"(%5553, %5554) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>
    %5556 = "builtin.unrealized_conversion_cast"(%5540) : (index) -> i32
    %5557 = "llvm.insertvalue"(%5555, %5556) <{"position" = array<i64: 3, 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>
    %5558 = "builtin.unrealized_conversion_cast"(%5557) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>) -> memref<64x10xi8>
    %5559 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %5560 = "arith.constant"() <{"value" = 10 : index}> : () -> index
    %5561 = "arith.constant"() <{"value" = 4 : index}> : () -> index
    %5562 = "arith.muli"(%5559, %5561) : (index, index) -> index
    %5563 = "arith.muli"(%5560, %5562) : (index, index) -> index
    %5564 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %5565 = "func.call"(%5563, %5564) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %5566 = "llvm.load"(%5565) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %5567 = "llvm.extractvalue"(%5566) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %5568 = "llvm.extractvalue"(%5566) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %5569 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>
    %5570 = "llvm.insertvalue"(%5569, %5567) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>
    %5571 = "llvm.insertvalue"(%5570, %5568) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>
    %5572 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %5573 = "llvm.insertvalue"(%5571, %5572) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>
    %5574 = "builtin.unrealized_conversion_cast"(%5559) : (index) -> i32
    %5575 = "llvm.insertvalue"(%5573, %5574) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>
    %5576 = "builtin.unrealized_conversion_cast"(%5560) : (index) -> i32
    %5577 = "llvm.insertvalue"(%5575, %5576) <{"position" = array<i64: 3, 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>
    %5578 = "builtin.unrealized_conversion_cast"(%5577) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>) -> memref<1x10xi32>
    "scf.if"(%6) ({
      %5579 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %5580 = "memref.dim"(%5517, %5579) : (memref<64x10xi8>, index) -> index
      %5581 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %5582 = "memref.dim"(%5517, %5581) : (memref<64x10xi8>, index) -> index
      %5583 = "arith.muli"(%5580, %5582) : (index, index) -> index
      %5584 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %5585 = "arith.muli"(%5583, %5584) : (index, index) -> index
      %5586 = "memref.extract_aligned_pointer_as_index"(%5517) : (memref<64x10xi8>) -> index
      %5587 = "memref.extract_aligned_pointer_as_index"(%5558) : (memref<64x10xi8>) -> index
      "func.call"(%5586, %5587, %5585) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      %5588 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %5589 = "memref.dim"(%5516, %5588) : (memref<1x64xi8>, index) -> index
      %5590 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %5591 = "memref.dim"(%5516, %5590) : (memref<1x64xi8>, index) -> index
      %5592 = "arith.muli"(%5589, %5591) : (index, index) -> index
      %5593 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %5594 = "arith.muli"(%5592, %5593) : (index, index) -> index
      %5595 = "memref.extract_aligned_pointer_as_index"(%5516) : (memref<1x64xi8>) -> index
      %5596 = "memref.extract_aligned_pointer_as_index"(%5538) : (memref<1x64xi8>) -> index
      "func.call"(%5595, %5596, %5594) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_cluster_hw_barrier}> : () -> ()
    "scf.if"(%2) ({
      "linalg.generic"(%5538, %5558, %10, %11, %5578) <{"indexing_maps" = [affine_map<(d0, d1, d2) -> (d0, d2)>, affine_map<(d0, d1, d2) -> (d2, d1)>, affine_map<(d0, d1, d2) -> ()>, affine_map<(d0, d1, d2) -> ()>, affine_map<(d0, d1, d2) -> (d0, d1)>], "iterator_types" = [#linalg.iterator_type<parallel>, #linalg.iterator_type<parallel>, #linalg.iterator_type<reduction>], "library_call" = "none", "operandSegmentSizes" = array<i32: 4, 1>}> ({
      ^3(%5597 : i8, %5598 : i8, %5599 : i32, %5600 : i32, %5601 : i32):
        %5602 = "arith.extsi"(%5597) : (i8) -> i32
        %5603 = "arith.subi"(%5602, %5599) : (i32, i32) -> i32
        %5604 = "arith.extsi"(%5598) : (i8) -> i32
        %5605 = "arith.subi"(%5604, %5600) : (i32, i32) -> i32
        %5606 = "arith.muli"(%5603, %5605) : (i32, i32) -> i32
        %5607 = "arith.addi"(%5601, %5606) : (i32, i32) -> i32
        "linalg.yield"(%5607) : (i32) -> ()
      }) : (memref<1x64xi8>, memref<64x10xi8>, i32, i32, memref<1x10xi32>) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "scf.if"(%6) ({
      %5608 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %5609 = "memref.dim"(%5578, %5608) : (memref<1x10xi32>, index) -> index
      %5610 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %5611 = "memref.dim"(%5578, %5610) : (memref<1x10xi32>, index) -> index
      %5612 = "arith.muli"(%5609, %5611) : (index, index) -> index
      %5613 = "arith.constant"() <{"value" = 4 : index}> : () -> index
      %5614 = "arith.muli"(%5612, %5613) : (index, index) -> index
      %5615 = "memref.extract_aligned_pointer_as_index"(%5578) : (memref<1x10xi32>) -> index
      %5616 = "memref.extract_aligned_pointer_as_index"(%5518) : (memref<1x10xi32>) -> index
      "func.call"(%5615, %5616, %5614) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_clear_l1}> : () -> ()
    %5617 = "memref.get_global"() <{"name" = @__constant_10xi32}> : () -> memref<10xi32>
    %5618 = "memref.get_global"() <{"name" = @_static_const_30}> : () -> memref<1x10xi32>
    %5619 = "arith.constant"() <{"value" = 10 : index}> : () -> index
    %5620 = "arith.constant"() <{"value" = 4 : index}> : () -> index
    %5621 = "arith.muli"(%5619, %5620) : (index, index) -> index
    %5622 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %5623 = "func.call"(%5621, %5622) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %5624 = "llvm.load"(%5623) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %5625 = "llvm.extractvalue"(%5624) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %5626 = "llvm.extractvalue"(%5624) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %5627 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %5628 = "llvm.insertvalue"(%5627, %5625) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %5629 = "llvm.insertvalue"(%5628, %5626) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %5630 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %5631 = "llvm.insertvalue"(%5629, %5630) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %5632 = "builtin.unrealized_conversion_cast"(%5619) : (index) -> i32
    %5633 = "llvm.insertvalue"(%5631, %5632) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>
    %5634 = "builtin.unrealized_conversion_cast"(%5633) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<1 x i32>, !llvm.array<1 x i32>)>) -> memref<10xi32>
    %5635 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %5636 = "arith.constant"() <{"value" = 10 : index}> : () -> index
    %5637 = "arith.constant"() <{"value" = 4 : index}> : () -> index
    %5638 = "arith.muli"(%5635, %5637) : (index, index) -> index
    %5639 = "arith.muli"(%5636, %5638) : (index, index) -> index
    %5640 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %5641 = "func.call"(%5639, %5640) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %5642 = "llvm.load"(%5641) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %5643 = "llvm.extractvalue"(%5642) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %5644 = "llvm.extractvalue"(%5642) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %5645 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>
    %5646 = "llvm.insertvalue"(%5645, %5643) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>
    %5647 = "llvm.insertvalue"(%5646, %5644) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>
    %5648 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %5649 = "llvm.insertvalue"(%5647, %5648) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>
    %5650 = "builtin.unrealized_conversion_cast"(%5635) : (index) -> i32
    %5651 = "llvm.insertvalue"(%5649, %5650) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>
    %5652 = "builtin.unrealized_conversion_cast"(%5636) : (index) -> i32
    %5653 = "llvm.insertvalue"(%5651, %5652) <{"position" = array<i64: 3, 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>
    %5654 = "builtin.unrealized_conversion_cast"(%5653) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>) -> memref<1x10xi32>
    "scf.if"(%6) ({
      %5655 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %5656 = "memref.dim"(%5617, %5655) : (memref<10xi32>, index) -> index
      %5657 = "arith.constant"() <{"value" = 4 : index}> : () -> index
      %5658 = "arith.muli"(%5656, %5657) : (index, index) -> index
      %5659 = "memref.extract_aligned_pointer_as_index"(%5617) : (memref<10xi32>) -> index
      %5660 = "memref.extract_aligned_pointer_as_index"(%5634) : (memref<10xi32>) -> index
      "func.call"(%5659, %5660, %5658) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      %5661 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %5662 = "memref.dim"(%5518, %5661) : (memref<1x10xi32>, index) -> index
      %5663 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %5664 = "memref.dim"(%5518, %5663) : (memref<1x10xi32>, index) -> index
      %5665 = "arith.muli"(%5662, %5664) : (index, index) -> index
      %5666 = "arith.constant"() <{"value" = 4 : index}> : () -> index
      %5667 = "arith.muli"(%5665, %5666) : (index, index) -> index
      %5668 = "memref.extract_aligned_pointer_as_index"(%5518) : (memref<1x10xi32>) -> index
      %5669 = "memref.extract_aligned_pointer_as_index"(%5578) : (memref<1x10xi32>) -> index
      "func.call"(%5668, %5669, %5667) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_cluster_hw_barrier}> : () -> ()
    "scf.if"(%2) ({
      "linalg.generic"(%5634, %5578, %5654) <{"indexing_maps" = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], "iterator_types" = [#linalg.iterator_type<parallel>, #linalg.iterator_type<parallel>], "library_call" = "none", "operandSegmentSizes" = array<i32: 2, 1>}> ({
      ^4(%5670 : i32, %5671 : i32, %5672 : i32):
        %5673 = "arith.addi"(%5670, %5671) : (i32, i32) -> i32
        "linalg.yield"(%5673) : (i32) -> ()
      }) : (memref<10xi32>, memref<1x10xi32>, memref<1x10xi32>) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "scf.if"(%6) ({
      %5674 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %5675 = "memref.dim"(%5654, %5674) : (memref<1x10xi32>, index) -> index
      %5676 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %5677 = "memref.dim"(%5654, %5676) : (memref<1x10xi32>, index) -> index
      %5678 = "arith.muli"(%5675, %5677) : (index, index) -> index
      %5679 = "arith.constant"() <{"value" = 4 : index}> : () -> index
      %5680 = "arith.muli"(%5678, %5679) : (index, index) -> index
      %5681 = "memref.extract_aligned_pointer_as_index"(%5654) : (memref<1x10xi32>) -> index
      %5682 = "memref.extract_aligned_pointer_as_index"(%5618) : (memref<1x10xi32>) -> index
      "func.call"(%5681, %5682, %5680) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_clear_l1}> : () -> ()
    %5683 = "memref.get_global"() <{"name" = @_static_const_31}> : () -> memref<1x10xi8>
    %5684 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %5685 = "arith.constant"() <{"value" = 10 : index}> : () -> index
    %5686 = "arith.constant"() <{"value" = 1 : index}> : () -> index
    %5687 = "arith.muli"(%5684, %5686) : (index, index) -> index
    %5688 = "arith.muli"(%5685, %5687) : (index, index) -> index
    %5689 = "arith.constant"() <{"value" = 64 : index}> : () -> index
    %5690 = "func.call"(%5688, %5689) <{"callee" = @snax_alloc_l1}> : (index, index) -> !llvm.ptr
    %5691 = "llvm.load"(%5690) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr)>
    %5692 = "llvm.extractvalue"(%5691) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %5693 = "llvm.extractvalue"(%5691) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr)>) -> !llvm.ptr
    %5694 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>
    %5695 = "llvm.insertvalue"(%5694, %5692) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>
    %5696 = "llvm.insertvalue"(%5695, %5693) <{"position" = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>
    %5697 = "arith.constant"() <{"value" = 0 : i32}> : () -> i32
    %5698 = "llvm.insertvalue"(%5696, %5697) <{"position" = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>
    %5699 = "builtin.unrealized_conversion_cast"(%5684) : (index) -> i32
    %5700 = "llvm.insertvalue"(%5698, %5699) <{"position" = array<i64: 3, 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>
    %5701 = "builtin.unrealized_conversion_cast"(%5685) : (index) -> i32
    %5702 = "llvm.insertvalue"(%5700, %5701) <{"position" = array<i64: 3, 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>, i32) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>
    %5703 = "builtin.unrealized_conversion_cast"(%5702) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.array<2 x i32>, !llvm.array<2 x i32>)>) -> memref<1x10xi8>
    "scf.if"(%6) ({
      %5704 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %5705 = "memref.dim"(%5618, %5704) : (memref<1x10xi32>, index) -> index
      %5706 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %5707 = "memref.dim"(%5618, %5706) : (memref<1x10xi32>, index) -> index
      %5708 = "arith.muli"(%5705, %5707) : (index, index) -> index
      %5709 = "arith.constant"() <{"value" = 4 : index}> : () -> index
      %5710 = "arith.muli"(%5708, %5709) : (index, index) -> index
      %5711 = "memref.extract_aligned_pointer_as_index"(%5618) : (memref<1x10xi32>) -> index
      %5712 = "memref.extract_aligned_pointer_as_index"(%5654) : (memref<1x10xi32>) -> index
      "func.call"(%5711, %5712, %5710) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_cluster_hw_barrier}> : () -> ()
    "scf.if"(%2) ({
      "linalg.generic"(%5654, %5703) <{"indexing_maps" = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], "iterator_types" = [#linalg.iterator_type<parallel>, #linalg.iterator_type<parallel>], "library_call" = "none", "operandSegmentSizes" = array<i32: 1, 1>}> ({
      ^5(%arg1_2 : i32, %arg2_2 : i8):
        %5713 = "arith.trunci"(%arg1_2) : (i32) -> i8
        "linalg.yield"(%5713) : (i8) -> ()
      }) : (memref<1x10xi32>, memref<1x10xi8>) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "scf.if"(%6) ({
      %5714 = "arith.constant"() <{"value" = 0 : index}> : () -> index
      %5715 = "memref.dim"(%5703, %5714) : (memref<1x10xi8>, index) -> index
      %5716 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %5717 = "memref.dim"(%5703, %5716) : (memref<1x10xi8>, index) -> index
      %5718 = "arith.muli"(%5715, %5717) : (index, index) -> index
      %5719 = "arith.constant"() <{"value" = 1 : index}> : () -> index
      %5720 = "arith.muli"(%5718, %5719) : (index, index) -> index
      %5721 = "memref.extract_aligned_pointer_as_index"(%5703) : (memref<1x10xi8>) -> index
      %5722 = "memref.extract_aligned_pointer_as_index"(%5683) : (memref<1x10xi8>) -> index
      "func.call"(%5721, %5722, %5720) <{"callee" = @snax_dma_1d_transfer}> : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.call"() <{"callee" = @snax_cluster_hw_barrier}> : () -> ()
    "func.return"(%5683) : (memref<1x10xi8>) -> ()
  }) : () -> ()
  "memref.global"() <{"sym_name" = "_static_const_0", "type" = memref<1x34x34x3xi8>, "initial_value", "sym_visibility" = "private"}> : () -> ()
  "memref.global"() <{"sym_name" = "_static_const_1", "type" = memref<1x32x32x16xi8>, "initial_value", "sym_visibility" = "private"}> : () -> ()
  "memref.global"() <{"sym_name" = "_static_const_2", "type" = memref<1x34x34x16xi8>, "initial_value", "sym_visibility" = "private"}> : () -> ()
  "memref.global"() <{"sym_name" = "_static_const_3", "type" = memref<1x32x32x16xi8>, "initial_value", "sym_visibility" = "private"}> : () -> ()
  "memref.global"() <{"sym_name" = "_static_const_4", "type" = memref<1x34x34x16xi8>, "initial_value", "sym_visibility" = "private"}> : () -> ()
  "memref.global"() <{"sym_name" = "_static_const_5", "type" = memref<1x32x32x16xi32>, "initial_value", "sym_visibility" = "private"}> : () -> ()
  "memref.global"() <{"sym_name" = "_static_const_6", "type" = memref<1x32x32x16xi32>, "initial_value", "sym_visibility" = "private"}> : () -> ()
  "memref.global"() <{"sym_name" = "_static_const_7", "type" = memref<1x32x32x16xi32>, "initial_value", "sym_visibility" = "private"}> : () -> ()
  "memref.global"() <{"sym_name" = "_static_const_8", "type" = memref<1x32x32x16xi32>, "initial_value", "sym_visibility" = "private"}> : () -> ()
  "memref.global"() <{"sym_name" = "_static_const_9", "type" = memref<1x32x32x16xi8>, "initial_value", "sym_visibility" = "private"}> : () -> ()
  "memref.global"() <{"sym_name" = "_static_const_10", "type" = memref<1x33x33x16xi8>, "initial_value", "sym_visibility" = "private"}> : () -> ()
  "memref.global"() <{"sym_name" = "_static_const_11", "type" = memref<1x16x16x32xi8>, "initial_value", "sym_visibility" = "private"}> : () -> ()
  "memref.global"() <{"sym_name" = "_static_const_12", "type" = memref<1x18x18x32xi8>, "initial_value", "sym_visibility" = "private"}> : () -> ()
  "memref.global"() <{"sym_name" = "_static_const_13", "type" = memref<1x16x16x32xi32>, "initial_value", "sym_visibility" = "private"}> : () -> ()
  "memref.global"() <{"sym_name" = "_static_const_14", "type" = memref<1x16x16x32xi32>, "initial_value", "sym_visibility" = "private"}> : () -> ()
  "memref.global"() <{"sym_name" = "_static_const_15", "type" = memref<1x16x16x32xi32>, "initial_value", "sym_visibility" = "private"}> : () -> ()
  "memref.global"() <{"sym_name" = "_static_const_16", "type" = memref<1x16x16x32xi32>, "initial_value", "sym_visibility" = "private"}> : () -> ()
  "memref.global"() <{"sym_name" = "_static_const_17", "type" = memref<1x16x16x32xi8>, "initial_value", "sym_visibility" = "private"}> : () -> ()
  "memref.global"() <{"sym_name" = "_static_const_18", "type" = memref<1x17x17x32xi8>, "initial_value", "sym_visibility" = "private"}> : () -> ()
  "memref.global"() <{"sym_name" = "_static_const_19", "type" = memref<1x8x8x64xi8>, "initial_value", "sym_visibility" = "private"}> : () -> ()
  "memref.global"() <{"sym_name" = "_static_const_20", "type" = memref<1x10x10x64xi8>, "initial_value", "sym_visibility" = "private"}> : () -> ()
  "memref.global"() <{"sym_name" = "_static_const_21", "type" = memref<1x8x8x64xi32>, "initial_value", "sym_visibility" = "private"}> : () -> ()
  "memref.global"() <{"sym_name" = "_static_const_22", "type" = memref<1x8x8x64xi32>, "initial_value", "sym_visibility" = "private"}> : () -> ()
  "memref.global"() <{"sym_name" = "_static_const_23", "type" = memref<1x8x8x64xi32>, "initial_value", "sym_visibility" = "private"}> : () -> ()
  "memref.global"() <{"sym_name" = "_static_const_24", "type" = memref<1x8x8x64xi32>, "initial_value", "sym_visibility" = "private"}> : () -> ()
  "memref.global"() <{"sym_name" = "_static_const_25", "type" = memref<1x8x8x64xi8>, "initial_value", "sym_visibility" = "private"}> : () -> ()
  "memref.global"() <{"sym_name" = "_static_const_26", "type" = memref<1x1x1x64xi32>, "initial_value", "sym_visibility" = "private"}> : () -> ()
  "memref.global"() <{"sym_name" = "_static_const_27", "type" = memref<8x8xi32>, "initial_value", "sym_visibility" = "private"}> : () -> ()
  "memref.global"() <{"sym_name" = "_static_const_28", "type" = memref<1x1x1x64xi8>, "initial_value", "sym_visibility" = "private"}> : () -> ()
  "memref.global"() <{"sym_name" = "_static_const_29", "type" = memref<1x10xi32>, "initial_value", "sym_visibility" = "private"}> : () -> ()
  "memref.global"() <{"sym_name" = "_static_const_30", "type" = memref<1x10xi32>, "initial_value", "sym_visibility" = "private"}> : () -> ()
  "memref.global"() <{"sym_name" = "_static_const_31", "type" = memref<1x10xi8>, "initial_value", "sym_visibility" = "private"}> : () -> ()
  "func.func"() <{"sym_name" = "snax_cluster_core_idx", "function_type" = () -> i32, "sym_visibility" = "private"}> ({
  }) : () -> ()
  "func.func"() <{"sym_name" = "snax_dma_1d_transfer", "function_type" = (index, index, index) -> (), "sym_visibility" = "private"}> ({
  }) : () -> ()
  "func.func"() <{"sym_name" = "snax_cluster_hw_barrier", "function_type" = () -> (), "sym_visibility" = "private"}> ({
  }) : () -> ()
  "func.func"() <{"sym_name" = "snax_clear_l1", "function_type" = () -> (), "sym_visibility" = "private"}> ({
  }) : () -> ()
  "func.func"() <{"sym_name" = "snax_alloc_l1", "function_type" = (index, index) -> !llvm.ptr, "sym_visibility" = "private"}> ({
  }) : () -> ()
}) : () -> ()

