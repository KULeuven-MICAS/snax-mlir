from dataclasses import dataclass

from xdsl.dialects import builtin
from xdsl.passes import ModulePass
from xdsl.traits import SymbolTable

from snaxc.acc_context import AccContext


@dataclass(frozen=True)
class InsertAccOp(ModulePass):
    name = "insert-accfg-op"

    accelerator: str  # accelerator name in registry

    """
    Parameterized pass that inserts an accfg.AcceleratorOp in the IR.
    The pass does a lookup in compiler/accelerators/registry.py

    Then the pass inserts the AcceleratorOp that is generated by the
    selected accelerator.

    Pass can be called from CLI as e.g.:
        snax-opt -p insert-accfg-op{accelerater=snax_hwpe_mult}
    """

    def apply(
        self, ctx: AccContext, op: builtin.ModuleOp
    ) -> None:  # pyright: ignore[reportIncompatibleMethodOverride]
        # Access registry to get the accelerator interface
        acc_info = ctx.get_accelerator(self.accelerator)()
        # With the interface, generate an appropriate acc op
        acc_op = acc_info.generate_acc_op()

        t = op.get_trait(SymbolTable)
        assert t is not None
        acc_string = acc_op.name_prop.string_value()
        if t.lookup_symbol(op, acc_string) is not None:
            raise RuntimeError(
                f"Cannot insert op: @{acc_string}, already present in symbol table."
            )
        t.insert_or_update(op, acc_op)
