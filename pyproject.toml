[project]
name = "snax-mlir"
description = "Driving SNAX with MLIR"
version = "0.2.2"
requires-python = "== 3.12.*"

dependencies = [
    "xdsl @ git+https://github.com/xdslproject/xdsl.git@d72f46d92ec4b03ae05b91e70d75f93735e94393"
]

[project.optional-dependencies]

# All optional dependencies for plotting and parsing
dev = [
    "pre-commit",
    "filecheck==1.0.0",
    "lit",
    "pytest",
]

# All optional dependencies for graphical plotting
viz = [
    "pandas",
    "matplotlib",
]

# Dependencies for neural network compilation
nn = [
    "tensorflow-cpu==2.16.2",
]

[project.scripts]
snax-opt = "compiler.tools.snax_opt_main:main"

[tool.ruff]
select = ["E", "F", "W", "I", "UP", "PT", "TID251"]
ignore = [
    "E741",  # https://beta.ruff.rs/docs/rules/ambiguous-variable-name/
    "PT006", # https://beta.ruff.rs/docs/rules/pytest-parametrize-names-wrong-type/
    "PT007", # https://beta.ruff.rs/docs/rules/pytest-parametrize-values-wrong-type/
    "PT011", # https://beta.ruff.rs/docs/rules/pytest-raises-too-broad/
    "PT012", # https://beta.ruff.rs/docs/rules/pytest-raises-with-multiple-statements/
    "PT015", # https://beta.ruff.rs/docs/rules/pytest-assert-always-false/
]
target-version = "py310"
line-length = 120

[tool.ruff.flake8-tidy-imports.banned-api]
"xdsl.parser.core".msg = "Use xdsl.parser instead."
"xdsl.parser.attribute_parser".msg = "Use xdsl.parser instead."
"xdsl.parser.affine_parser".msg = "Use xdsl.parser instead."
"xdsl.ir.core".msg = "Use xdsl.ir instead."
"xdsl.irdl.irdl".msg = "Use xdsl.irdl instead"
"xdsl.ir.affine.affine_expr".msg = "Use xdsl.ir.affine instead"
"xdsl.ir.affine.affine_map".msg = "Use xdsl.ir.affine instead"
"xdsl.ir.affine.affine_set".msg = "Use xdsl.ir.affine instead"


[tool.ruff.per-file-ignores]
"__init__.py" = ["F403"]
"tests/filecheck/frontend/programs/invalid.py" = ["F811", "F841"]
"tests/filecheck/frontend/dialects/invalid.py" = ["F811"]
"tests/test_declarative_assembly_format.py" = ["F811"]
"versioneer.py" = ["ALL"]
"_version.py" = ["ALL"]

[tool.ruff.mccabe]
max-complexity = 10


[tool.pyright]
reportImportCycles = false
reportMissingModuleSource = false
enableTypeIgnoreComments = false
enableExperimentalFeatures = true
typeCheckingMode = "strict"
"include" = [
    "compiler", 
    "tests",
]
"exclude" = [
    "compiler/accelerators/gemmini.py",
    "compiler/accelerators/rocc.py",
    "compiler/accelerators/snax.py",
    "compiler/accelerators/snax_alu.py",
    "compiler/accelerators/snax_gemm.py",
    "compiler/accelerators/snax_gemmx.py",
    "compiler/accelerators/snax_hwpe_mult.py",
    "compiler/dialects/accfg.py",
    "compiler/inference/dataflow.py",
    "compiler/inference/helpers.py",
    "compiler/inference/scoped_setups.py",
    "compiler/inference/trace_acc_state.py",
    "compiler/transforms/accfg_dedup.py",
    "compiler/transforms/convert_linalg_to_accfg.py",
    "compiler/transforms/frontend/preprocess_mlperf_tiny.py",
    "compiler/transforms/linalg_to_library_call.py",
    "compiler/transforms/reuse_memref_allocs.py",
    "compiler/transforms/set_memory_layout.py",
    "compiler/transforms/snax_copy_to_dma.py",
    "compiler/transforms/snax_lower_mcycle.py",
    "compiler/transforms/snax_to_func.py",
    "compiler/transforms/test_remove_memref_copy.py",
    "compiler/util/memref_descriptor.py",
    "tests/benchmark/test_snax_benchmark.py",
    "tests/dialects/test_snax.py",
    "tests/inference/test_accfg_state_tracing.py",
    "tests/util/",
]


[tool.pixi.project]
channels = ["conda-forge", "bioconda", "kuleuven-micas"]
platforms = ["linux-64"]

[tool.pixi.pypi-dependencies]
snax-mlir = { path = ".", editable = true }

[tool.pixi.environments]
default = { features = ["dev", "nn", "viz"] }

[tool.pixi.tasks]

[tool.pixi.dependencies]
mlir = { version = "==19.1.1.d401987fe349a87c53fe25829215b80b70c0c1a", channel = "kuleuven-micas" }
clang = "==19.1.1"
lld = "==19.1.1"
snax-cluster = "==0.2.7"
snakemake-minimal="*"
pyright = ">=1.1.390,<2"
vcd-to-csv = { version = ">=0.1.0,<0.2", channel = "kuleuven-micas" }
