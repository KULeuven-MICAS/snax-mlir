builtin.module {
  func.func @snax_main() -> (tensor<128xi8>, tensor<128xi8>) {
    %0 = arith.constant dense<"0x8EFE5C0094953200F98189FFCAFA4500E754FAFF020A0800B466D8FF816CB3FFD7523C006B5F82001D67ACFFA544C3FF01739AFF3F7EF3FF3BFD68FF94025B0020AE7AFFB9B6FCFF95D9BDFF6B5CFBFFB067F5FF5A0BBFFFBACD09007EB3C4FF5B6731003D6A28002EB468003DF5B5FFB23B850064778CFF060C90FF26A20E00039351008D119BFF718A5A0079111200D9C67DFFB473680001458300D34E9100EE3E15003BC551002B2790FF7C532B002E193500A209C9FF4DA23000D0F583FF23D1A6FFB16F0E007D6D3E0005978A005C8F6BFF3E1C9EFF5984D6FFAB7F8A00216AEAFF49FA8F003DD17A008D627700DEE895FF47DB0E004D0770FF565893FF3DC876FF54C89AFFEEAC90FFB48D8FFF97BC9CFF58628200FB8A55006C4B0F00A8057BFFAC58B6FFC0297D00D82868FFC6080C008873CBFF005E7E006B714600077489000A7E290072BF4E00D0035C0007EB81FF22A00700225BB0FFFA9A870084005C0069778900796514009B35A2FF06C25B008B9C760021251D00A035D4FFAFC5ACFF765B5500A44CE1FFE2E12E005594BBFF5AC98700407D4A0062E86EFFE42305002E8929004D9FFEFF80382A0084AD2A0076EBD0FFE6CCD0FF9A44C1FFD9C0CAFFA947E9FFFBC4DFFFBE2773FF66345300B30BE1FF7C3D9AFFDF1999FF03C174FF5DB0BDFF668222006C4476000E709AFFA3EDF9FF3A9094FFC11368FF"> : tensor<128xi32>
    %1 = arith.constant dense<"0x321BC226FD05EBD82146D4E0CBFAB031BAFFDDFEFBDE06E11B1638D947C3C5082CCB310ABB38464E0C2CC5181DE31ABFD108224AB2CDEA4AF54D4240C808B4C7B8CBC5C5CC462E09BAD943B007E544264A172A31BE05D649314A0BCF314010E9D42EF019DC4928B30317001717E7E7DFE4F4EFB62DF0CACAB7DD133FCBFDC7B0"> : tensor<128xi8>
    %2 = tosa.rescale %0 {input_zp = #builtin.int<0>, output_zp = #builtin.int<0>, multiplier = [#builtin.int<1140768826>], shift = [#builtin.int<47>], scale32 = true, double_round = true, per_channel = false} : (tensor<128xi32>) -> tensor<128xi8>
    func.return %2, %1 : tensor<128xi8>, tensor<128xi8>
  }
}
