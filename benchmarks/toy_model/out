#map = affine_map<(d0, d1, d2) -> (d0, d2)>
#map1 = affine_map<(d0, d1, d2) -> (d2, d1)>
#map2 = affine_map<(d0, d1, d2) -> ()>
#map3 = affine_map<(d0, d1, d2) -> (d0, d1)>
module {
  func.func @toy(%arg0: memref<1x18x18x16xi8>, %arg1: memref<16x3x3x16xi8>, %arg2: memref<16x10xi8>) -> memref<1x10xi32> {
    %c268448768_i32 = arith.constant 268448768 : i32
    %c268448512_i32 = arith.constant 268448512 : i32
    %c268448256_i32 = arith.constant 268448256 : i32
    %c268448000_i32 = arith.constant 268448000 : i32
    %c268447744_i32 = arith.constant 268447744 : i32
    %c268445440_i32 = arith.constant 268445440 : i32
    %c268440064_i32 = arith.constant 268440064 : i32
    %c160 = arith.constant 160 : index
    %c656877351_i32 = arith.constant 656877351 : i32
    %c-1838878441_i32 = arith.constant -1838878441 : i32
    %c2304 = arith.constant 2304 : index
    %c5184 = arith.constant 5184 : index
    %c10 = arith.constant 10 : index
    %c1035_i32 = arith.constant 1035 : i32
    %c1014_i32 = arith.constant 1014 : i32
    %c1_i5 = arith.constant 1 : i5
    %c1034_i32 = arith.constant 1034 : i32
    %c1033_i32 = arith.constant 1033 : i32
    %c1032_i32 = arith.constant 1032 : i32
    %c1031_i32 = arith.constant 1031 : i32
    %c1030_i32 = arith.constant 1030 : i32
    %c1029_i32 = arith.constant 1029 : i32
    %c1028_i32 = arith.constant 1028 : i32
    %c1027_i32 = arith.constant 1027 : i32
    %c1026_i32 = arith.constant 1026 : i32
    %c1025_i32 = arith.constant 1025 : i32
    %c1024_i32 = arith.constant 1024 : i32
    %c1023_i32 = arith.constant 1023 : i32
    %c1022_i32 = arith.constant 1022 : i32
    %c1021_i32 = arith.constant 1021 : i32
    %c1020_i32 = arith.constant 1020 : i32
    %c1019_i32 = arith.constant 1019 : i32
    %c1018_i32 = arith.constant 1018 : i32
    %c1017_i32 = arith.constant 1017 : i32
    %c1013_i32 = arith.constant 1013 : i32
    %c1012_i32 = arith.constant 1012 : i32
    %c1011_i32 = arith.constant 1011 : i32
    %c1010_i32 = arith.constant 1010 : i32
    %c1009_i32 = arith.constant 1009 : i32
    %c1008_i32 = arith.constant 1008 : i32
    %c1007_i32 = arith.constant 1007 : i32
    %c1006_i32 = arith.constant 1006 : i32
    %c1005_i32 = arith.constant 1005 : i32
    %c1004_i32 = arith.constant 1004 : i32
    %c1003_i32 = arith.constant 1003 : i32
    %c1002_i32 = arith.constant 1002 : i32
    %c1001_i32 = arith.constant 1001 : i32
    %c1000_i32 = arith.constant 1000 : i32
    %c999_i32 = arith.constant 999 : i32
    %c998_i32 = arith.constant 998 : i32
    %c997_i32 = arith.constant 997 : i32
    %c996_i32 = arith.constant 996 : i32
    %c995_i32 = arith.constant 995 : i32
    %c994_i32 = arith.constant 994 : i32
    %c993_i32 = arith.constant 993 : i32
    %c992_i32 = arith.constant 992 : i32
    %c991_i32 = arith.constant 991 : i32
    %c990_i32 = arith.constant 990 : i32
    %c989_i32 = arith.constant 989 : i32
    %c988_i32 = arith.constant 988 : i32
    %c987_i32 = arith.constant 987 : i32
    %c986_i32 = arith.constant 986 : i32
    %c985_i32 = arith.constant 985 : i32
    %c984_i32 = arith.constant 984 : i32
    %c983_i32 = arith.constant 983 : i32
    %c982_i32 = arith.constant 982 : i32
    %c981_i32 = arith.constant 981 : i32
    %c980_i32 = arith.constant 980 : i32
    %c979_i32 = arith.constant 979 : i32
    %c978_i32 = arith.constant 978 : i32
    %c977_i32 = arith.constant 977 : i32
    %c976_i32 = arith.constant 976 : i32
    %c975_i32 = arith.constant 975 : i32
    %c974_i32 = arith.constant 974 : i32
    %c973_i32 = arith.constant 973 : i32
    %c972_i32 = arith.constant 972 : i32
    %c971_i32 = arith.constant 971 : i32
    %c970_i32 = arith.constant 970 : i32
    %c969_i32 = arith.constant 969 : i32
    %c968_i32 = arith.constant 968 : i32
    %c967_i32 = arith.constant 967 : i32
    %c966_i32 = arith.constant 966 : i32
    %c965_i32 = arith.constant 965 : i32
    %c964_i32 = arith.constant 964 : i32
    %c963_i32 = arith.constant 963 : i32
    %c962_i32 = arith.constant 962 : i32
    %c961_i32 = arith.constant 961 : i32
    %c960_i32 = arith.constant 960 : i32
    %c1234567890_i32 = arith.constant 1234567890 : i32
    %c18_i32 = arith.constant 18 : i32
    %c-1_i32 = arith.constant -1 : i32
    %c2048_i32 = arith.constant 2048 : i32
    %c268435520_i32 = arith.constant 268435520 : i32
    %c64_i32 = arith.constant 64 : i32
    %c32_i32 = arith.constant 32 : i32
    %c36_i32 = arith.constant 36 : i32
    %c1152_i32 = arith.constant 1152 : i32
    %c2592_i32 = arith.constant 2592 : i32
    %c144_i32 = arith.constant 144 : i32
    %c16_i32 = arith.constant 16 : i32
    %c2_i32 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    %c8_i32 = arith.constant 8 : i32
    %c3 = arith.constant 3 : index
    %c18 = arith.constant 18 : index
    %c16 = arith.constant 16 : index
    %c1 = arith.constant 1 : index
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = call @snax_cluster_core_idx() {pin_to_constants = [0 : i32, 1 : i32]} : () -> i32
    %1 = arith.cmpi eq, %0, %c0_i32 : i32
    %2 = arith.cmpi eq, %0, %c1_i32 : i32
    %3 = llvm.inttoptr %c268440064_i32 : i32 to !llvm.ptr
    %4 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i32, array<4 x i32>, array<4 x i32>)>
    %5 = llvm.insertvalue %3, %4[0] : !llvm.struct<(ptr, ptr, i32, array<4 x i32>, array<4 x i32>)> 
    %6 = llvm.insertvalue %3, %5[1] : !llvm.struct<(ptr, ptr, i32, array<4 x i32>, array<4 x i32>)> 
    %7 = llvm.insertvalue %c0_i32, %6[2] : !llvm.struct<(ptr, ptr, i32, array<4 x i32>, array<4 x i32>)> 
    %8 = builtin.unrealized_conversion_cast %c1 : index to i32
    %9 = llvm.insertvalue %8, %7[3, 0] : !llvm.struct<(ptr, ptr, i32, array<4 x i32>, array<4 x i32>)> 
    %10 = builtin.unrealized_conversion_cast %c16 : index to i32
    %11 = llvm.insertvalue %10, %9[3, 1] : !llvm.struct<(ptr, ptr, i32, array<4 x i32>, array<4 x i32>)> 
    %12 = builtin.unrealized_conversion_cast %c16 : index to i32
    %13 = llvm.insertvalue %12, %11[3, 2] : !llvm.struct<(ptr, ptr, i32, array<4 x i32>, array<4 x i32>)> 
    %14 = builtin.unrealized_conversion_cast %c16 : index to i32
    %15 = llvm.insertvalue %14, %13[3, 3] : !llvm.struct<(ptr, ptr, i32, array<4 x i32>, array<4 x i32>)> 
    %16 = builtin.unrealized_conversion_cast %15 : !llvm.struct<(ptr, ptr, i32, array<4 x i32>, array<4 x i32>)> to memref<1x16x16x16xi8>
    %17 = llvm.inttoptr %c268445440_i32 : i32 to !llvm.ptr
    %18 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i32, array<4 x i32>, array<4 x i32>)>
    %19 = llvm.insertvalue %17, %18[0] : !llvm.struct<(ptr, ptr, i32, array<4 x i32>, array<4 x i32>)> 
    %20 = llvm.insertvalue %17, %19[1] : !llvm.struct<(ptr, ptr, i32, array<4 x i32>, array<4 x i32>)> 
    %21 = llvm.insertvalue %c0_i32, %20[2] : !llvm.struct<(ptr, ptr, i32, array<4 x i32>, array<4 x i32>)> 
    %22 = builtin.unrealized_conversion_cast %c1 : index to i32
    %23 = llvm.insertvalue %22, %21[3, 0] : !llvm.struct<(ptr, ptr, i32, array<4 x i32>, array<4 x i32>)> 
    %24 = builtin.unrealized_conversion_cast %c18 : index to i32
    %25 = llvm.insertvalue %24, %23[3, 1] : !llvm.struct<(ptr, ptr, i32, array<4 x i32>, array<4 x i32>)> 
    %26 = builtin.unrealized_conversion_cast %c18 : index to i32
    %27 = llvm.insertvalue %26, %25[3, 2] : !llvm.struct<(ptr, ptr, i32, array<4 x i32>, array<4 x i32>)> 
    %28 = builtin.unrealized_conversion_cast %c16 : index to i32
    %29 = llvm.insertvalue %28, %27[3, 3] : !llvm.struct<(ptr, ptr, i32, array<4 x i32>, array<4 x i32>)> 
    %30 = builtin.unrealized_conversion_cast %29 : !llvm.struct<(ptr, ptr, i32, array<4 x i32>, array<4 x i32>)> to memref<1x18x18x16xi8>
    %31 = llvm.inttoptr %c268447744_i32 : i32 to !llvm.ptr
    %32 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i32, array<4 x i32>, array<4 x i32>)>
    %33 = llvm.insertvalue %31, %32[0] : !llvm.struct<(ptr, ptr, i32, array<4 x i32>, array<4 x i32>)> 
    %34 = llvm.insertvalue %31, %33[1] : !llvm.struct<(ptr, ptr, i32, array<4 x i32>, array<4 x i32>)> 
    %35 = llvm.insertvalue %c0_i32, %34[2] : !llvm.struct<(ptr, ptr, i32, array<4 x i32>, array<4 x i32>)> 
    %36 = builtin.unrealized_conversion_cast %c16 : index to i32
    %37 = llvm.insertvalue %36, %35[3, 0] : !llvm.struct<(ptr, ptr, i32, array<4 x i32>, array<4 x i32>)> 
    %38 = builtin.unrealized_conversion_cast %c3 : index to i32
    %39 = llvm.insertvalue %38, %37[3, 1] : !llvm.struct<(ptr, ptr, i32, array<4 x i32>, array<4 x i32>)> 
    %40 = builtin.unrealized_conversion_cast %c3 : index to i32
    %41 = llvm.insertvalue %40, %39[3, 2] : !llvm.struct<(ptr, ptr, i32, array<4 x i32>, array<4 x i32>)> 
    %42 = builtin.unrealized_conversion_cast %c16 : index to i32
    %43 = llvm.insertvalue %42, %41[3, 3] : !llvm.struct<(ptr, ptr, i32, array<4 x i32>, array<4 x i32>)> 
    %44 = builtin.unrealized_conversion_cast %43 : !llvm.struct<(ptr, ptr, i32, array<4 x i32>, array<4 x i32>)> to memref<16x3x3x16xi8>
    scf.if %2 {
      %intptr = memref.extract_aligned_pointer_as_index %arg1 : memref<16x3x3x16xi8> -> index
      %intptr_0 = memref.extract_aligned_pointer_as_index %44 : memref<16x3x3x16xi8> -> index
      func.call @snax_dma_1d_transfer(%intptr, %intptr_0, %c2304) : (index, index, index) -> ()
      %intptr_1 = memref.extract_aligned_pointer_as_index %arg0 : memref<1x18x18x16xi8> -> index
      %intptr_2 = memref.extract_aligned_pointer_as_index %30 : memref<1x18x18x16xi8> -> index
      func.call @snax_dma_1d_transfer(%intptr_1, %intptr_2, %c5184) : (index, index, index) -> ()
    }
    call @snax_cluster_hw_barrier() : () -> ()
    scf.if %1 {
      %intptr = memref.extract_aligned_pointer_as_index %30 : memref<1x18x18x16xi8> -> index
      %intptr_0 = memref.extract_aligned_pointer_as_index %44 : memref<16x3x3x16xi8> -> index
      %intptr_1 = memref.extract_aligned_pointer_as_index %16 : memref<1x16x16x16xi8> -> index
      %89 = arith.index_cast %intptr : index to i32
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c960_i32, %89 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c961_i32, %c0_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c962_i32, %c8_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c963_i32, %c3_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c964_i32, %c3_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c965_i32, %c2_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c966_i32, %c2_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c967_i32, %c2_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c968_i32, %c16_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c969_i32, %c8_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c970_i32, %c144_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c971_i32, %c2592_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c972_i32, %c0_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c973_i32, %c1152_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c974_i32, %c8_i32 : (i32, i32) -> ()
      %90 = arith.index_cast %intptr_0 : index to i32
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c975_i32, %90 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c976_i32, %c0_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c977_i32, %c8_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c978_i32, %c1_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c979_i32, %c36_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c980_i32, %c32_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c981_i32, %c0_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c982_i32, %c64_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c983_i32, %c0_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c984_i32, %c268435520_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c985_i32, %c0_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c986_i32, %c8_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c987_i32, %c1_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c988_i32, %c2_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c989_i32, %c32_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c990_i32, %c0_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c991_i32, %c2048_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c992_i32, %c64_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c993_i32, %90 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c994_i32, %c0_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c995_i32, %c8_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c996_i32, %c1_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c997_i32, %c2_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c998_i32, %c32_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c999_i32, %c0_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c1000_i32, %c0_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c1001_i32, %c0_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c1002_i32, %c-1_i32 : (i32, i32) -> ()
      %91 = arith.index_cast %intptr_1 : index to i32
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c1003_i32, %91 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c1004_i32, %c0_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c1005_i32, %c0_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c1006_i32, %c0_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c1007_i32, %c0_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c1008_i32, %c0_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c1009_i32, %c0_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c1010_i32, %c0_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c1011_i32, %c0_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c1012_i32, %c1_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c1013_i32, %c1_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c1017_i32, %c18_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c1018_i32, %c1_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c1019_i32, %c64_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c1020_i32, %c0_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c1021_i32, %c-1838878441_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c1022_i32, %c1_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c1023_i32, %c656877351_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c1024_i32, %c656877351_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c1025_i32, %c1234567890_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c1026_i32, %c1234567890_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c1027_i32, %c1234567890_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c1028_i32, %c1234567890_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c1029_i32, %c1234567890_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c1030_i32, %c1234567890_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c1031_i32, %c1234567890_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c1032_i32, %c1234567890_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c1033_i32, %c64_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, rK" %c1034_i32, %c0_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, K" %c1014_i32, %c1_i5 : (i32, i5) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, K" %c1035_i32, %c1_i5 : (i32, i5) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, K" %c1035_i32, %c0_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, K" %c1035_i32, %c0_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, K" %c1014_i32, %c0_i32 : (i32, i32) -> ()
      llvm.inline_asm has_side_effects asm_dialect = att "csrw $0, $1", "I, K" %c1014_i32, %c0_i32 : (i32, i32) -> ()
    }
    %45 = llvm.inttoptr %c268448000_i32 : i32 to !llvm.ptr
    %46 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i32, array<4 x i32>, array<4 x i32>)>
    %47 = llvm.insertvalue %45, %46[0] : !llvm.struct<(ptr, ptr, i32, array<4 x i32>, array<4 x i32>)> 
    %48 = llvm.insertvalue %45, %47[1] : !llvm.struct<(ptr, ptr, i32, array<4 x i32>, array<4 x i32>)> 
    %49 = llvm.insertvalue %c0_i32, %48[2] : !llvm.struct<(ptr, ptr, i32, array<4 x i32>, array<4 x i32>)> 
    %50 = builtin.unrealized_conversion_cast %c1 : index to i32
    %51 = llvm.insertvalue %50, %49[3, 0] : !llvm.struct<(ptr, ptr, i32, array<4 x i32>, array<4 x i32>)> 
    %52 = builtin.unrealized_conversion_cast %c1 : index to i32
    %53 = llvm.insertvalue %52, %51[3, 1] : !llvm.struct<(ptr, ptr, i32, array<4 x i32>, array<4 x i32>)> 
    %54 = builtin.unrealized_conversion_cast %c1 : index to i32
    %55 = llvm.insertvalue %54, %53[3, 2] : !llvm.struct<(ptr, ptr, i32, array<4 x i32>, array<4 x i32>)> 
    %56 = builtin.unrealized_conversion_cast %c16 : index to i32
    call @snax_cluster_hw_barrier() : () -> ()
    %57 = llvm.insertvalue %56, %55[3, 3] : !llvm.struct<(ptr, ptr, i32, array<4 x i32>, array<4 x i32>)> 
    %58 = builtin.unrealized_conversion_cast %57 : !llvm.struct<(ptr, ptr, i32, array<4 x i32>, array<4 x i32>)> to memref<1x1x1x16xi8>
    %59 = llvm.inttoptr %c268448256_i32 : i32 to !llvm.ptr
    %60 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i32, array<2 x i32>, array<2 x i32>)>
    %61 = llvm.insertvalue %59, %60[0] : !llvm.struct<(ptr, ptr, i32, array<2 x i32>, array<2 x i32>)> 
    %62 = llvm.insertvalue %59, %61[1] : !llvm.struct<(ptr, ptr, i32, array<2 x i32>, array<2 x i32>)> 
    %63 = llvm.insertvalue %c0_i32, %62[2] : !llvm.struct<(ptr, ptr, i32, array<2 x i32>, array<2 x i32>)> 
    %64 = builtin.unrealized_conversion_cast %c16 : index to i32
    %65 = llvm.insertvalue %64, %63[3, 0] : !llvm.struct<(ptr, ptr, i32, array<2 x i32>, array<2 x i32>)> 
    %66 = builtin.unrealized_conversion_cast %c16 : index to i32
    %67 = llvm.insertvalue %66, %65[3, 1] : !llvm.struct<(ptr, ptr, i32, array<2 x i32>, array<2 x i32>)> 
    %68 = builtin.unrealized_conversion_cast %67 : !llvm.struct<(ptr, ptr, i32, array<2 x i32>, array<2 x i32>)> to memref<16x16xi8>
    scf.if %2 {
      %cast = memref.cast %16 : memref<1x16x16x16xi8> to memref<?x?x?x?xi8>
      %cast_0 = memref.cast %68 : memref<16x16xi8> to memref<?x?xi8>
      %cast_1 = memref.cast %58 : memref<1x1x1x16xi8> to memref<?x?x?x?xi8>
      func.call @snax_xdma(%cast, %cast_0, %cast_1) : (memref<?x?x?x?xi8>, memref<?x?xi8>, memref<?x?x?x?xi8>) -> ()
    }
    call @snax_cluster_hw_barrier() : () -> ()
    %collapse_shape = memref.collapse_shape %58 [[0, 1, 2], [3]] : memref<1x1x1x16xi8> into memref<1x16xi8>
    %69 = llvm.inttoptr %c268448512_i32 : i32 to !llvm.ptr
    %70 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i32, array<2 x i32>, array<2 x i32>)>
    %71 = llvm.insertvalue %69, %70[0] : !llvm.struct<(ptr, ptr, i32, array<2 x i32>, array<2 x i32>)> 
    %72 = llvm.insertvalue %69, %71[1] : !llvm.struct<(ptr, ptr, i32, array<2 x i32>, array<2 x i32>)> 
    %73 = llvm.insertvalue %c0_i32, %72[2] : !llvm.struct<(ptr, ptr, i32, array<2 x i32>, array<2 x i32>)> 
    %74 = builtin.unrealized_conversion_cast %c1 : index to i32
    %75 = llvm.insertvalue %74, %73[3, 0] : !llvm.struct<(ptr, ptr, i32, array<2 x i32>, array<2 x i32>)> 
    %76 = builtin.unrealized_conversion_cast %c10 : index to i32
    %77 = llvm.insertvalue %76, %75[3, 1] : !llvm.struct<(ptr, ptr, i32, array<2 x i32>, array<2 x i32>)> 
    %78 = builtin.unrealized_conversion_cast %77 : !llvm.struct<(ptr, ptr, i32, array<2 x i32>, array<2 x i32>)> to memref<1x10xi32>
    %79 = llvm.inttoptr %c268448768_i32 : i32 to !llvm.ptr
    %80 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i32, array<2 x i32>, array<2 x i32>)>
    %81 = llvm.insertvalue %79, %80[0] : !llvm.struct<(ptr, ptr, i32, array<2 x i32>, array<2 x i32>)> 
    %82 = llvm.insertvalue %79, %81[1] : !llvm.struct<(ptr, ptr, i32, array<2 x i32>, array<2 x i32>)> 
    %83 = llvm.insertvalue %c0_i32, %82[2] : !llvm.struct<(ptr, ptr, i32, array<2 x i32>, array<2 x i32>)> 
    %84 = builtin.unrealized_conversion_cast %c16 : index to i32
    %85 = llvm.insertvalue %84, %83[3, 0] : !llvm.struct<(ptr, ptr, i32, array<2 x i32>, array<2 x i32>)> 
    %86 = builtin.unrealized_conversion_cast %c10 : index to i32
    %87 = llvm.insertvalue %86, %85[3, 1] : !llvm.struct<(ptr, ptr, i32, array<2 x i32>, array<2 x i32>)> 
    %88 = builtin.unrealized_conversion_cast %87 : !llvm.struct<(ptr, ptr, i32, array<2 x i32>, array<2 x i32>)> to memref<16x10xi8>
    scf.if %2 {
      %intptr = memref.extract_aligned_pointer_as_index %arg2 : memref<16x10xi8> -> index
      %intptr_0 = memref.extract_aligned_pointer_as_index %88 : memref<16x10xi8> -> index
      func.call @snax_dma_1d_transfer(%intptr, %intptr_0, %c160) : (index, index, index) -> ()
    }
    call @snax_cluster_hw_barrier() : () -> ()
    scf.if %1 {
      linalg.generic {indexing_maps = [#map, #map1, #map2, #map2, #map3], iterator_types = ["parallel", "parallel", "reduction"], library_call = "none"} ins(%collapse_shape, %88, %c0_i32, %c0_i32 : memref<1x16xi8>, memref<16x10xi8>, i32, i32) outs(%78 : memref<1x10xi32>) {
      ^bb0(%in: i8, %in_0: i8, %in_1: i32, %in_2: i32, %out: i32):
        %89 = arith.extsi %in : i8 to i32
        %90 = arith.subi %89, %in_1 : i32
        %91 = arith.extsi %in_0 : i8 to i32
        %92 = arith.subi %91, %in_2 : i32
        %93 = arith.muli %90, %92 : i32
        %94 = arith.addi %out, %93 : i32
        linalg.yield %94 : i32
      }
    }
    call @snax_cluster_hw_barrier() : () -> ()
    return %78 : memref<1x10xi32>
  }
  func.func private @snax_cluster_core_idx() -> i32
  func.func private @snax_dma_1d_transfer(index, index, index)
  func.func private @snax_cluster_hw_barrier()
  func.func private @snax_xdma(memref<?x?x?x?xi8>, memref<?x?xi8>, memref<?x?x?x?xi8>)
}

