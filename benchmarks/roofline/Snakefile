from util.snake.configs import get_snax_gemmx_config
from tiled_quantized_matmul import print_mlir

config = get_snax_gemmx_config()
config["snaxoptflags"] = ",".join(
    [
        "preprocess",
        "convert-linalg-to-kernel",
        "insert-accfg-op{accelerator=snax_gemmx}",
        "dispatch-kernels",
        "convert-linalg-to-dart",
        "dart-fuse-operations",
        "snax-bufferize",
        "alloc-to-global",
        "set-memory-space",
        "dart-scheduler",
        "set-memory-layout",
        "realize-memref-casts",
				"reuse-memref-allocs",
        "insert-sync-barrier",
        "dispatch-regions{nb_cores=2}",
        "dart-layout-resolution",
        "convert-dart-to-snax-stream",
        "convert-linalg-to-accfg",
        "convert-accfg-to-csr",
        "snax-copy-to-dma{test_ignore_transform=true}",
        "memref-to-snax",
        "snax-to-func",
        "clear-memory-space",
        "postprocess",
    ]
)

config["mlirtransformflags"] = [
    "--pass-pipeline='builtin.module(transform-interpreter{debug-bind-trailing-args=linalg.quantized_matmul}, test-transform-dialect-erase-schedule)'"
]


module snax_rules:
    snakefile:
        "../../util/snake/snax.smk"
    config:
        config


use rule * from snax_rules as snax_*


# M, N, K, m, m
configs = [
	(512, 1024, 256, 64, 64),
	(512, 512, 384, 32, 64),
	(512, 256, 512, 32, 32),
	(256, 256, 768, 16, 32),
	(128, 256, 1024, 16, 16),
	(128, 128, 1536, 8, 16),
	(64, 128, 2048, 8, 8),
]

rule all:
    input:
        expand("{M}_{N}_{K}_{m}_{n}_traces.json", zip,
            M=[c[0] for c in configs],
            N=[c[1] for c in configs],
            K=[c[2] for c in configs],
            m=[c[3] for c in configs],
            n=[c[4] for c in configs]
        )


# Rule that calls print_mlir(M, N, K, m, n, filename) to generate each output file.
rule generate_tiled_quantized_matmul:
    output:
        "{M}_{N}_{K}_{m}_{n,\d+}.transform.mlir"
    run:
        # Convert wildcards to integers
        M = int(wildcards.M)
        N = int(wildcards.N)
        K = int(wildcards.K)
        m = int(wildcards.m)
        n = int(wildcards.n)
        filename = output[0]
        # Call the function that writes the MLIR file
        print_mlir(filename, M, N, K, m, n)

rule apply_transforms_mlir:
    input:
        "{file}.transform.mlir",
    output:
        "{file}.mlir",
    shell:
        "{config[mlir-opt]} {config[mlirtransformflags]} --mlir-print-op-generic --mlir-print-local-scope -o {output} {input}"


rule link_snax_binary:
    input:
        "{file}.o",
        "main.o",
    output:
        "{file}.x",
    shell:
        "{config[ld]} {config[ldflags]} {input} -o {output}"
