MAKEFILE_RULES_DIRNAME := $(dir $(abspath $(lastword $(MAKEFILE_LIST))))

# Courtesy of Federico Ficarelli

# NOTE: we are using absolute paths from the Docker container
SNITCH_LLVM_PATH = /usr/bin
LLVM_VERSION_POSTFIX =
CC            = $(SNITCH_LLVM_PATH)/clang$(LLVM_VERSION_POSTFIX)
LD            = $(SNITCH_LLVM_PATH)/clang$(LLVM_VERSION_POSTFIX)
AR            = $(SNITCH_LLVM_PATH)/llvm-ar$(LLVM_VERSION_POSTFIX)
RANLIB        = $(SNITCH_LLVM_PATH)/llvm-ranlib$(LLVM_VERSION_POSTFIX)
OBJDUMP       = $(SNITCH_LLVM_PATH)/llvm-objdump$(LLVM_VERSION_POSTFIX)
DASM          = spike-dasm
GENTRACE      = /opt/gen_trace.py
MLIROPT       = mlir-opt
MLIRTRANSLATE = mlir-translate
SNAXOPT       = $(MAKEFILE_RULES_DIRNAME)/../compiler/snax-opt
PYTHON        = python3
TFLITE_TO_TOSA = $(MAKEFILE_RULES_DIRNAME)/tflite_to_tosa.py

# Mixing .c and .ll files makes some flags, useful for the former,
# unused for the latter (e.g. -I)
CFLAGS += -Wno-unused-command-line-argument
# Common flags
CFLAGS += -I$(SNITCH_SW_PATH)/target/snitch_cluster/sw/runtime/rtl-generic/src
CFLAGS += -I$(SNITCH_SW_PATH)/target/snitch_cluster/sw/runtime/common
CFLAGS += -I$(SNITCH_SW_PATH)/sw/snRuntime/api
CFLAGS += -I$(SNITCH_SW_PATH)/sw/snRuntime/src
CFLAGS += -I$(SNITCH_SW_PATH)/sw/snRuntime/src/omp/
CFLAGS += -I$(SNITCH_SW_PATH)/sw/snRuntime/api/omp/
CFLAGS += -I$(SNITCH_SW_PATH)/sw/math/arch/riscv64/bits/
CFLAGS += -I$(SNITCH_SW_PATH)/sw/math/arch/generic
CFLAGS += -I$(SNITCH_SW_PATH)/sw/math/src/include
CFLAGS += -I$(SNITCH_SW_PATH)/sw/math/src/internal
CFLAGS += -I$(SNITCH_SW_PATH)/sw/math/include/bits
CFLAGS += -I$(SNITCH_SW_PATH)/sw/math/include
CFLAGS += -I$(MAKEFILE_RULES_DIRNAME)include
CFLAGS += -D__DEFINED_uint64_t
CFLAGS += --target=riscv32-unknown-elf
CFLAGS += -mcpu=generic-rv32
CFLAGS += -march=rv32imafdzfh
CFLAGS += -mabi=ilp32d
CFLAGS += -mcmodel=medany
CFLAGS += -ftls-model=local-exec
CFLAGS += -ffast-math
CFLAGS += -fno-builtin-printf
CFLAGS += -fno-common
CFLAGS += -O3

LDFLAGS += -fuse-ld=$(SNITCH_LLVM_PATH)/ld.lld$(LLVM_VERSION_POSTFIX)
LDFLAGS += --target=riscv32-unknown-elf
LDFLAGS += -mcpu=generic-rv32
LDFLAGS += -march=rv32imafdzfh
LDFLAGS += -mabi=ilp32d
LDFLAGS += -mcmodel=medany
LDFLAGS += -T$(SNITCH_SW_PATH)/sw/snRuntime/base.ld
LDFLAGS += -L$(SNITCH_SW_PATH)/target/snitch_cluster/sw/runtime/rtl-generic
LDFLAGS += -L$(SNITCH_SW_PATH)/target/snitch_cluster/sw/runtime/rtl-generic/build
LDFLAGS += -nostdlib
LDFLAGS += -lsnRuntime

# useful for debugging at llvm level:
%.ll: %.c
	$(CC) $(CFLAGS) -emit-llvm -O0 -S -c $< -o $@

%.o: %.c
	$(CC) $(CFLAGS) -c $< -o $@

%.ll12: %.ll
	$(MAKEFILE_RULES_DIRNAME)/tollvm12.py < $< > $@

%.o: %.ll12
	$(CC) $(CFLAGS) -x ir -c $< -o $@

%.o: %.S
	$(CC) $(CFLAGS) -c $< -o $@

# TRANSFORM Pre-Preprocessing

MLIRTRANSFORM = --pass-pipeline='builtin.module(test-transform-dialect-interpreter{bind-first-extra-to-ops=linalg.quantized_matmul}, test-transform-dialect-erase-schedule)'

%.mlir: %.transform.mlir
	$(MLIROPT) $(MLIRTRANSFORM) -o $@ $<

# MLIR Preprocessing

MLIRPREPROCFLAGS = --pass-pipeline='builtin.module(func.func(tosa-to-linalg-named, tosa-to-tensor, tosa-to-scf, tosa-to-linalg))'
MLIRPREPROCFLAGS += --mlir-print-op-generic
MLIRPREPROCFLAGS += --mlir-print-local-scope

MLIRPREPROC2FLAGS = --tosa-to-arith="include-apply-rescale" 
MLIRPREPROC2FLAGS += --empty-tensor-to-alloc-tensor

MLIRPREPROC3FLAGS += --test-linalg-transform-patterns="test-generalize-pad-tensor"
MLIRPREPROC3FLAGS += --linalg-generalize-named-ops
MLIRPREPROC3FLAGS += --empty-tensor-to-alloc-tensor --one-shot-bufferize="bufferize-function-boundaries allow-return-allocs-from-loops function-boundary-type-conversion=identity-layout-map"
MLIRPREPROC3FLAGS += --mlir-print-op-generic
MLIRPREPROC3FLAGS += --mlir-print-local-scope

%.preproc1.mlir: %.mlir
	$(MLIROPT) $(MLIRPREPROCFLAGS) -o $@ $<

%.preproc2.mlir: %.preproc1.mlir
	$(MLIROPT) $(MLIRPREPROC2FLAGS) -o $@ $<

%.preprocfinal.mlir: %.preproc2.mlir
	$(MLIROPT) $(MLIRPREPROC3FLAGS) -o $@ $<

# SNAX opt

SNAXOPTFLAGS = -p dispatch-kernels,set-memory-space,set-memory-layout,realize-memref-casts,reuse-memref-allocs,insert-sync-barrier,dispatch-regions,linalg-to-library-call,snax-copy-to-dma,memref-to-snax,snax-to-func,clear-memory-space

%.snax-opt.mlir: %.preprocfinal.mlir
	$(SNAXOPT) $(SNAXOPTFLAGS) -o $@ $<

# Lower everithing to LLVM, loosely based on:
# https://github.com/llvm/llvm-project/blob/main/mlir/test/lib/Dialect/LLVM/TestLowerToLLVM.cpp

MLIROPTFLAGS =
MLIROPTFLAGS += --convert-linalg-to-loops
MLIROPTFLAGS += --convert-scf-to-cf
MLIROPTFLAGS += --lower-affine
MLIROPTFLAGS += --canonicalize
MLIROPTFLAGS += --cse
MLIROPTFLAGS += --convert-math-to-llvm
MLIROPTFLAGS += --llvm-request-c-wrappers
MLIROPTFLAGS += --expand-strided-metadata
MLIROPTFLAGS += --lower-affine
MLIROPTFLAGS += --convert-index-to-llvm=index-bitwidth=32
MLIROPTFLAGS += --convert-cf-to-llvm=index-bitwidth=32
MLIROPTFLAGS += --convert-arith-to-llvm=index-bitwidth=32
MLIROPTFLAGS += --convert-func-to-llvm='index-bitwidth=32'
MLIROPTFLAGS += --finalize-memref-to-llvm='use-generic-functions index-bitwidth=32'
MLIROPTFLAGS += --canonicalize
MLIROPTFLAGS += --reconcile-unrealized-casts

# Bypass snax-opt
%.no-snax-opt.ll.mlir: %.preprocfinal.mlir
	$(MLIROPT) $(MLIROPTFLAGS) -o $@ $<

%.ll.mlir: %.snax-opt.mlir
	$(MLIROPT) $(MLIROPTFLAGS) -o $@ $<

%.ll: %.ll.mlir
	$(MLIRTRANSLATE) --mlir-to-llvmir -o $@ $<

# Trace rules

%.trace.txt %.trace.json: %.dasm
	$(DASM) < $< | $(GENTRACE) --permissive -d $*.trace.json > $*.trace.txt

define get_trace_targets
	$(addsuffix .trace.txt, $(basename $(shell find $(1) -name 'trace_chip_00_hart_*.dasm')))
endef

traces: $(call get_trace_targets,.)

# TFLite Flatbuffer conversion
%.mlir.bc: %.tflite
	$(TFLITE_TO_TOSA) -c $< -o $@

# Convert bytecode to textual format
%.mlir: %.mlir.bc
	$(MLIROPT) --mlir-print-op-generic --mlir-print-local-scope -o $@ $<
